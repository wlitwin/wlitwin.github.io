// Generated by js_of_ocaml 3.9.1
(function(joo_global_object)
   {"use strict";
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_gc_major(){return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_bytes(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_jsbytes(h,v.c);break;
        case 2:h = caml_hash_mix_bytes_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_get(o,f){return o[f]}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call15(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
     {return f.length == 15
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
              :caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     opt=[0,103],
     empty=[254,0.,0.,0.,0.],
     partial=
      [8,
       [0,0,0],
       0,
       [0,2],
       [11,
        caml_string_of_jsbytes(" w "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" h "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" pad "),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(" '"),
              [0,[11,caml_string_of_jsbytes("'\n"),[10,0]]]]]]]]]]],
     partial$0=
      [11,
       caml_string_of_jsbytes(") (h "),
       [4,
        0,
        0,
        0,
        [11,
         caml_string_of_jsbytes(")\n(gx "),
         [4,
          0,
          0,
          0,
          [11,
           caml_string_of_jsbytes(") (gy "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(") (gw "),
             [4,
              0,
              0,
              0,
              [11,
               caml_string_of_jsbytes(") (gh "),
               [4,0,0,0,[11,caml_string_of_jsbytes(")\nscale "),partial]]]]]]]]]]],
     params$0=[0,2048,2048],
     empty$4=[0,0,0,0,0],
     init$1=[0,0,0,0,0],
     empty_path=[0,0,0,0,0],
     empty_row=[0,0,0,0.,0.,0.,0],
     empty_glyph_position=[0,0,0.,0.,0.],
     title=caml_string_of_jsbytes("Widgets 'n stuff"),
     text$0=caml_string_of_jsbytes("Search"),
     text$1=caml_string_of_jsbytes("Effects"),
     text$2=caml_string_of_jsbytes("Remember me"),
     units=caml_string_of_jsbytes("px"),
     text$3=caml_string_of_jsbytes("123.00"),
     icon_check=caml_string_of_jsbytes("\xe2\x9c\x93"),
     text=
      caml_string_of_jsbytes
       ("This is longer chunk of text.\n  \n  Would have used lorem ipsum but she    was busy jumping over the lazy dog with the fox and all the men who came to the aid of the party.\xf0\x9f\x8e\x89"),
     hover_text=
      caml_string_of_jsbytes
       ("Hover your mouse over the text to see calculated caret position");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _c_=caml_string_of_jsbytes("true"),
     _d_=caml_string_of_jsbytes("false"),
     _b_=caml_string_of_jsbytes("char_of_int"),
     _a_=caml_string_of_jsbytes("Stdlib.Exit"),
     _f_=caml_string_of_jsbytes("\\\\"),
     _g_=caml_string_of_jsbytes("\\'"),
     _h_=caml_string_of_jsbytes("\\b"),
     _i_=caml_string_of_jsbytes("\\t"),
     _j_=caml_string_of_jsbytes("\\n"),
     _k_=caml_string_of_jsbytes("\\r"),
     _e_=caml_string_of_jsbytes("Char.chr"),
     _n_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _m_=caml_string_of_jsbytes("Bytes.blit"),
     _l_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _o_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _q_=caml_string_of_jsbytes("Array.fill"),
     _p_=caml_string_of_jsbytes("Array.init"),
     _r_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     _u_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _t_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _s_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _D_=caml_string_of_jsbytes("%c"),
     _E_=caml_string_of_jsbytes("%s"),
     _F_=caml_string_of_jsbytes("%i"),
     _G_=caml_string_of_jsbytes("%li"),
     _H_=caml_string_of_jsbytes("%ni"),
     _I_=caml_string_of_jsbytes("%Li"),
     _J_=caml_string_of_jsbytes("%f"),
     _K_=caml_string_of_jsbytes("%B"),
     _L_=caml_string_of_jsbytes("%{"),
     _M_=caml_string_of_jsbytes("%}"),
     _N_=caml_string_of_jsbytes("%("),
     _O_=caml_string_of_jsbytes("%)"),
     _P_=caml_string_of_jsbytes("%a"),
     _Q_=caml_string_of_jsbytes("%t"),
     _R_=caml_string_of_jsbytes("%?"),
     _S_=caml_string_of_jsbytes("%r"),
     _T_=caml_string_of_jsbytes("%_r"),
     _U_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _X_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _Y_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _Z_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _V_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _W_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bd_=caml_string_of_jsbytes("%u"),
     _bb_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bc_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _be_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bf_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bg_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bh_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bi_=caml_string_of_jsbytes("@{"),
     _bj_=caml_string_of_jsbytes("@["),
     _bk_=caml_string_of_jsbytes("@{"),
     _bl_=caml_string_of_jsbytes("@["),
     _ba_=caml_string_of_jsbytes("nan"),
     _a__=caml_string_of_jsbytes("neg_infinity"),
     _a$_=caml_string_of_jsbytes("infinity"),
     _a9_=caml_string_of_jsbytes("."),
     _aX_=caml_string_of_jsbytes("%+nd"),
     _aY_=caml_string_of_jsbytes("% nd"),
     _a0_=caml_string_of_jsbytes("%+ni"),
     _a1_=caml_string_of_jsbytes("% ni"),
     _a2_=caml_string_of_jsbytes("%nx"),
     _a3_=caml_string_of_jsbytes("%#nx"),
     _a4_=caml_string_of_jsbytes("%nX"),
     _a5_=caml_string_of_jsbytes("%#nX"),
     _a6_=caml_string_of_jsbytes("%no"),
     _a7_=caml_string_of_jsbytes("%#no"),
     _aW_=caml_string_of_jsbytes("%nd"),
     _aZ_=caml_string_of_jsbytes("%ni"),
     _a8_=caml_string_of_jsbytes("%nu"),
     _aK_=caml_string_of_jsbytes("%+ld"),
     _aL_=caml_string_of_jsbytes("% ld"),
     _aN_=caml_string_of_jsbytes("%+li"),
     _aO_=caml_string_of_jsbytes("% li"),
     _aP_=caml_string_of_jsbytes("%lx"),
     _aQ_=caml_string_of_jsbytes("%#lx"),
     _aR_=caml_string_of_jsbytes("%lX"),
     _aS_=caml_string_of_jsbytes("%#lX"),
     _aT_=caml_string_of_jsbytes("%lo"),
     _aU_=caml_string_of_jsbytes("%#lo"),
     _aJ_=caml_string_of_jsbytes("%ld"),
     _aM_=caml_string_of_jsbytes("%li"),
     _aV_=caml_string_of_jsbytes("%lu"),
     _ax_=caml_string_of_jsbytes("%+Ld"),
     _ay_=caml_string_of_jsbytes("% Ld"),
     _aA_=caml_string_of_jsbytes("%+Li"),
     _aB_=caml_string_of_jsbytes("% Li"),
     _aC_=caml_string_of_jsbytes("%Lx"),
     _aD_=caml_string_of_jsbytes("%#Lx"),
     _aE_=caml_string_of_jsbytes("%LX"),
     _aF_=caml_string_of_jsbytes("%#LX"),
     _aG_=caml_string_of_jsbytes("%Lo"),
     _aH_=caml_string_of_jsbytes("%#Lo"),
     _aw_=caml_string_of_jsbytes("%Ld"),
     _az_=caml_string_of_jsbytes("%Li"),
     _aI_=caml_string_of_jsbytes("%Lu"),
     _ak_=caml_string_of_jsbytes("%+d"),
     _al_=caml_string_of_jsbytes("% d"),
     _an_=caml_string_of_jsbytes("%+i"),
     _ao_=caml_string_of_jsbytes("% i"),
     _ap_=caml_string_of_jsbytes("%x"),
     _aq_=caml_string_of_jsbytes("%#x"),
     _ar_=caml_string_of_jsbytes("%X"),
     _as_=caml_string_of_jsbytes("%#X"),
     _at_=caml_string_of_jsbytes("%o"),
     _au_=caml_string_of_jsbytes("%#o"),
     _aj_=caml_string_of_jsbytes("%d"),
     _am_=caml_string_of_jsbytes("%i"),
     _av_=caml_string_of_jsbytes("%u"),
     _v_=caml_string_of_jsbytes("@]"),
     _w_=caml_string_of_jsbytes("@}"),
     _x_=caml_string_of_jsbytes("@?"),
     _y_=caml_string_of_jsbytes("@\n"),
     _z_=caml_string_of_jsbytes("@."),
     _A_=caml_string_of_jsbytes("@@"),
     _B_=caml_string_of_jsbytes("@%"),
     _C_=caml_string_of_jsbytes("@"),
     _ai_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bm_=caml_string_of_jsbytes("x"),
     _br_=caml_string_of_jsbytes("Hashtbl: unsupported hash table format"),
     _bq_=[0,0],
     _bp_=[0,caml_string_of_jsbytes("hashtbl.ml"),102,23],
     _cE_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _cC_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _bn_=caml_string_of_jsbytes(""),
     _bs_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _bt_=caml_string_of_jsbytes("jsError"),
     _bu_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _bx_=caml_string_of_jsbytes("Expected some"),
     _bw_=
      caml_string_of_jsbytes
       ("use of [return] from a [with_return] that already returned"),
     _bv_=caml_string_of_jsbytes("Return"),
     _by_=caml_string_of_jsbytes("impossible"),
     _bA_=
      [0,
       [11,
        caml_string_of_jsbytes("x0:"),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" y0:"),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" x1:"),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(" y1:"),
              [4,
               0,
               0,
               0,
               [11,caml_string_of_jsbytes(" (w "),[4,0,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("x0:%d y0:%d x1:%d y1:%d (w %d) (h %d)\n(gx %d) (gy %d) (gw %d) (gh %d)\nscale %.2f w %d h %d pad %d '%c'\n%!")],
     _bB_=caml_string_of_jsbytes("EXN"),
     _bz_=
      [0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       9,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       7,
       8,
       8,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       10,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       3,
       3,
       11,
       6,
       6,
       6,
       5,
       8,
       8,
       8,
       8,
       8,
       8,
       8,
       8,
       8,
       8,
       8,
       0,
       12,
       24,
       36,
       60,
       96,
       84,
       12,
       12,
       12,
       48,
       72,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       0,
       12,
       12,
       12,
       12,
       12,
       0,
       12,
       0,
       12,
       12,
       12,
       24,
       12,
       12,
       12,
       12,
       12,
       24,
       12,
       24,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       24,
       12,
       12,
       12,
       12,
       12,
       24,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       24,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       36,
       12,
       36,
       12,
       12,
       12,
       36,
       12,
       12,
       12,
       12,
       12,
       36,
       12,
       36,
       12,
       12,
       12,
       36,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12,
       12],
     _bE_=caml_string_of_jsbytes("Unimplemented"),
     _bD_=caml_string_of_jsbytes("12px "),
     _bC_=[0,2146,-555,0],
     _bF_=caml_string_of_jsbytes("failed to compile vertex shader"),
     _bG_=caml_string_of_jsbytes("failed to compile fragment shader"),
     _bH_=caml_string_of_jsbytes("Failed to link program"),
     _bL_=[0,0,0],
     _bI_=
      [0,
       [11,caml_string_of_jsbytes("Alignment "),[4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("Alignment %d\n%!")],
     _bJ_=
      [0,
       [11,
        caml_string_of_jsbytes("Frag size before "),
        [4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("Frag size before %d\n%!")],
     _bK_=
      [0,
       [11,caml_string_of_jsbytes("Frag size "),[4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("Frag size %d\n%!")],
     _bP_=caml_string_of_jsbytes("Couldn't create font texture"),
     _bO_=[0,caml_string_of_jsbytes("graphv/common/graphv_core.ml"),1227,16],
     _bN_=caml_string_of_jsbytes("expected some"),
     _bM_=[0,caml_string_of_jsbytes("graphv/common/graphv_core.ml"),90,12],
     _bQ_=caml_string_of_jsbytes("canvas"),
     _b8_=caml_string_of_jsbytes("Login"),
     _b9_=caml_string_of_jsbytes("Email"),
     _b__=caml_string_of_jsbytes("Password"),
     _b$_=caml_string_of_jsbytes("Sign In"),
     _ca_=caml_string_of_jsbytes("Diameter"),
     _cb_=caml_string_of_jsbytes("Delete"),
     _cc_=caml_string_of_jsbytes("Cancel"),
     _b6_=caml_string_of_jsbytes("sans"),
     _b7_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _b4_=caml_string_of_jsbytes("sans"),
     _b5_=caml_string_of_jsbytes("icons"),
     _b1_=caml_string_of_jsbytes("sans-bold"),
     _b2_=caml_string_of_jsbytes("icons"),
     _b3_=caml_string_of_jsbytes("sans-bold"),
     _bZ_=caml_string_of_jsbytes("sans"),
     _b0_=caml_string_of_jsbytes("sans"),
     _bY_=caml_string_of_jsbytes("sans"),
     _bX_=caml_string_of_jsbytes("sans"),
     _bV_=caml_string_of_jsbytes("sans"),
     _bW_=caml_string_of_jsbytes("icons"),
     _bS_=caml_string_of_jsbytes("icons"),
     _bT_=caml_string_of_jsbytes("sans"),
     _bU_=caml_string_of_jsbytes("icons"),
     _bR_=caml_string_of_jsbytes("sans-bold"),
     _cd_=caml_string_of_jsbytes("mono"),
     _ce_=
      [0,
       [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(" FPS"),0]],
       caml_string_of_jsbytes("%.2f FPS")],
     _cf_=
      [0,
       [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(" ms"),0]],
       caml_string_of_jsbytes("%.2f ms")],
     _ck_=
      [0,
       [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes("px"),0]],
       caml_string_of_jsbytes("%.2fpx")],
     _cl_=
      [0,
       [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes("px"),0]],
       caml_string_of_jsbytes("%.2fpx")],
     _ch_=caml_string_of_jsbytes("img"),
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("../assets/images/image"),
        [4,0,0,0,[11,caml_string_of_jsbytes(".jpg"),0]]],
       caml_string_of_jsbytes("../assets/images/image%d.jpg")],
     _cj_=
      [0,
       [11,caml_string_of_jsbytes("img"),[4,0,0,0,0]],
       caml_string_of_jsbytes("img%d")],
     _cg_=caml_string_of_jsbytes("Frame Time"),
     _cm_=caml_string_of_jsbytes("mono"),
     _cn_=caml_string_of_jsbytes("mono"),
     _co_=caml_string_of_jsbytes("icons"),
     _cp_=caml_string_of_jsbytes("icons"),
     _cq_=caml_string_of_jsbytes("arial"),
     _cr_=caml_string_of_jsbytes("arial"),
     _cs_=caml_string_of_jsbytes("Roboto"),
     _ct_=caml_string_of_jsbytes("sans"),
     _cu_=caml_string_of_jsbytes("Roboto-Bold"),
     _cv_=caml_string_of_jsbytes("sans-bold"),
     _cw_=caml_string_of_jsbytes("Emoji"),
     _cx_=caml_string_of_jsbytes("emoji"),
     _cy_=caml_string_of_jsbytes("emoji"),
     _cz_=caml_string_of_jsbytes("sans"),
     _cA_=caml_string_of_jsbytes("emoji"),
     _cB_=caml_string_of_jsbytes("sans-bold");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,_a_,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_c_:_d_}
    caml_ml_open_descriptor_in(0);
    var oc=caml_ml_open_descriptor_out(1);
    caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_nE_)
             {_nE_ = caml_wrap_exception(_nE_);
              if(_nE_[1] !== Sys_error)throw _nE_;
              var _nD_=_nE_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function print_endline(s)
     {output_string(oc,s);caml_ml_output_char(oc,10);return caml_ml_flush(oc)}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {for(;;)
       {var
         f_yet_to_run=[0,1],
         old_exit=exit_function[1],
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {if(compare_and_set(f_yet_to_run,1,0))caml_call1(f,0);
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=compare_and_set(exit_function,old_exit,new_exit),
         _nC_=1 - success;
        if(_nC_)continue;
        return _nC_}}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    if(caml_sys_const_naked_pointers_checked(0))
     at_exit(function(_nB_){return caml_gc_major(_nB_)});
    function map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _nz_=function(_nA_){return map(f,next,_nA_)};
        return [0,caml_call1(f,x),_nz_]}
      return 0}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var seq$1=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=seq$1;
          continue}
        return 0}}
    function chr(n){if(0 <= n && ! (255 < n))return n;return invalid_arg(_e_)}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof match === "number";
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub_string(b,ofs,len)
     {var switch$0=0;
      if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(b) - len | 0) < ofs))
       {var r=caml_create_bytes(len);
        caml_blit_bytes(b,ofs,r,0,len);
        var _ny_=r;
        switch$0 = 1}
      if(! switch$0)var _ny_=invalid_arg(_l_);
      return caml_string_of_bytes(_ny_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _nw_=1;return _nw_}
       catch(_nx_)
        {_nx_ = caml_wrap_exception(_nx_);
         if(_nx_ === Not_found)return 0;
         throw _nx_}
      return invalid_arg(_o_)}
    function contains(s,c){return contains_from(s,0,c)}
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_nu_=l - 1 | 0,_nt_=1;
        if(! (_nu_ < 1))
         {var i=_nt_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _nv_=i + 1 | 0;
            if(_nu_ !== i){var i=_nv_;continue}
            break}}
        return res}
      return invalid_arg(_p_)}
    function iter$0(f,a)
     {var _nr_=a.length - 1 - 1 | 0,_nq_=0;
      if(! (_nr_ < 0))
       {var i=_nq_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _ns_=i + 1 | 0;
          if(_nr_ !== i){var i=_ns_;continue}
          break}}
      return 0}
    caml_fresh_oo_id(0);
    function min$0(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    caml_fresh_oo_id(0);
    var Undefined=[248,_r_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_u_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_s_]}
        throw [0,Assert_failure,_t_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _no_=len < min_len?1:0;
      if(_no_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _np_=0}
      else
       var _np_=_no_;
      return _np_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _v_;
         case 1:return _w_;
         case 2:return _x_;
         case 3:return _y_;
         case 4:return _z_;
         case 5:return _A_;
         default:return _B_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:
          var c=formatting_lit[1];
          return symbol(_C_,caml_string_of_bytes(make(1,c)))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_K_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_L_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_N_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _m2_=function(param){return 0},
         _m3_=function(param){return 0},
         _m4_=function(param){return 0};
        return [0,function(param){return 0},_m4_,_m3_,_m2_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _m5_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_m5_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _m6_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _m6_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _m7_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _m7_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _m8_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _m8_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _m9_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _m9_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _m__=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _m__,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _m$_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _m$_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _na_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _na_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _nb_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _nb_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _nc_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _nd_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _ne_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _ne_,
                  _nd_,
                  _nc_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _nf_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _nf_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _ng_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _ng_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _nh_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _nh_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _ni_=function(param){caml_call1(de$12,0);return 0},
           _nj_=function(param){caml_call1(ed$12,0);return 0},
           _nk_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _nk_,
                  _nj_,
                  _ni_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _nl_=function(param){caml_call1(de$13,0);return 0},
           _nm_=function(param){caml_call1(ed$13,0);return 0},
           _nn_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _nn_,
                  _nm_,
                  _nl_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_U_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_mJ_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_mJ_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_mK_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_mK_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_mL_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_mL_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_mM_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_mM_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_mN_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_mN_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_mO_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_mO_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_mP_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_mP_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_mQ_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_mQ_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_mR_=ty1[2],_mS_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_mT_=trans(_mR_,rest2$7);
              return [8,trans(_mS_,ty2),_mT_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ab_];
          break;
         case 9:
          var switch$10=0,_mU_=ty1[3],_mV_=ty1[2],_mW_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_mV_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_mW_,ty22,trans(_mU_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ac_];
          break;
         case 10:
          var _mX_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_mX_,rest2$9)]}
          throw [0,Assert_failure,_ad_];
         case 11:
          var switch$11=0,_mY_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_mY_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ae_];
          break;
         case 12:
          var switch$12=0,_mZ_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_mZ_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_af_];
          break;
         case 13:
          var switch$13=0,_m0_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_m0_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ag_];
          break;
         default:
          var switch$14=0,_m1_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_m1_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ah_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_X_];
        case 1:throw [0,Assert_failure,_Y_];
        case 2:throw [0,Assert_failure,_Z_];
        case 3:throw [0,Assert_failure,___];
        case 4:throw [0,Assert_failure,_$_];
        case 5:throw [0,Assert_failure,_V_];
        case 6:throw [0,Assert_failure,_W_];
        default:throw [0,Assert_failure,_aa_]}}
    var Type_mismatch=[248,_ai_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _mI_=match[2];
          if(typeof _mI_ !== "number" && 2 === _mI_[0])
           {var rest=_mI_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _mG_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_mG_))
             throw Type_mismatch;
            var _mH_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_mH_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _mp_=match$1[2],
           _mo_=match$1[1];
          if(typeof _mp_ !== "number" && 1 === _mp_[0])
           {var
             fmtty_rest$1=_mp_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_mo_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _mr_=match$3[2],
           _mq_=match$3[1];
          if(typeof _mr_ !== "number" && 1 === _mr_[0])
           {var
             fmtty_rest$2=_mr_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_mq_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _mt_=match$5[3],
           _ms_=match$5[1];
          if(typeof _mt_ !== "number" && 2 === _mt_[0])
           {var
             fmtty_rest$3=_mt_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_ms_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _mv_=match$7[3],
           _mu_=match$7[1];
          if(typeof _mv_ !== "number" && 3 === _mv_[0])
           {var
             fmtty_rest$4=_mv_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_mu_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _mx_=match$9[3],
           _mw_=match$9[1];
          if(typeof _mx_ !== "number" && 4 === _mx_[0])
           {var
             fmtty_rest$5=_mx_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_mw_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _mz_=match$11[3],
           _my_=match$11[1];
          if(typeof _mz_ !== "number" && 5 === _mz_[0])
           {var
             fmtty_rest$6=_mz_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_my_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _mB_=match$13[3],
           _mA_=match$13[1];
          if(typeof _mB_ !== "number" && 6 === _mB_[0])
           {var
             fmtty_rest$7=_mB_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_mA_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _mD_=match$15[2],
           _mC_=match$15[1];
          if(typeof _mD_ !== "number" && 7 === _mD_[0])
           {var
             fmtty_rest$8=_mD_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_mC_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _mE_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_mE_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _mF_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_mF_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_mF_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _mn_=2 === padty$0?48:32,res=make(width$0,_mn_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _ml_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _ml_ >>> 0)
           {if(33 < (_ml_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _ml_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _me_=caml_ml_bytes_length(s$0) - 1 | 0,
           _md_=0;
          if(! (_me_ < 0))
           {var i$0=_md_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _mi_=match - 34 | 0,switch$2=0;
                if(58 < _mi_ >>> 0)
                 {if(93 <= _mi_)switch$2 = 1}
                else
                 if(56 < (_mi_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _mj_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _mj_=4;break;case 1:var _mj_=2;break}
              n[1] = n[1] + _mj_ | 0;
              var _mk_=i$0 + 1 | 0;
              if(_me_ !== i$0){var i$0=_mk_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           var _mm_=copy(s$0);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _mg_=caml_ml_bytes_length(s$0) - 1 | 0,_mf_=0;
            if(! (_mg_ < 0))
             {var i=_mf_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _mh_=i + 1 | 0;
                if(_mg_ !== i){var i=_mh_;continue}
                break}}
            var _mm_=s}
          var str$0=caml_string_of_bytes(_mm_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_l__=caml_ml_string_length(s) - 1 | 0,_l9_=0;
        if(! (_l__ < 0))
         {var i$0=_l9_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _mc_=i$0 + 1 | 0;
            if(_l__ !== i$0){var i$0=_mc_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _ma_=caml_ml_string_length(s) - 1 | 0,
         _l$_=0;
        if(! (_ma_ < 0))
         {var i=_l$_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _mb_=i + 1 | 0;
            if(_ma_ !== i){var i=_mb_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _l8_=_ak_;break;
        case 2:var _l8_=_al_;break;
        case 4:var _l8_=_an_;break;
        case 5:var _l8_=_ao_;break;
        case 6:var _l8_=_ap_;break;
        case 7:var _l8_=_aq_;break;
        case 8:var _l8_=_ar_;break;
        case 9:var _l8_=_as_;break;
        case 10:var _l8_=_at_;break;
        case 11:var _l8_=_au_;break;
        case 0:
        case 13:var _l8_=_aj_;break;
        case 3:
        case 14:var _l8_=_am_;break;
        default:var _l8_=_av_}
      return transform_int_alt(iconv,caml_format_int(_l8_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _l7_=_aK_;break;
        case 2:var _l7_=_aL_;break;
        case 4:var _l7_=_aN_;break;
        case 5:var _l7_=_aO_;break;
        case 6:var _l7_=_aP_;break;
        case 7:var _l7_=_aQ_;break;
        case 8:var _l7_=_aR_;break;
        case 9:var _l7_=_aS_;break;
        case 10:var _l7_=_aT_;break;
        case 11:var _l7_=_aU_;break;
        case 0:
        case 13:var _l7_=_aJ_;break;
        case 3:
        case 14:var _l7_=_aM_;break;
        default:var _l7_=_aV_}
      return transform_int_alt(iconv,caml_format_int(_l7_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _l6_=_aX_;break;
        case 2:var _l6_=_aY_;break;
        case 4:var _l6_=_a0_;break;
        case 5:var _l6_=_a1_;break;
        case 6:var _l6_=_a2_;break;
        case 7:var _l6_=_a3_;break;
        case 8:var _l6_=_a4_;break;
        case 9:var _l6_=_a5_;break;
        case 10:var _l6_=_a6_;break;
        case 11:var _l6_=_a7_;break;
        case 0:
        case 13:var _l6_=_aW_;break;
        case 3:
        case 14:var _l6_=_aZ_;break;
        default:var _l6_=_a8_}
      return transform_int_alt(iconv,caml_format_int(_l6_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _l5_=_ax_;break;
        case 2:var _l5_=_ay_;break;
        case 4:var _l5_=_aA_;break;
        case 5:var _l5_=_aB_;break;
        case 6:var _l5_=_aC_;break;
        case 7:var _l5_=_aD_;break;
        case 8:var _l5_=_aE_;break;
        case 9:var _l5_=_aF_;break;
        case 10:var _l5_=_aG_;break;
        case 11:var _l5_=_aH_;break;
        case 0:
        case 13:var _l5_=_aw_;break;
        case 3:
        case 14:var _l5_=_az_;break;
        default:var _l5_=_aI_}
      return transform_int_alt(iconv,caml_int64_format(_l5_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_a__:_a$_:4 <= match?_ba_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _l3_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _l2_=match - 46 | 0,
              switch$0=0;
             if(23 < _l2_ >>> 0)
              {if(55 === _l2_)switch$0 = 1}
             else
              if(21 < (_l2_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _l3_=1}
           var _l4_=_l3_?str:symbol(str,_a9_);
           return caml_special_val(_l4_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _l1_=s;
         else
          {var r=caml_create_bytes(l),_lY_=l - 1 | 0,_lX_=0;
           if(! (_lY_ < 0))
            {var i=_lX_;
             for(;;)
              {var
                c=caml_bytes_unsafe_get(s,i),
                switcher=c - 97 | 0,
                _lZ_=25 < switcher >>> 0?c:c - 32 | 0;
               caml_bytes_unsafe_set(r,i,_lZ_);
               var _l0_=i + 1 | 0;
               if(_lY_ !== i){var i=_l0_;continue}
               break}}
           var _l1_=r}
         return caml_string_of_bytes(_l1_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_f_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_g_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_h_;break;
                  case 9:var str=_i_;break;
                  case 10:var str=_j_;break;
                  case 13:var str=_k_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _lT_=pad$5[2],_lU_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_lU_,_lT_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_lU_,_lT_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_lU_,_lT_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _lV_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_lV_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_lV_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_lV_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _lW_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _lW_[2] === "number")
              {var fmt=_lW_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _lR_=fmt$0[1];
           if(0 === _lR_[0])
            {var
              rest$13=fmt$0[2],
              match=_lR_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_lR_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bb_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bc_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bd_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_be_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _lS_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_lS_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_lS_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_lQ_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bf_];
         default:throw [0,Assert_failure,_bg_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _lP_=[8,acc,_bh_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_lP_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_lP_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _lO_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_lO_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_lO_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _lL_=pad[2],_lM_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_lM_,_lL_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_lM_,_lL_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_lM_,_lL_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _lN_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_lN_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_lN_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_lN_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _lJ_=acc$0[2],_lK_=acc$0[1];
           if(0 === _lJ_[0])
            {var acc$1=_lJ_[1];
             output_acc(o,_lK_);
             output_string(o,_bi_);
             var acc$0=acc$1;
             continue}
           var acc$2=_lJ_[1];
           output_acc(o,_lK_);
           output_string(o,_bj_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _lH_=acc$0[2],_lI_=acc$0[1];
           if(0 === _lH_[0])
            {var acc$1=_lH_[1];
             strput_acc(b,_lI_);
             add_string(b,_bk_);
             var acc$0=acc$1;
             continue}
           var acc$2=_lH_[1];
           strput_acc(b,_lI_);
           add_string(b,_bl_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function printf(fmt$0)
     {var fmt=fmt$0[1],_lG_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_lG_,fmt)}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=printers[1],
         new_printers=[0,fn,old_printers],
         success=compare_and_set(printers,old_printers,new_printers),
         _lF_=1 - success;
        if(_lF_)continue;
        return _lF_}}
    function ongoing_traversal(h)
     {var _lD_=h.length - 1 < 4?1:0,_lE_=_lD_ || (h[4] < 0?1:0);return _lE_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _cF_=caml_sys_getenv(_cE_),params=_cF_}
    catch(_lB_)
     {_lB_ = caml_wrap_exception(_lB_);
      if(_lB_ !== Not_found)throw _lB_;
      try
       {var _cD_=caml_sys_getenv(_cC_),_bo_=_cD_}
      catch(_lC_)
       {_lC_ = caml_wrap_exception(_lC_);
        if(_lC_ !== Not_found)throw _lC_;
        var _bo_=_bn_}
      var params=_bo_}
    var
     randomized_default=contains(params,82),
     prng=
      [246,
       function(_lA_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[1 + i$0] = i$0;
           var _lz_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_lz_;continue}
           var accu=[0,_bm_],_lv_=54 + max(55,l) | 0,_lu_=0;
           if(! (_lv_ < 0))
            {var i=_lu_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[1 + k],
                str=symbol(accu[1],caml_string_of_jsbytes("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _lw_=accu[1],
                _lq_=caml_string_get(_lw_,3) << 24,
                _lr_=caml_string_get(_lw_,2) << 16,
                _ls_=caml_string_get(_lw_,1) << 8,
                _lt_=
                 ((caml_string_get(_lw_,0) + _ls_ | 0) + _lr_ | 0)
                 +
                 _lq_
                 |
                 0,
                _lx_=
                 (caml_check_bound(result[1],j)[1 + j] ^ _lt_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[1 + j] = _lx_;
               var _ly_=i + 1 | 0;
               if(_lv_ !== i){var i=_ly_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function create(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _lo_=caml_obj_tag(prng),
           _lp_=250 === _lo_?prng[1]:246 === _lo_?force_lazy_block(prng):prng;
          _lp_[2] = (_lp_[2] + 1 | 0) % 55 | 0;
          var
           _ll_=_lp_[2],
           curval=caml_check_bound(_lp_[1],_ll_)[1 + _ll_],
           _lm_=(_lp_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_lp_[1],_lm_)[1 + _lm_]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _ln_=_lp_[2];
          caml_check_bound(_lp_[1],_ln_)[1 + _ln_] = newval30;
          var seed=newval30}
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function clear(h)
     {var _lj_=0 < h[1]?1:0;
      if(_lj_)
       {h[1] = 0;
        var len=h[2].length - 1,_lk_=h[2];
        if(0 <= len && ! ((_lk_.length - 1 - len | 0) < 0))
         return caml_array_fill(_lk_,0,len,0);
        return invalid_arg(_q_)}
      return _lj_}
    function reset(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear(h)}
    function f(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
            throw [0,Assert_failure,_bp_]}
          return prec$0}}
      return 0}
    function copy$0(h)
     {var _lh_=h[2],l=_lh_.length - 1,_lf_=h[4],_lg_=h[3];
      if(0 === l)
       var _li_=[0];
      else
       {var r=caml_make_vect(l,f(_lh_[1])),_ld_=l - 1 | 0,_lc_=1;
        if(! (_ld_ < 1))
         {var i=_lc_;
          for(;;)
           {r[1 + i] = f(_lh_[1 + i]);
            var _le_=i + 1 | 0;
            if(_ld_ !== i){var i=_le_;continue}
            break}}
        var _li_=r}
      return [0,h[1],_li_,_lg_,_lf_]}
    function length(h){return h[1]}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize$0=osize * 2 | 0,
       _lb_=nsize$0 < max_array_length?1:0;
      if(_lb_)
       {var ndata=caml_make_vect(nsize$0,0),inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var
         indexfun$0=caml_call1(indexfun,h),
         nsize=ndata.length - 1,
         ndata_tail=caml_make_vect(nsize,0),
         _k7_=odata.length - 1 - 1 | 0,
         _k6_=0;
        if(! (_k7_ < 0))
         {var i$0=_k6_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call1(indexfun$0,key),
                 match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                var cell=next;
                continue}
              var _la_=i$0 + 1 | 0;
              if(_k7_ !== i$0){var i$0=_la_;continue a}
              break}
            break}}
        if(inplace)
         {var _k9_=nsize - 1 | 0,_k8_=0;
          if(! (_k9_ < 0))
           {var i=_k8_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
              if(match$0)match$0[3] = 0;
              var _k$_=i + 1 | 0;
              if(_k9_ !== i){var i=_k$_;continue}
              break}}
          var _k__=0}
        else
         var _k__=inplace;
        return _k__}
      return _lb_}
    function iter$1(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],param$1=param$0[3];
            caml_call2(f,key,data);
            var param$0=param$1;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_k2_=d.length - 1 - 1 | 0,_k1_=0;
        if(! (_k2_ < 0))
         {var i=_k1_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _k5_=i + 1 | 0;
            if(_k2_ !== i){var i=_k5_;continue}
            break}}
        var _k3_=1 - old_trav,_k4_=_k3_?flip_ongoing_traversal(h):_k3_;
        return _k4_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[1 + i] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0
                ?(prec$0[3] = 0,0)
                :(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _kX_=d.length - 1 - 1 | 0,_kW_=0;
        if(! (_kX_ < 0))
         {var i=_kW_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _k0_=i + 1 | 0;
            if(_kX_ !== i){var i=_k0_;continue}
            break}}
        var _kY_=1 - old_trav,_kZ_=_kY_?flip_ongoing_traversal(h):_kY_;
        return _kZ_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             b$1=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=b$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_kS_=d.length - 1 - 1 | 0,_kR_=0;
        if(! (_kS_ < 0))
         {var i=_kR_;
          for(;;)
           {var _kU_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_kU_);
            var _kV_=i + 1 | 0;
            if(_kS_ !== i){var i=_kV_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _kT_=accu[1];
        return _kT_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var _kP_=h[2],r=[0,0],_kL_=_kP_.length - 1 - 1 | 0,_kK_=0;
      if(! (_kL_ < 0))
       {var i=_kK_;
        for(;;)
         {var b=_kP_[1 + i],_kN_=r[1];
          r[1] = max(_kN_,bucket_length(0,b));
          var _kO_=i + 1 | 0;
          if(_kL_ !== i){var i=_kO_;continue}
          break}}
      var _kM_=r[1],histo=caml_make_vect(_kM_ + 1 | 0,0),_kQ_=h[2];
      iter$0
       (function(b)
         {var l=bucket_length(0,b);
          histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
          return 0},
        _kQ_);
      return [0,h[1],h[2].length - 1,_kM_,histo]}
    function to_seq(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_kJ_){return aux(i$0,next,_kJ_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _kG_=0,_kH_=0;
      return function(_kI_){return aux(_kH_,_kG_,_kI_)}}
    function to_seq_keys(m)
     {var _kC_=to_seq(m);
      function _kD_(_kF_){return _kF_[1]}
      return function(_kE_){return map(_kD_,_kC_,_kE_)}}
    function to_seq_values(m)
     {var _ky_=to_seq(m);
      function _kz_(_kB_){return _kB_[2]}
      return function(_kA_){return map(_kz_,_ky_,_kA_)}}
    function Make(H)
     {var equal=H[1];
      function key_index(h,x)
       {var _kx_=h[2].length - 1 - 1 | 0;return caml_call1(H[2],x) & _kx_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _kw_=h[2].length - 1 << 1 < h[1]?1:0;
        return _kw_?resize$0(key_index,h):_kw_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(equal,k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :(caml_check_bound(h[2],i)[1 + i] = next,0)}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _kv_=key_index(h,key),match=caml_check_bound(h[2],_kv_)[1 + _kv_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(equal,key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(equal,key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(equal,key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(equal,key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _ku_=key_index(h,key),match=caml_check_bound(h[2],_ku_)[1 + _ku_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(equal,key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(equal,key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(equal,key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(equal,key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(equal,k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _kt_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_kt_)[1 + _kt_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(equal,k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _kq_=0}
          else
           var _kq_=1;
          if(_kq_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _kr_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_kr_)return resize$0(key_index,h);
            var _ks_=_kr_}
          else
           var _ks_=_kq_;
          return _ks_}}
      function mem(h,key)
       {var
         _kp_=key_index(h,key),
         param$0=caml_check_bound(h[2],_kp_)[1 + _kp_],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_ko_=caml_call2(equal,k,key);
            if(_ko_)return _ko_;
            var param=next;
            continue}
          return 0}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function create$0(sz){return create(_bq_,sz)}
      function of_seq(i){var tbl=create$0(16);replace_seq(tbl,i);return tbl}
      return [0,
              create$0,
              clear,
              reset,
              copy$0,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$1,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function key_index(h,key)
     {return 4 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :invalid_arg(_br_)}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var window=joo_global_object,no_handler=null,undefined$0=undefined;
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    var
     true$0=true,
     false$0=false,
     array_constructor=window.Array,
     Error=[248,_bs_,caml_fresh_oo_id(0)];
    register_exception(_bt_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    function handler(f)
     {return function(e)
       {if(1 - (e == no_handler?1:0))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function addEventListener(e,typ,h,capt)
     {var capture=[0,capt],passive=0,once=0;
      if(e.addEventListener === undefined$0)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _kl_=[0,h,e,[0]];
            return function(_km_,_kn_){return caml_js_call(_kl_,_km_,_kn_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      var opts={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(b){return opts.capture = b});
      iter(once,function(b){return opts.once = b});
      iter(passive,function(b){return opts.passive = b});
      e.addEventListener(typ,h,opts);
      return function(param){return e.removeEventListener(typ,h,opts)}}
    var
     uint8Array=window.Uint8Array,
     float32Array=window.Float32Array,
     set=caml_js_set,
     get=caml_js_get,
     document=window.document;
    function getElementById_exn(id)
     {function _kj_(pnode){return pnode}
      function _kk_(param){return failwith(caml_call1(sprintf(_bu_),id))}
      return case$0
              (document.getElementById(caml_jsstring_of_string(id)),_kk_,_kj_)}
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    var overflow_limit=2147483000.;
    function equal(a,b)
     {var switch$0=0;
      if(a){if(b)switch$0 = 1}else if(! b)switch$0 = 1;
      return switch$0?1:0}
    function with_return(f)
     {var Return=[248,_bv_,caml_fresh_oo_id(0)],is_alive=[0,1];
      function return$0(a)
       {if(1 - is_alive[1])failwith(_bw_);throw [0,Return,a]}
      try
       {var a$0=caml_call1(f,[0,return$0]);is_alive[1] = 0;return a$0}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        is_alive[1] = 0;
        if(exn[1] === Return){var a=exn[2];return a}
        throw exn}}
    function int_val(param)
     {if(param){var v=param[1];return v}return failwith(_bx_)}
    function min$1(a,b){return a < b?a:b}
    function max$0(a,b){return b < a?a:b}
    function imax(a,b){return b < a?a:b}
    function create$0(param){return [254,0.,0.,0.,0.,0.,0.]}
    function identity(t)
     {t[1] = 1.;t[2] = 0.;t[3] = 0.;t[4] = 1.;t[5] = 0.;t[6] = 0.;return 0}
    function translate(dst,x,y)
     {dst[1] = 1.;
      dst[2] = 0.;
      dst[3] = 0.;
      dst[4] = 1.;
      dst[5] = x;
      dst[6] = y;
      return 0}
    function scale(dst,xs,ys)
     {dst[1] = xs;
      dst[2] = 0.;
      dst[3] = 0.;
      dst[4] = ys;
      dst[5] = 0.;
      dst[6] = 0.;
      return 0}
    function multiply(dst,src)
     {var
       t0=dst[1] * src[1] + dst[2] * src[3],
       t2=dst[3] * src[1] + dst[4] * src[3],
       t4=dst[5] * src[1] + dst[6] * src[3] + src[5];
      dst[2] = dst[1] * src[2] + dst[2] * src[4];
      dst[4] = dst[3] * src[2] + dst[4] * src[4];
      dst[6] = dst[5] * src[2] + dst[6] * src[4] + src[6];
      dst[1] = t0;
      dst[3] = t2;
      dst[5] = t4;
      return 0}
    function copy$1(t){return [254,t[1],t[2],t[3],t[4],t[5],t[6]]}
    function premultiply(dst,src)
     {var
       t0=src[1] * dst[1] + src[2] * dst[3],
       t2=src[3] * dst[1] + src[4] * dst[3],
       t4=src[5] * dst[1] + src[6] * dst[3] + dst[5],
       t1=src[1] * dst[2] + src[2] * dst[4],
       t3=src[3] * dst[2] + src[4] * dst[4],
       t5=src[5] * dst[2] + src[6] * dst[4] + dst[6];
      dst[1] = t0;
      dst[2] = t1;
      dst[3] = t2;
      dst[4] = t3;
      dst[5] = t4;
      dst[6] = t5;
      return 0}
    function inverse(dst,src)
     {var det=src[1] * src[4] - src[3] * src[2];
      if(-1e-06 < det && det < 1e-06)return identity(dst);
      var
       invdet=1. / det,
       t0=src[1],
       t1=src[2],
       t2=src[3],
       t3=src[4],
       t4=src[5],
       t5=src[6];
      dst[1] = t3 * invdet;
      dst[3] = - t2 * invdet;
      dst[5] = (t2 * t5 - t3 * t4) * invdet;
      dst[2] = - t1 * invdet;
      dst[4] = t0 * invdet;
      dst[6] = (t1 * t4 - t0 * t5) * invdet;
      return 0}
    function get_average_scale(t)
     {var
       sx=Math.sqrt(t[1] * t[1] + t[3] * t[3]),
       sy=Math.sqrt(t[2] * t[2] + t[4] * t[4]);
      return (sx + sy) * 0.5}
    function create$1(param){return [0,create$0(0),-1.,-1.]}
    function rgbf(r,g,b){return [254,r,g,b,1.]}
    function rgba(r,g,b,a){return [254,r / 255.,g / 255.,b / 255.,a / 255.]}
    var
     white=rgbf(1.,1.,1.),
     black=rgbf(0.,0.,0.),
     transparent=[254,0.,0.,0.,0.];
    function clamp(v,min,max){return v < min?min:max < v?max:v}
    function hue(h,m1,m2)
     {var h$0=h < 0.?h + 1.:1. < h?h - 1.:h;
      return h$0 < 0.166666666666666657
              ?m1 + (m2 - m1) * h$0 * 6.
              :h$0 < 0.5
                ?m2
                :h$0 < 0.66666666666666663
                  ?m1 + (m2 - m1) * (0.66666666666666663 - h$0) * 6.
                  :m1}
    function hsla(h$1,s$0,l$0,a$0)
     {var
       h=h$1 % 1.,
       h$0=h < 0.?h + 1.:h,
       s=clamp(s$0,0.,1.),
       l=clamp(l$0,0.,1.),
       m2=l <= 0.5?l * (1. + s):l + s - l * s,
       m1=2. * l - m2,
       r=clamp(hue(h$0 + 0.333333333333333315,m1,m2),0.,1.),
       g=clamp(hue(h$0,m1,m2),0.,1.),
       b=clamp(hue(h$0 - 0.333333333333333315,m1,m2),0.,1.),
       a=a$0 / 255.;
      return [254,r,g,b,a]}
    function create$2(param)
     {return [254,1.,0.,0.,1.,0.,0.,0.,0.,0.,0.,1.,1.,1.,1.,0.,0.,0.,1.,0.]}
    function copy$2(t)
     {return [254,
              t[1],
              t[2],
              t[3],
              t[4],
              t[5],
              t[6],
              t[7],
              t[8],
              t[9],
              t[10],
              t[11],
              t[12],
              t[13],
              t[14],
              t[15],
              t[16],
              t[17],
              t[18],
              t[19]]}
    function modify_alpha(t,alpha)
     {t[14] = t[14] * alpha;t[18] = t[18] * alpha;return 0}
    function reset_xform(t)
     {t[1] = 1.;t[2] = 0.;t[3] = 0.;t[4] = 1.;t[5] = 0.;t[6] = 0.;return 0}
    function set_only_inner_and_outer(t,inner,outer)
     {t[11] = inner[1];
      t[12] = inner[2];
      t[13] = inner[3];
      t[14] = inner[4];
      t[15] = outer[1];
      t[16] = outer[2];
      t[17] = outer[3];
      t[18] = outer[4];
      return 0}
    function set_color(t,color)
     {t[1] = 1.;
      t[2] = 0.;
      t[3] = 0.;
      t[4] = 1.;
      t[5] = 0.;
      t[6] = 0.;
      t[7] = 0.;
      t[8] = 0.;
      t[9] = 0.;
      t[10] = 1.;
      t[11] = color[1];
      t[12] = color[2];
      t[13] = color[3];
      t[14] = color[4];
      t[15] = color[1];
      t[16] = color[2];
      t[17] = color[3];
      t[18] = color[4];
      return 0}
    function multiply$0(t,src)
     {var
       t0=t[1] * src[1] + t[2] * src[3],
       t2=t[3] * src[1] + t[4] * src[3],
       t4=t[5] * src[1] + t[6] * src[3] + src[5];
      t[2] = t[1] * src[2] + t[2] * src[4];
      t[4] = t[3] * src[2] + t[4] * src[4];
      t[6] = t[5] * src[2] + t[6] * src[4] + src[6];
      t[1] = t0;
      t[3] = t2;
      t[5] = t4;
      return 0}
    function of_composite_operation(op)
     {switch(op)
       {case 0:var dfactor=7,sfactor=1;break;
        case 1:var dfactor=0,sfactor=8;break;
        case 2:var dfactor=0,sfactor=9;break;
        case 3:var dfactor=7,sfactor=8;break;
        case 4:var dfactor=1,sfactor=9;break;
        case 5:var dfactor=6,sfactor=0;break;
        case 6:var dfactor=7,sfactor=0;break;
        case 7:var dfactor=6,sfactor=9;break;
        case 8:var dfactor=1,sfactor=1;break;
        case 9:var dfactor=0,sfactor=1;break;
        default:var dfactor=7,sfactor=9}
      return [0,sfactor,dfactor,sfactor,dfactor]}
    var no_flags=0;
    function has(t,flag){return 0 < (t & flag)?1:0}
    function lor(t,flag){return t | flag}
    function remove(t,flag){return t & (flag ^ -1)}
    var antialias=1,stencil_strokes=2,tesselate_afd=8;
    function create$3(cap,value){return [0,value,caml_make_vect(cap,value),0]}
    function init$0(cap,f)
     {var _kh_=0,_ki_=init(cap,function(param){return caml_call1(f,0)});
      return [0,caml_call1(f,0),_ki_,_kh_]}
    function get$0(t,idx){return t[2][1 + idx]}
    function copy$3(t,copy)
     {function _kg_(idx){return caml_call1(copy,t[2][1 + idx])}
      var arr=init(t[2].length - 1,_kg_);
      return [0,t[1],arr,t[3]]}
    function add(t,value)
     {var len$0=t[2].length - 1;
      if(len$0 <= t[3])
       {var
         len=t[2].length - 1,
         new_arr=
          init
           ((len * 3 | 0) / 2 | 0,
            function(i){return i < len?t[2][1 + i]:t[1]});
        t[2] = new_arr}
      t[2][1 + t[3]] = value;
      t[3] = t[3] + 1 | 0;
      return 0}
    function append_steal(dst,src,create)
     {var d_len=dst[2].length - 1;
      if(d_len <= (dst[3] + src[3] | 0))
       {var
         new_arr=
          init
           ((d_len * 3 | 0) / 2 | 0,
            function(i)
             {return i < dst[3]
                      ?dst[2][1 + i]
                      :(i - dst[3] | 0) < src[3]
                        ?src[2][1 + (i - dst[3] | 0)]
                        :caml_call1(create,0)});
        dst[2] = new_arr}
      else
       {var _kd_=dst[3],_ke_=dst[3] + src[3] | 0;
        if(! (_ke_ < _kd_))
         {var i=_kd_;
          for(;;)
           {dst[2][1 + i] = src[2][1 + (i - dst[3] | 0)];
            var _kf_=i + 1 | 0;
            if(_ke_ !== i){var i=_kf_;continue}
            break}}}
      dst[3] = dst[3] + src[3] | 0;
      return 0}
    function steal(t,create)
     {var len=t[2].length - 1;
      if(len <= t[3])
       {var
         new_arr=
          init
           ((len * 3 | 0) / 2 | 0,
            function(i){return i < len?t[2][1 + i]:caml_call1(create,0)});
        t[2] = new_arr}
      var v=t[2][1 + t[3]];
      t[3] = t[3] + 1 | 0;
      return v}
    function clear$0(opt,t)
     {if(opt)var sth=opt[1],free=sth;else var free=0;
      if(free)
       {var _kb_=t[3] - 1 | 0,_ka_=0;
        if(! (_kb_ < 0))
         {var i=_ka_;
          for(;;)
           {t[2][1 + i] = t[1];
            var _kc_=i + 1 | 0;
            if(_kb_ !== i){var i=_kc_;continue}
            break}}}
      t[3] = 0;
      return 0}
    function last(t){return t[2][1 + (t[3] - 1 | 0)]}
    var
     no_flags$0=0,
     generate_mipmaps=1,
     repeat_x=2,
     repeat_y=4,
     flip_y=8,
     premultiplied=16,
     nearest=32;
    function has$0(t,flag){return 0 < (t & flag)?1:0}
    var left=1,center=2,right=4,top=8,middle=16,bottom=32,baseline=64;
    function v_align(t){return remove(t,7)}
    function h_align(t){return remove(t,120)}
    function empty$0(param){return [254,0.,0.,0.,0.,0.,0.,0.,0.]}
    function reset$0(t)
     {t[1] = 0.;
      t[2] = 0.;
      t[3] = 0.;
      t[4] = 0.;
      t[5] = 0.;
      t[6] = 0.;
      t[7] = 0.;
      t[8] = 0.;
      return 0}
    var optional=1,required=2;
    function to_pattern(param)
     {return 1 === param?0:2 === param?1:failwith(_by_)}
    function remove$0(t,idx)
     {var _j$_=t[3],_j9_=_j$_[3] - 2 | 0;
      if(! (_j9_ < idx))
       {var i=idx;
        for(;;)
         {_j$_[2][1 + i] = _j$_[2][1 + (i + 1 | 0)];
          var _j__=i + 1 | 0;
          if(_j9_ !== i){var i=_j__;continue}
          break}}
      _j$_[3] = max(_j$_[3] - 1 | 0,0);
      return 0}
    function add_rect(t,rw,rh)
     {var
       besth=[0,t[2]],
       bestw=[0,t[1]],
       besti=[0,-1],
       bestx=[0,-1],
       besty=[0,-1],
       len$0=t[3][3] - 1 | 0,
       _j3_=0;
      if(! (len$0 < 0))
       {var i$2=_j3_;
        for(;;)
         {var
           y$0=
            with_return
             (function(i)
                {return function(r)
                  {var n=get$0(t[3],i),x=n[1];
                   if(t[1] < (x + rw | 0))return caml_call1(r[1],0);
                   var spaceLeft=[0,rw],y=[0,n[2]],i$0=[0,i];
                   for(;;)
                    {if(0 < spaceLeft[1])
                      {if(i$0[1] === t[3][3])caml_call1(r[1],0);
                       var n$0=get$0(t[3],i$0[1]);
                       y[1] = max(y[1],n$0[2]);
                       if(t[2] < (y[1] + rh | 0))caml_call1(r[1],0);
                       spaceLeft[1] = spaceLeft[1] - n$0[3] | 0;
                       i$0[1]++;
                       continue}
                     return caml_call1(r[1],[0,y[1]])}}}
               (i$2));
          if(y$0)
           {var
             y$1=y$0[1],
             n$1=get$0(t[3],i$2),
             _j5_=(y$1 + rh | 0) < besth[1]?1:0;
            if(_j5_)
             var _j6_=_j5_;
            else
             var
              _j8_=(y$1 + rh | 0) === besth[1]?1:0,
              _j6_=_j8_?n$1[3] < bestw[1]?1:0:_j8_;
            if(_j6_)
             {besti[1] = i$2;
              bestw[1] = n$1[3];
              besth[1] = y$1 + rh | 0;
              bestx[1] = n$1[1];
              besty[1] = y$1}}
          var _j7_=i$2 + 1 | 0;
          if(len$0 !== i$2){var i$2=_j7_;continue}
          break}}
      if(besti[1] === -1)return 0;
      var _j4_=besti[1],y=besty[1] + rh | 0,value=[0,bestx[1],y,rw],_j2_=t[3];
      add(_j2_,value);
      var _jZ_=_j2_[3] - 1 | 0,_j0_=_j4_ + 1 | 0;
      if(! (_jZ_ < _j0_))
       {var i=_jZ_;
        for(;;)
         {_j2_[2][1 + i] = _j2_[2][1 + (i - 1 | 0)];
          var _j1_=i - 1 | 0;
          if(_j0_ !== i){var i=_j1_;continue}
          break}}
      _j2_[2][1 + _j4_] = value;
      var len=t[3][3],i$0=[0,_j4_ + 1 | 0];
      for(;;)
       {if(i$0[1] < len)
         {var n=get$0(t[3],i$0[1]),nlast=get$0(t[3],i$0[1] - 1 | 0);
          if(n[1] < (nlast[1] + nlast[3] | 0))
           {var shrink=(nlast[1] + nlast[3] | 0) - n[1] | 0;
            n[1] = n[1] + shrink | 0;
            n[3] = n[3] - shrink | 0;
            if(0 < n[3])
             i$0[1] = len;
            else
             {remove$0(t,i$0[1]);i$0[1] = i$0[1] - 1 | 0}
            i$0[1]++}
          else
           i$0[1] = len;
          continue}
        var i$1=[0,0];
        for(;;)
         {if(i$1[1] < (t[3][3] - 1 | 0))
           {var n$0=get$0(t[3],i$1[1]),n1=get$0(t[3],i$1[1] + 1 | 0);
            if(n$0[2] === n1[2])
             {n$0[3] = n$0[3] + n1[3] | 0;remove$0(t,i$1[1] + 1 | 0)}
            else
             i$1[1]++;
            continue}
          return [0,[0,bestx[1],besty[1]]]}}}
    function Make$0(Impl)
     {var empty=[0,0,0.,0.,0.,0.,0.,0.,0.,0.,0.,Impl[1]];
      function hash(v)
       {var
         c=v[1] | 0,
         b=v[3] | 0,
         s=v[2] | 0,
         h=527 + c | 0,
         h$0=(h * 31 | 0) + s | 0;
        return (h$0 * 31 | 0) + b | 0}
      function equal(a,b)
       {return (a[1] | 0) === (b[1] | 0)
                ?(a[2] | 0) === (b[2] | 0)?(a[3] | 0) === (b[3] | 0)?1:0:0
                :0}
      var
       include=Make([0,equal,hash]),
       create=include[1],
       clear=include[2],
       _ji_=include[8],
       _jj_=include[10];
      function replace(t,c,s,b,v)
       {var lookup_key=[254,c,s * 10.,b];
        return caml_call3(_jj_,t,lookup_key,v)}
      var lookup_key=[254,0.,0.,0.];
      function hash$0(v){return caml_hash(10,100,0,v)}
      var
       equal$0=caml_string_equal,
       include$0=Make([0,equal$0,hash$0]),
       create$0=include$0[1],
       find=include$0[7],
       find_opt=include$0[8],
       replace$0=include$0[10];
      function hash$1(v){return v * 13 | 0}
      function equal$1(a,b){return a === b?1:0}
      var
       include$1=Make([0,equal$1,hash$1]),
       create$1=include$1[1],
       find$0=include$1[7],
       replace$1=include$1[10];
      function x(t){return t[1]}
      function y(t){return t[2]}
      function next(t){return t[13]}
      function next_x(t){return t[3]}
      function start(t){return t[12]}
      function end(t){return t[14]}
      function codepoint(t){return t[7]}
      function create$2(param){return [0,0,65,12.,0.,0.]}
      var utf8d=_bz_.slice();
      function decutf8(state,codep,byte$0)
       {var
         typ=caml_check_bound(utf8d,byte$0)[1 + byte$0],
         value=
          state[1] !== 0
           ?byte$0 & 63 | codep[1] << 6
           :(255 >>> typ | 0) & byte$0;
        codep[1] = value;
        var _jY_=(256 + state[1] | 0) + typ | 0;
        state[1] = caml_check_bound(utf8d,_jY_)[1 + _jY_];
        return state[1]}
      function get_state(t){return last(t[11])}
      function reset_fallback(t,name)
       {var base=caml_call2(find,t[7],name);
        clear$0(0,base[9]);
        clear$0(0,base[7]);
        return caml_call1(clear,base[8])}
      function reset_fallback_id(t,font)
       {var base=caml_call2(find$0,t[6],font);
        clear$0(0,base[9]);
        clear$0(0,base[7]);
        return caml_call1(clear,base[8])}
      function add_fallback_id(t,font,fallback)
       {var base=caml_call2(find$0,t[6],font);return add(base[9],fallback)}
      function add_fallback(t,name,fallback)
       {var
         base=caml_call2(find,t[7],name),
         fallback$0=caml_call2(find,t[7],fallback);
        return add(base[9],fallback$0[1])}
      function set_size(t,size){get_state(t)[3] = size;return 0}
      function set_spacing(t,spacing){get_state(t)[5] = spacing;return 0}
      function set_blur(t,blur){get_state(t)[4] = blur;return 0}
      function set_align(t,align){get_state(t)[2] = align;return 0}
      function set_font(t,font){get_state(t)[1] = font;return 0}
      function create$4(param)
       {var
         base_state=create$2(0),
         _jQ_=create$3(1,create$2(0)),
         _jR_=create$3(100,chr(0)),
         _jT_=params$0[1],
         n0=[0,0,0,_jT_],
         _jS_=params$0[2],
         nodes=create$3(256,n0);
        add(nodes,n0);
        var
         _jU_=caml_call1(create$0,4),
         _jV_=caml_call1(create$1,4),
         _jW_=[0,params$0[1],params$0[2],0,0],
         _jX_=caml_call1(Impl[2][5],caml_mul(params$0[1],params$0[2])),
         t=
          [0,
           params$0,
           1. / params$0[1],
           1. / params$0[2],
           _jX_,
           _jW_,
           _jV_,
           _jU_,
           0,
           [0,_jT_,_jS_,nodes],
           _jR_,
           _jQ_];
        add(t[11],base_state);
        return t}
      function add_font(t,name,path)
       {var o=caml_call1(Impl[15],path);
        if(o)
         {var
           v=o[1],
           vmetrics=caml_call1(Impl[5],v),
           ascent=caml_call1(Impl[3][1],vmetrics),
           descent=caml_call1(Impl[3][2],vmetrics),
           line_gap=caml_call1(Impl[3][3],vmetrics),
           ascent$0=ascent + line_gap | 0,
           fh=ascent$0 - descent | 0,
           ascender=ascent$0 / fh,
           descender=descent / fh,
           lut=caml_call1(create,1024),
           font_id=t[8];
          t[8] = t[8] + 1 | 0;
          var
           _jP_=create$3(10,-1),
           f=
            [0,
             font_id,
             v,
             name,
             ascender,
             descender,
             ascender - descender,
             create$3(10,empty),
             lut,
             _jP_];
          caml_call3(replace$1,t[6],font_id,f);
          caml_call3(replace$0,t[7],name,f);
          return [0,font_id]}
        return 0}
      function get_glyph_size(font,size,glyph)
       {var
         scale=caml_call2(Impl[13],font,size),
         m=caml_call2(Impl[6],font,glyph),
         box=caml_call3(Impl[8],font,glyph,scale);
        return [0,scale,caml_call1(Impl[4][1],m),box]}
      function blur_cols(t,off,w,h,stride,alpha)
       {var off$0=[0,off],_jI_=h - 1 | 0,_jH_=0;
        if(! (_jI_ < 0))
         {var for$0=_jH_;
          for(;;)
           {var z=[0,0],_jK_=w - 1 | 0,_jJ_=1;
            if(! (_jK_ < 1))
             {var x$0=_jJ_;
              for(;;)
               {var
                 v$1=caml_call2(Impl[2][4],t[4],off$0[1] + x$0 | 0),
                 v$2=caml_mul(alpha,(v$1 << 7) - z[1] | 0) >> 16;
                z[1] = z[1] + v$2 | 0;
                caml_call3(Impl[2][1],t[4],off$0[1] + x$0 | 0,z[1] >> 7);
                var _jO_=x$0 + 1 | 0;
                if(_jK_ !== x$0){var x$0=_jO_;continue}
                break}}
            caml_call3(Impl[2][1],t[4],(off$0[1] + w | 0) - 1 | 0,0);
            z[1] = 0;
            var _jL_=w - 2 | 0;
            if(! (_jL_ < 0))
             {var x=_jL_;
              for(;;)
               {var
                 v=caml_call2(Impl[2][4],t[4],off$0[1] + x | 0),
                 v$0=caml_mul(alpha,(v << 7) - z[1] | 0) >> 16;
                z[1] = z[1] + v$0 | 0;
                caml_call3(Impl[2][1],t[4],off$0[1] + x | 0,z[1] >> 7);
                var _jN_=x - 1 | 0;
                if(0 !== x){var x=_jN_;continue}
                break}}
            caml_call3(Impl[2][1],t[4],off$0[1],0);
            off$0[1] = off$0[1] + stride | 0;
            var _jM_=for$0 + 1 | 0;
            if(_jI_ !== for$0){var for$0=_jM_;continue}
            break}}
        return 0}
      function blur_rows(t,off,w,h,stride,alpha)
       {var off$0=[0,off],max=caml_mul(h,stride),_jF_=w - 1 | 0,_jE_=0;
        if(! (_jF_ < 0))
         {var for$0=_jE_;
          a:
          for(;;)
           {var z=[0,0],y=stride;
            for(;;)
             {if(y < max)
               {var
                 v=caml_call2(Impl[2][4],t[4],off$0[1] + y | 0),
                 v$0=caml_mul(alpha,(v << 7) - z[1] | 0) >> 16;
                z[1] = z[1] + v$0 | 0;
                caml_call3(Impl[2][1],t[4],off$0[1] + y | 0,z[1] >> 7);
                var y$0=y + stride | 0,y=y$0;
                continue}
              caml_call3
               (Impl[2][1],t[4],off$0[1] + caml_mul(h - 1 | 0,stride) | 0,0);
              z[1] = 0;
              var y$3=caml_mul(h - 2 | 0,stride),y$1=y$3;
              for(;;)
               {if(0 <= y$1)
                 {var
                   v$1=caml_call2(Impl[2][4],t[4],off$0[1] + y$1 | 0),
                   v$2=caml_mul(alpha,(v$1 << 7) - z[1] | 0) >> 16;
                  z[1] = z[1] + v$2 | 0;
                  caml_call3(Impl[2][1],t[4],off$0[1] + y$1 | 0,z[1] >> 7);
                  var y$2=y$1 - stride | 0,y$1=y$2;
                  continue}
                caml_call3(Impl[2][1],t[4],off$0[1],0);
                off$0[1]++;
                var _jG_=for$0 + 1 | 0;
                if(_jF_ !== for$0){var for$0=_jG_;continue a}
                break}
              break}
            break}}
        return 0}
      function do_blur(t,off,w,h,width,blur)
       {var _jD_=0 < blur?1:0;
        if(_jD_)
         {var
           sigma=blur * 0.57735,
           alpha=65536 * (1. - Math.exp(-2.3 / (sigma + 1.))) | 0;
          blur_rows(t,off,w,h,width,alpha);
          blur_cols(t,off,w,h,width,alpha);
          blur_rows(t,off,w,h,width,alpha);
          return blur_cols(t,off,w,h,width,alpha)}
        return _jD_}
      function build_glyph
       (t,codepoint,orig_font,font,stb_glyph,size,pad,blur,bitmap_option)
       {var
         match=get_glyph_size(font[2],size,stb_glyph),
         box=match[3],
         advance=match[2],
         scale=match[1],
         _jo_=caml_call1(Impl[7][1],box),
         gw=(caml_call1(Impl[7][3],box) - _jo_ | 0) + (pad * 2 | 0) | 0,
         _jp_=caml_call1(Impl[7][2],box),
         gh=(caml_call1(Impl[7][4],box) - _jp_ | 0) + (pad * 2 | 0) | 0;
        function build_glyph(gx,gy)
         {var _jC_=caml_call1(Impl[7][2],box) - pad | 0;
          return [0,
                  codepoint,
                  size,
                  blur,
                  gx,
                  gy,
                  gx + gw | 0,
                  gy + gh | 0,
                  Math.floor(scale * advance * 10.),
                  caml_call1(Impl[7][1],box) - pad | 0,
                  _jC_,
                  stb_glyph]}
        var match$0=to_pattern(bitmap_option);
        if(match$0)
         {var match$1=add_rect(t[9],gw,gh);
          if(match$1)
           {var
             match$2=match$1[1],
             gy=match$2[2],
             gx=match$2[1],
             new_glyph=build_glyph(gx,gy),
             box$0=
              caml_call4
               (Impl[7][5],
                gx + pad | 0,
                gy + pad | 0,
                (gx + gw | 0) - pad | 0,
                (gy + gh | 0) - pad | 0);
            try
             {caml_call7
               (Impl[12],font[2],t[4],t[1][1],t[1][2],scale,box$0,stb_glyph)}
            catch(_jB_)
             {var
               _jq_=chr(new_glyph[1]),
               _jr_=t[1][2],
               _js_=t[1][1],
               _jt_=caml_call1(Impl[7][2],box$0),
               _ju_=caml_call1(Impl[7][4],box$0) - _jt_ | 0,
               _jv_=caml_call1(Impl[7][1],box$0),
               _jw_=caml_call1(Impl[7][3],box$0) - _jv_ | 0,
               _jx_=caml_call1(Impl[7][4],box$0),
               _jy_=caml_call1(Impl[7][3],box$0),
               _jz_=caml_call1(Impl[7][2],box$0),
               _jA_=caml_call1(Impl[7][1],box$0);
              caml_call15
               (printf(_bA_),
                _jA_,
                _jz_,
                _jy_,
                _jx_,
                _jw_,
                _ju_,
                gx,
                gy,
                gw,
                gh,
                scale,
                _js_,
                _jr_,
                pad,
                _jq_);
              failwith(_bB_)}
            if(0. < blur)
             {var
               off=
                (new_glyph[4] | 0) + caml_mul(new_glyph[5] | 0,t[1][1]) | 0;
              do_blur(t,off,gw,gh,t[1][1],blur | 0)}
            var
             match$3=t[5],
             h=match$3[4],
             w=match$3[3],
             y=match$3[2],
             x=match$3[1],
             x0=min(x,new_glyph[4] | 0),
             y0=min(y,new_glyph[5] | 0),
             x1=max(w,new_glyph[6] | 0),
             y1=max(h,new_glyph[7] | 0);
            t[5] = [0,x0,y0,x1,y1];
            replace(font[8],codepoint,size,blur,new_glyph);
            replace(orig_font[8],codepoint,size,blur,new_glyph);
            return [0,new_glyph]}
          return 0}
        return [0,build_glyph(-1,-1)]}
      function get_glyph(t,font$0,codepoint,size,blur,bitmap_option)
       {if(size < 2.)return 0;
        var
         s=size * 0.1,
         blur$0=20. < blur?20.:Math.floor(blur),
         _jn_=font$0[8];
        lookup_key[1] = codepoint;
        lookup_key[2] = s * 10.;
        lookup_key[3] = blur$0;
        var glyph=caml_call2(_ji_,_jn_,lookup_key);
        if(glyph)
         {var g$2=glyph[1],switch$0=0;
          if(bitmap_option !== 1)
           {var switch$1=0;
            if(0. <= g$2[4] && 0. <= g$2[5])switch$1 = 1;
            if(! switch$1)switch$0 = 1}
          if(! switch$0)return glyph}
        var
         pad=(blur$0 | 0) + 2 | 0,
         glyph$0=caml_call2(Impl[14],font$0[2],codepoint);
        if(glyph$0)
         var g=glyph$0[1],glyph_font=[0,[0,font$0,g]];
        else
         {var idx=0;
          for(;;)
           {if(font$0[9][3] <= idx)
             var glyph_font=0;
            else
             {var
               _jm_=get$0(font$0[9],idx),
               font=caml_call2(find$0,t[6],_jm_),
               g$0=caml_call2(Impl[14],font[2],codepoint);
              if(! g$0){var idx$0=idx + 1 | 0,idx=idx$0;continue}
              var g$1=g$0[1],glyph_font=[0,[0,font,g$1]]}
            break}}
        if(glyph_font)
         {var match=glyph_font[1],stb_glyph=match[2],font$1=match[1];
          return build_glyph
                  (t,
                   codepoint,
                   font$0,
                   font$1,
                   stb_glyph,
                   s,
                   pad,
                   blur$0,
                   bitmap_option)}
        return build_glyph
                (t,codepoint,font$0,font$0,Impl[1],s,pad,blur$0,bitmap_option)}
      function get_quad(t,font,prev_glyph,glyph,scale,spacing,x,y,quad)
       {var x$0=[0,x];
        if(0 === caml_call1(Impl[11],prev_glyph[11]))
         {var adv=caml_call3(Impl[9],font,prev_glyph[11],glyph[11]) * scale;
          x$0[1] = x$0[1] + Math.floor(adv + spacing + 0.5)}
        var
         xoff=Math.floor(glyph[9] + 1.),
         yoff=Math.floor(glyph[10] + 1.),
         x0=glyph[4] + 1.,
         y0=glyph[5] + 1.,
         x1=glyph[6] - 1.,
         y1=glyph[7] - 1.,
         rx=Math.floor(x$0[1] + xoff);
        x$0[1] = x$0[1] + Math.floor(glyph[8] / 10. + 0.5);
        var ry=Math.floor(y + yoff);
        quad[1] = rx;
        quad[2] = ry;
        quad[5] = rx + x1 - x0;
        quad[6] = ry + y1 - y0;
        quad[3] = x0 * t[2];
        quad[4] = y0 * t[3];
        quad[7] = x1 * t[2];
        quad[8] = y1 * t[3];
        return x$0[1]}
      function validate_texture(t)
       {var match=t[5],y1=match[4],x1=match[3],y0=match[2],x0=match[1];
        if(x0 < x1 && y0 < y1)
         {t[5] = [0,t[1][1],t[1][2],0,0];return [0,[0,x0,y0,x1,y1]]}
        return 0}
      function get_texture_data(t){return [0,t[4],t[1][1],t[1][2]]}
      function get_vert_align(font,align,size)
       {return has(align,top)
                ?font[4] * (Math.floor(size) * 0.1)
                :has(align,middle)
                  ?(font[4] + font[5]) * 0.5 * (Math.floor(size) * 0.1)
                  :has(align,baseline)
                    ?0.
                    :has(align,bottom)?font[5] * (Math.floor(size) * 0.1):0.}
      var tb_quad=empty$0(0);
      function text_bounds(t,x,y,str,start,end)
       {var
         state=get_state(t),
         isize=Math.floor(state[3] * 10.),
         blur=Math.floor(state[4]),
         font=caml_call2(find$0,t[6],state[1]),
         scale=caml_call2(Impl[13],font[2],state[3]),
         y$0=y + get_vert_align(font,state[2],isize),
         minx=[0,x],
         miny=[0,y$0],
         maxx=[0,x],
         maxy=[0,y$0],
         x$0=[0,x];
        if(end)
         var end$0=end[1],end$1=max(0,min(end$0,caml_ml_string_length(str)));
        else
         var end$1=caml_ml_string_length(str);
        reset$0(tb_quad);
        var
         start$0=[0,start],
         utf8_state=[0,0],
         codepoint=[0,0],
         prev_glyph_index=[0,empty];
        for(;;)
         {if(start$0[1] !== end$1)
           {if
             (0
              ===
              decutf8(utf8_state,codepoint,caml_string_get(str,start$0[1])))
             {var glyph=get_glyph(t,font,codepoint[1],isize,blur,optional);
              if(glyph)
               {var
                 glyph$0=glyph[1],
                 xn=
                  get_quad
                   (t,
                    font[2],
                    prev_glyph_index[1],
                    glyph$0,
                    scale,
                    state[5],
                    x$0[1],
                    y$0,
                    tb_quad);
                x$0[1] = xn;
                if(tb_quad[1] < minx[1])minx[1] = tb_quad[1];
                if(maxx[1] < tb_quad[5])maxx[1] = tb_quad[5];
                if(tb_quad[2] < miny[1])miny[1] = tb_quad[2];
                if(maxy[1] < tb_quad[6])maxy[1] = tb_quad[6];
                prev_glyph_index[1] = glyph$0}
              else
               prev_glyph_index[1] = empty}
            start$0[1]++;
            continue}
          var advance=x$0[1] - x;
          if(has(state[2],right))
           {minx[1] = minx[1] - advance;maxx[1] = maxx[1] - advance}
          else
           if(has(state[2],center))
            {minx[1] = minx[1] - advance * 0.5;
             maxx[1] = maxx[1] - advance * 0.5}
          return [0,advance,[254,minx[1],miny[1],maxx[1],maxy[1]]]}}
      function line_bounds(t,y)
       {var
         state=get_state(t),
         font=caml_call2(find$0,t[6],state[1]),
         size=state[3],
         y$0=y + get_vert_align(font,state[2],Math.floor(size * 10.)),
         miny=y$0 - font[4] * size,
         maxy=miny + font[6] * size;
        return [0,miny,maxy]}
      function iter_init(t,x,y,opt,end,str,bitmap)
       {if(opt)var sth=opt[1],start=sth;else var start=0;
        var state=get_state(t),font=caml_call2(find$0,t[6],state[1]);
        if(has(state[2],right))
         var match=text_bounds(t,x,y,str,start,end),w=match[1],x$0=x - w;
        else
         if(has(state[2],center))
          var
           match$0=text_bounds(t,x,y,str,start,end),
           w$0=match$0[1],
           x$0=x - w$0 * 0.5;
         else
          var x$0=x;
        var
         size=Math.floor(state[3] * 10.),
         y$0=y + get_vert_align(font,state[2],size),
         len=caml_ml_string_length(str);
        if(end)
         var e=end[1],len$0=0 <= e?len < e?len:e:0,end$0=len$0;
        else
         var end$0=len;
        var
         _jk_=Math.floor(state[4]),
         _jl_=state[5],
         iter=
          [0,
           x$0,
           y$0,
           x$0,
           caml_call2(Impl[13],font[2],size / 10.),
           _jl_,
           font,
           0,
           size,
           _jk_,
           empty,
           str,
           start,
           start,
           end$0,
           0,
           bitmap];
        return iter}
      function iter_next(t,iter,quad)
       {reset$0(quad);
        iter[12] = iter[13];
        if(iter[13] === iter[14])return 0;
        var state=[0,iter[15]],codepoint=[0,iter[7]],start=iter[13];
        for(;;)
         {if(start === iter[14])
           var start$2=start;
          else
           {var ch=caml_string_get(iter[11],start);
            if(0 !== decutf8(state,codepoint,ch))
             {iter[7] = codepoint[1];
              iter[15] = state[1];
              var start$1=start + 1 | 0,start=start$1;
              continue}
            var start$0=start + 1 | 0;
            iter[7] = codepoint[1];
            iter[15] = state[1];
            iter[1] = iter[3];
            var glyph=get_glyph(t,iter[6],iter[7],iter[8],iter[9],iter[16]);
            if(! glyph){iter[10] = empty;var start=start$0;continue}
            var
             glyph$0=glyph[1],
             next_x=
              get_quad
               (t,
                iter[6][2],
                iter[10],
                glyph$0,
                iter[4],
                iter[5],
                iter[3],
                iter[2],
                quad);
            iter[3] = next_x;
            iter[10] = glyph$0;
            var start$2=start$0}
          iter[13] = start$2;
          return 1}}
      function vert_metrics(t)
       {var
         state=get_state(t),
         font=caml_call2(find$0,t[6],state[1]),
         size=Math.floor(state[3] * 10.);
        return [254,
                font[4] * size / 10.,
                font[5] * size / 10.,
                font[6] * size / 10.]}
      function bounds(t,x,y,opt,end,str)
       {if(opt)var sth=opt[1],off=sth;else var off=0;
        return text_bounds(t,x,y,str,off,end)}
      function find_font(t,f)
       {var res=caml_call2(find_opt,t[7],f);
        if(res){var font=res[1];return [0,font[1]]}
        return 0}
      return [0,
              [0,no_flags,has,lor,lor,remove,optional,required],
              create$4,
              [0,empty$0],
              [0,next_x,codepoint,start,end,next,x,y],
              bounds,
              line_bounds,
              set_size,
              set_spacing,
              set_blur,
              set_align,
              set_font,
              vert_metrics,
              find_font,
              add_font,
              validate_texture,
              get_texture_data,
              iter_init,
              iter_next,
              add_fallback_id,
              add_fallback,
              reset_fallback_id,
              reset_fallback]}
    function length$0(t){return t.length}
    function sub(t,start,len){return t.subarray(start,len)}
    function create$4(size){return new uint8Array(size)}
    var empty$1=create$4(0);
    function Impl(P)
     {var invalid_glyph=[0,"",-1];
      function ascent(t){return t[1]}
      function descent(t){return t[2]}
      function line_gap(t){return t[3]}
      var VMetrics=[0,ascent,descent,line_gap];
      function advance_width(t){return t[1]}
      function left_side_bearing(t){return t[2]}
      var HMetrics=[0,advance_width,left_side_bearing];
      function x0(t){return t[1]}
      function y0(t){return t[2]}
      function x1(t){return t[3]}
      function y1(t){return t[4]}
      function create(x0,y0,x1,y1){return [0,x0,y0,x1,y1]}
      var Box=[0,x0,y0,x1,y1,create];
      function vmetrics(font){return _bC_}
      function hmetrics(font,glyph)
       {var _jh_=caml_jsstring_of_string(symbol(_bD_,font[1]));
        P[1].font = _jh_;
        var m=P[1].measureText(glyph[1]);
        return [0,m.width * 175. | 0,0]}
      function get_glyph_bitmap_box(font,glyph,scale)
       {var
         height=scale * 2146.,
         s=height.toString(),
         _jg_=s.concat("px ",caml_jsstring_of_string(font[1]));
        P[1].font = _jg_;
        var
         width=P[1].measureText(glyph[1]).width,
         width$0=width * 1.2 | 0,
         y=-0.8 * (scale * 2146.) | 0;
        return caml_call4(Box[5],1,y,width$0,scale * 2146. * 0.22 | 0)}
      function kern_advance(font,glyph1,glyph2){return 0}
      function create_font(data){return failwith(_bE_)}
      function load_font(name){return [0,[0,name]]}
      function is_invalid_glyph(g){return g[2] === -1?1:0}
      function make_glyph_bitmap(font,data,width,param,scale,box,glyph)
       {var
         font_height=scale * 2146.,
         s=font_height.toString(),
         _i$_=s.concat("px ",caml_jsstring_of_string(font[1]));
        P[1].font = _i$_;
        P[1].textBaseline = "top";
        P[1].textAlign = "left";
        var w=box[3] - box[1] | 0,h=box[4] - box[2] | 0;
        P[1].clearRect(0.,0.,w,h);
        P[1].fillText(glyph[1],0.,0.);
        var
         copy=P[1].getImageData(0.,0.,w,h),
         x_off=box[1],
         y_off=box[2],
         _jb_=w - 1 | 0,
         _ja_=0;
        if(! (_jb_ < 0))
         {var x=_ja_;
          for(;;)
           {var _jd_=h - 1 | 0,_jc_=0;
            if(! (_jd_ < 0))
             {var y=_jc_;
              for(;;)
               {var
                 b=
                  copy.data[((x * 4 | 0) + 3 | 0) + caml_mul(y * 4 | 0,w) | 0];
                data[(x + x_off | 0) + caml_mul(y + y_off | 0,width) | 0] = b;
                var _jf_=y + 1 | 0;
                if(_jd_ !== y){var y=_jf_;continue}
                break}}
            var _je_=x + 1 | 0;
            if(_jb_ !== x){var x=_je_;continue}
            break}}
        return 0}
      function scale_for_mapping_em_to_pixels(font,scale)
       {return scale / 2146.}
      function find(font,codepoint)
       {var str=String.fromCodePoint(codepoint);return [0,[0,str,codepoint]]}
      return [0,
              invalid_glyph,
              [0,set,sub,length$0,get,create$4,empty$1],
              VMetrics,
              HMetrics,
              vmetrics,
              hmetrics,
              Box,
              get_glyph_bitmap_box,
              kern_advance,
              create_font,
              is_invalid_glyph,
              make_glyph_bitmap,
              scale_for_mapping_em_to_pixels,
              find,
              load_font]}
    function length$1(t){return t.length}
    function sub$0(t,start,len){return t.subarray(start,len)}
    function create$5(size){return new uint8Array(size)}
    var empty$2=create$5(0);
    function length$2(t){return t.length}
    function zero(t)
     {var len=t.length - 1 | 0,_i9_=0;
      if(! (len < 0))
       {var i=_i9_;
        for(;;)
         {t[i] = 0.;
          var _i__=i + 1 | 0;
          if(len !== i){var i=_i__;continue}
          break}}
      return 0}
    function blit$1(src,s_off,dst,d_off,len)
     {var len$0=len - 1 | 0,_i7_=0;
      if(! (len$0 < 0))
       {var i=_i7_;
        for(;;)
         {dst[d_off + i | 0] = src[s_off + i | 0];
          var _i8_=i + 1 | 0;
          if(len$0 !== i){var i=_i8_;continue}
          break}}
      return 0}
    function create$6(size){return new float32Array(size)}
    function grow_vertex(t,idx)
     {var
       len=t[1].length,
       new_len=((len + (((idx + 1 | 0) << 4) - len | 0) | 0) * 3 | 0) / 2 | 0,
       new_arr=create$6(new_len);
      blit$1(t[1],0,new_arr,0,len);
      t[1] = new_arr;
      return 0}
    function check_size(t,idx)
     {if(t[1].length < (idx + 1 | 0) << 4)grow_vertex(t,idx);
      t[2] = imax(idx + 1 | 0,t[2]);
      return 0}
    function set$0(t,idx,x,y,u,v)
     {if(t[1].length < (idx + 1 | 0) << 4)grow_vertex(t,idx);
      t[2] = imax(t[2],idx + 1 | 0);
      var off=idx * 4 | 0;
      t[1][off] = x;
      t[1][off + 1 | 0] = y;
      t[1][off + 2 | 0] = u;
      return t[1][off + 3 | 0] = v}
    function unsafe_set(t,idx,x,y,u,v)
     {var off=idx * 4 | 0;
      t[1][off] = x;
      t[1][off + 1 | 0] = y;
      t[1][off + 2 | 0] = u;
      return t[1][off + 3 | 0] = v}
    function get$1(t,idx)
     {var
       x=t[1][idx * 4 | 0 | 0],
       y=t[1][(idx * 4 | 0) + 1 | 0],
       u=t[1][(idx * 4 | 0) + 2 | 0],
       v=t[1][(idx * 4 | 0) + 3 | 0];
      return [0,x,y,u,v]}
    function create$7(param){return [0,0,1,[0,create$6(1),0]]}
    var empty$3=create$7(0),empty_sub=create$7(0);
    function create$8(param){return [0,0,0,0,0,empty_sub,empty_sub,0,1]}
    function copy$4(t){return [0,t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8]]}
    var size=176;
    function set$1(t,i,i2,v){var i$0=i + i2 | 0;return t[1][i$0] = v}
    function set_scissor_ext(t,i,a,b){set$1(t,i,32,a);return set$1(t,i,33,b)}
    function set_scissor_scale(t,i,a,b)
     {set$1(t,i,34,a);return set$1(t,i,35,b)}
    function set_stroke_thr(t,i,s){return set$1(t,i,41,s)}
    function set_type(t,i,typ){return set$1(t,i,43,typ)}
    function make_slot(t,num,align)
     {var amount=caml_mul(num,align),len=t[1].length;
      if(len <= (t[2] + amount | 0))
       {var
         new_len=(max(t[2] + amount | 0,len) * 3 | 0) / 2 | 0,
         new_arr=create$6(new_len);
        blit$1(t[1],0,new_arr,0,len);
        t[1] = new_arr}
      var offset=t[2];
      t[2] = t[2] + amount | 0;
      return offset}
    var
     zero$0=0,
     zero$1=0,
     one=1,
     src_color=0x300,
     dst_color=0x306,
     one_minus_src_color=0x301,
     one_minus_dst_color=0x307,
     one_minus_src_alpha=0x303,
     one_minus_dst_alpha=0x305,
     src_alpha_saturate=0x308,
     src_alpha=0x302,
     dst_alpha=0x304,
     m=0xDE1,
     rgba$0=0x1908,
     unsigned_byte=0x1401,
     nearest_mipmap_nearest=0x2700,
     linear_mipmap_linear=0x2702,
     nearest$0=0x2600,
     linear=0x2601,
     texture_min_filter=0x2801,
     texture_mag_filter=0x2800,
     clamp_to_edge=0x812F,
     texture_wrap_s=0x2802,
     texture_wrap_t=0x2803,
     repeat=0x2901,
     unpack_alignment=0xCF5,
     stencil_test=0xB90,
     equal$0=0x202,
     keep=0x1E00,
     incr=0x1E02,
     triangle_strip=0x5,
     triangle_fan=0x6,
     always=0x207,
     notequal=0x205,
     cull_face_enum=0xB44,
     m$0=0x405,
     m$1=0x901,
     blend=0xBE2,
     depth_test=0xB71,
     front=0x404,
     incr_wrap=0x8507,
     decr_wrap=0x8508,
     scissor_test=0xC11,
     t=0x84C0,
     float$0=0x1406,
     array_buffer=0x8892,
     target=0x8A11,
     triangles=0x4,
     stream_draw=0x88E0,
     p=0x8A34,
     unpack_row_length=0x0CF2,
     unpack_skip_rows=0x0CF3,
     unpack_skip_pixels=0x0CF4,
     red=0x1903,
     r8=0x8229;
    function blending_factor_equal(a,b){return a == b}
    function bind_texture(c,t,v)
     {if(v){var v$0=v[1];return c.bindTexture(t,v$0)}return 0}
    function vertex_attrib_pointer(c,a,b,g,d,e,f)
     {return c.vertexAttribPointer(a,b,g,! ! d,e,f)}
    function buffer_data(c,t,buffer,size,b)
     {return c.bufferData(t,buffer,b,0,size / 4 | 0)}
    var temp_array=caml_js_from_array([254,0.,0.]);
    function color_mask(c,a,b,z,d)
     {var a$0=! ! a,b$0=! ! b,z$0=! ! z,d$0=! ! d;
      return c.colorMask(a$0,b$0,z$0,d$0)}
    function convert_blend_factor(param)
     {switch(param)
       {case 0:return zero$0;
        case 1:return one;
        case 2:return src_color;
        case 3:return one_minus_src_color;
        case 4:return dst_color;
        case 5:return one_minus_dst_color;
        case 6:return src_alpha;
        case 7:return one_minus_src_alpha;
        case 8:return dst_alpha;
        case 9:return one_minus_dst_alpha;
        default:return src_alpha_saturate}}
    function blending_eq(a,b)
     {if(a)
       {if(b)
         {var b$0=b[1],a$0=a[1];
          return caml_call2(blending_factor_equal,a$0,b$0)}}
      else
       if(! b)return 1;
      return 0}
    function of_composite_op_state(op)
     {var
       _i4_=[0,convert_blend_factor(op[4])],
       _i5_=[0,convert_blend_factor(op[3])],
       _i6_=[0,convert_blend_factor(op[2])];
      return [0,[0,convert_blend_factor(op[1])],_i6_,_i5_,_i4_]}
    var fill_grad=0.,fill_img=1.,simple=2.,img=3.;
    function empty$5(param)
     {return [0,2,0,0,0,0,-1,empty$4,create$3(10,init$1)]}
    function reset$1(t,type)
     {t[1] = type;
      t[2] = 0;
      t[3] = 0;
      t[4] = 0;
      t[5] = 0;
      t[6] = -1;
      t[7] = empty$4;
      return clear$0(0,t[8])}
    function find_texture_by_id(t)
     {var _i2_=t[9];
      return function(key)
       {var
         _i3_=key_index(_i2_,key),
         match=caml_check_bound(_i2_[2],_i3_)[1 + _i3_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(0 === caml_compare(key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(0 === caml_compare(key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(0 === caml_compare(key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(0 === caml_compare(key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}}
    function bind_texture$0(t,id)
     {var _iZ_=t[17],switch$0=0;
      if(_iZ_)
       if(id)var b=id[1],a=_iZ_[1],_i0_=a === b?1:0;else switch$0 = 1;
      else
       if(id)switch$0 = 1;else var _i0_=1;
      if(switch$0)var _i0_=0;
      var _i1_=1 - _i0_;
      return _i1_?(t[17] = id,bind_texture(t[1],m,id)):_i1_}
    function stencil_mask(t,mask)
     {var _iY_=t[18] !== mask?1:0;
      return _iY_?(t[18] = mask,t[1].stencilMask(mask)):_iY_}
    function stencil_func(t,func,ref,mask)
     {var _iV_=caml_notequal(t[19],func);
      if(_iV_)
       var _iW_=_iV_;
      else
       var _iX_=t[20] !== ref?1:0,_iW_=_iX_ || (t[21] !== mask?1:0);
      return _iW_
              ?(t[19]
                =
                func,
                t[20]
                =
                ref,
                t[21]
                =
                mask,
                t[1].stencilFunc(func,ref,mask))
              :_iW_}
    function create_texture(t,type,w,h,flags,data)
     {var tex=[0,0,0,0,0,912890036,no_flags$0];
      t[10] = t[10] + 1 | 0;
      tex[1] = t[10];
      tex[2] = 0;
      tex[3] = 0;
      tex[4] = 0;
      tex[5] = 912890036;
      tex[6] = no_flags$0;
      var
       _iR_=tex[1],
       _iS_=t[9],
       i=key_index(_iS_,_iR_),
       param$0=caml_check_bound(_iS_[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,_iR_)){var param=next;continue}
          param[1] = _iR_;
          param[2] = tex;
          var _iQ_=0}
        else
         var _iQ_=1;
        var switch$0=0;
        if(_iQ_)
         {caml_check_bound(_iS_[2],i)[1 + i] = [0,_iR_,tex,param$0];
          _iS_[1] = _iS_[1] + 1 | 0;
          if(_iS_[2].length - 1 << 1 < _iS_[1])
           {resize$0(key_index,_iS_);switch$0 = 1}}
        tex[6] = flags;
        var
         _iT_=0,
         count=1,
         _iU_=t[1],
         v=
          caml_check_bound
            (init(count,function(param){return _iU_.createTexture()}),0)
           [1 + _iT_];
        tex[2] = [0,v];
        tex[3] = w;
        tex[4] = h;
        tex[5] = type;
        bind_texture$0(t,tex[2]);
        t[1].pixelStorei(unpack_alignment,1);
        t[1].pixelStorei(unpack_row_length,tex[3]);
        t[1].pixelStorei(unpack_skip_pixels,0);
        t[1].pixelStorei(unpack_skip_rows,0);
        if(912890036 <= tex[5])
         t[1].texImage2D(m,0,rgba$0,w,h,0,rgba$0,unsigned_byte,data);
        else
         t[1].texImage2D(m,0,r8,w,h,0,red,unsigned_byte,data);
        var
         mipmaps=has$0(tex[6],generate_mipmaps),
         nearest$1=has$0(tex[6],nearest),
         repeat_x$0=has$0(tex[6],repeat_x),
         repeat_y$0=has$0(tex[6],repeat_y),
         min_filter=
          mipmaps
           ?nearest$1?nearest_mipmap_nearest:linear_mipmap_linear
           :nearest$1?nearest$0:linear;
        t[1].texParameteri(m,texture_min_filter,min_filter);
        var mag_filter=nearest$1?nearest$0:linear;
        t[1].texParameteri(m,texture_mag_filter,mag_filter);
        var wrap_s=repeat_x$0?repeat:clamp_to_edge;
        t[1].texParameteri(m,texture_wrap_s,wrap_s);
        var wrap_t=repeat_y$0?repeat:clamp_to_edge;
        t[1].texParameteri(m,texture_wrap_t,wrap_t);
        t[1].pixelStorei(unpack_alignment,4);
        t[1].pixelStorei(unpack_row_length,0);
        t[1].pixelStorei(unpack_skip_pixels,0);
        t[1].pixelStorei(unpack_skip_rows,0);
        if(mipmaps)t[1].generateMipmap(m);
        bind_texture$0(t,0);
        return [0,tex[1]]}}
    function update_texture(t,image,x,y,w,h,data)
     {var tex=caml_call1(find_texture_by_id(t),image);
      if(tex)
       {var tex$0=tex[1];
        bind_texture$0(t,tex$0[2]);
        t[1].pixelStorei(unpack_alignment,1);
        t[1].pixelStorei(unpack_row_length,tex$0[3]);
        t[1].pixelStorei(unpack_skip_pixels,x);
        t[1].pixelStorei(unpack_skip_rows,y);
        if(912890036 <= tex$0[5])
         t[1].texSubImage2D(m,0,x,y,w,h,rgba$0,unsigned_byte,data);
        else
         t[1].texSubImage2D(m,0,x,y,w,h,red,unsigned_byte,data);
        t[1].pixelStorei(unpack_alignment,4);
        t[1].pixelStorei(unpack_row_length,0);
        t[1].pixelStorei(unpack_skip_pixels,0);
        t[1].pixelStorei(unpack_skip_rows,0);
        bind_texture$0(t,0);
        return 1}
      return 0}
    function get_texture_size(t,image)
     {var match=caml_call1(find_texture_by_id(t),image);
      if(match){var tex=match[1];return [0,tex[3],tex[4]]}
      return _bL_}
    function cancel(t)
     {clear$0(0,t[16]);
      clear$0(0,t[15]);
      var frag_arr=t[13][1];
      zero(frag_arr);
      t[13][2] = 0;
      return 0}
    function convert_paint(t,frag,paint,scissor,width,fringe,stroke_thr)
     {var _iB_=t[13],ia=paint[14];
      set$1(_iB_,frag,24,paint[11] * ia);
      set$1(_iB_,frag,25,paint[12] * ia);
      set$1(_iB_,frag,26,paint[13] * ia);
      set$1(_iB_,frag,27,paint[14]);
      var oa=paint[18];
      set$1(_iB_,frag,28,paint[15] * oa);
      set$1(_iB_,frag,29,paint[16] * oa);
      set$1(_iB_,frag,30,paint[17] * oa);
      set$1(_iB_,frag,31,paint[18]);
      var invxform=create$0(0),switch$0=0;
      if(! (scissor[2] < -0.5) && ! (scissor[3] < -0.5))
       {inverse(invxform,scissor[1]);
        var
         _iP_=t[13],
         _iK_=invxform[6],
         _iL_=invxform[5],
         _iM_=invxform[4],
         _iN_=invxform[3],
         _iO_=invxform[2];
        set$1(_iP_,frag,0,invxform[1]);
        set$1(_iP_,frag,1,_iO_);
        set$1(_iP_,frag,2,0.);
        set$1(_iP_,frag,3,0.);
        set$1(_iP_,frag,4,_iN_);
        set$1(_iP_,frag,5,_iM_);
        set$1(_iP_,frag,6,0.);
        set$1(_iP_,frag,7,0.);
        set$1(_iP_,frag,8,_iL_);
        set$1(_iP_,frag,9,_iK_);
        set$1(_iP_,frag,10,1.);
        set$1(_iP_,frag,11,0.);
        var
         x=scissor[1],
         scale0=Math.sqrt(x[1] * x[1] + x[3] * x[3]) / fringe,
         scale1=Math.sqrt(x[2] * x[2] + x[4] * x[4]) / fringe;
        set_scissor_ext(t[13],frag,scissor[2],scissor[3]);
        set_scissor_scale(t[13],frag,scale0,scale1);
        switch$0 = 1}
      if(! switch$0)
       {set_scissor_ext(t[13],frag,1.,1.);set_scissor_scale(t[13],frag,1.,1.)}
      var x0=paint[7],x1=paint[8],_iC_=t[13];
      set$1(_iC_,frag,36,x0);
      set$1(_iC_,frag,37,x1);
      var s=(width * 0.5 + fringe * 0.5) / fringe;
      set$1(t[13],frag,40,s);
      set_stroke_thr(t[13],frag,stroke_thr);
      var
       paint_xform=
        [254,paint[1],paint[2],paint[3],paint[4],paint[5],paint[6]];
      if(paint[19] != 0.)
       {var _iD_=paint[19] | 0,match=caml_call1(find_texture_by_id(t),_iD_);
        if(match)
         {var tex=match[1];
          if(has$0(tex[6],flip_y))
           {var m1=create$0(0),m2=create$0(0);
            translate(m1,0.,x1 * 0.5);
            multiply(m1,paint_xform);
            scale(m2,1.,-1.);
            multiply(m2,m1);
            translate(m1,0.,x1 * 0.5);
            multiply(m1,m2);
            inverse(invxform,m1)}
          else
           inverse(invxform,paint_xform);
          set_type(t[13],frag,fill_img);
          var
           tex_type=
            912890036 <= tex[5]?has$0(tex[6],premultiplied)?0.:1.:2.;
          set$1(t[13],frag,42,tex_type)}}
      else
       {set_type(t[13],frag,fill_grad);
        set$1(t[13],frag,38,paint[9]);
        set$1(t[13],frag,39,paint[10]);
        inverse(invxform,paint_xform)}
      var
       _iJ_=t[13],
       _iE_=invxform[6],
       _iF_=invxform[5],
       _iG_=invxform[4],
       _iH_=invxform[3],
       _iI_=invxform[2];
      set$1(_iJ_,frag,12,invxform[1]);
      set$1(_iJ_,frag,13,_iI_);
      set$1(_iJ_,frag,14,0.);
      set$1(_iJ_,frag,15,0.);
      set$1(_iJ_,frag,16,_iH_);
      set$1(_iJ_,frag,17,_iG_);
      set$1(_iJ_,frag,18,0.);
      set$1(_iJ_,frag,19,0.);
      set$1(_iJ_,frag,20,_iF_);
      set$1(_iJ_,frag,21,_iE_);
      set$1(_iJ_,frag,22,1.);
      return set$1(_iJ_,frag,23,0.)}
    function set_uniforms(t,offset,image)
     {var offset$0=offset * 4 | 0;
      t[1].bindBufferRange(target,0,t[6],offset$0,176);
      if(image === 0)
       var tex=0;
      else
       {var s=caml_call1(find_texture_by_id(t),image);
        if(s)
         var s$0=s;
        else
         var _iA_=t[11],s$0=caml_call1(find_texture_by_id(t),_iA_);
        var tex=s$0}
      if(tex)var t$0=tex[1],tex$0=t$0[2];else var tex$0=tex;
      bind_texture$0(t,tex$0);
      return 0}
    function equal$1(a,b)
     {var switch$0=0;
      switch(a)
       {case 0:if(! b)switch$0 = 1;break;
        case 1:if(1 === b)switch$0 = 1;break;
        default:if(2 <= b)switch$0 = 1}
      return switch$0?1:0}
    function create$9(param)
     {var _iw_=create$1(0),_ix_=create$0(0),_iy_=create$2(0),_iz_=create$2(0);
      return [0,
              of_composite_operation(0),
              0,
              _iz_,
              _iy_,
              1.,
              0.,
              0,
              0,
              1.,
              _ix_,
              _iw_,
              16.,
              0.,
              1.,
              0.,
              left,
              0]}
    var no_flags$1=0,typ=1,left$0=2,bevel=4,inner_bevel=8;
    function set$2(_iv_,_iu_,_it_){_iv_[1 + _iu_] = _it_;return 0}
    function equals(x1,y1,x2,y2,tol)
     {var dx=x2 - x1,dy=y2 - y1;return dx * dx + dy * dy < tol * tol?1:0}
    function normalize(x,y)
     {var d=Math.sqrt(x * x + y * y);
      if(1e-06 < d){var id=1. / d;return [0,d,x * id,y * id]}
      return [0,d,x,y]}
    function get_x(t,idx){return t[1 + (idx * 7 | 0)]}
    function get_y(t,idx){return t[1 + ((idx * 7 | 0) + 1 | 0)]}
    function get_dx(t,idx){return t[1 + ((idx * 7 | 0) + 2 | 0)]}
    function get_dy(t,idx){return t[1 + ((idx * 7 | 0) + 3 | 0)]}
    function len(t,idx){return t[1 + ((idx * 7 | 0) + 4 | 0)]}
    function set_dmx(t,idx,v){return set$2(t,(idx * 7 | 0) + 5 | 0,v)}
    function set_dmy(t,idx,v){return set$2(t,(idx * 7 | 0) + 6 | 0,v)}
    function get_dmx(t,idx){return t[1 + ((idx * 7 | 0) + 5 | 0)]}
    function get_dmy(t,idx){return t[1 + ((idx * 7 | 0) + 6 | 0)]}
    function has_flag(t,idx,flag){return 0 < (t[1 + idx] & flag)?1:0}
    function add_flag(t,idx,flag){t[1 + idx] = t[1 + idx] | flag;return 0}
    function get_xy(t,idx)
     {var
       data=t[2],
       idx$0=idx * 7 | 0,
       x=data[1 + idx$0],
       y=data[1 + (idx$0 + 1 | 0)];
      return [0,x,y]}
    var font_canvas=document.createElement("canvas");
    font_canvas.width = 2048;
    font_canvas.height = 2048;
    var ctx_2d=font_canvas.getContext("2d");
    ctx_2d.imageSmoothingEnabled = false$0;
    var
     FontJS=Impl([0,ctx_2d]),
     Font=Make$0(FontJS),
     Buffer=
      [0,
       [0,set,sub$0,length$1,get,create$5,empty$2],
       [0,set,length$2,get,create$6,blit$1,zero]],
     include=
      function(Font)
        {var dummy=-1;
         function from_buffer(t,data,width,height,flags)
          {return create_texture(t[1],912890036,width,height,flags,data)}
         function from_color(t,data,width,height,flags)
          {var len=data.length - 1;
           if(len === caml_mul(width,height))
            {var
              img=caml_call1(Buffer[1][5],caml_mul(width,height) * 4 | 0),
              _ir_=len - 1 | 0,
              _iq_=0;
             if(! (_ir_ < 0))
              {var i=_iq_;
               for(;;)
                {var color=caml_check_bound(data,i)[1 + i];
                 caml_call3
                  (Buffer[1][1],img,i * 4 | 0 | 0,color[1] * 255. | 0);
                 caml_call3
                  (Buffer[1][1],img,(i * 4 | 0) + 1 | 0,color[2] * 255. | 0);
                 caml_call3
                  (Buffer[1][1],img,(i * 4 | 0) + 2 | 0,color[3] * 255. | 0);
                 caml_call3
                  (Buffer[1][1],img,(i * 4 | 0) + 3 | 0,color[4] * 255. | 0);
                 var _is_=i + 1 | 0;
                 if(_ir_ !== i){var i=_is_;continue}
                 break}}
             return from_buffer(t,img,width,height,flags)}
           throw [0,Assert_failure,_bM_]}
         function update_image(t,image,data)
          {var match=get_texture_size(t[1],image),h=match[2],w=match[1];
           return update_texture(t[1],image,0,0,w,h,data)}
         function size$0(t,image){return get_texture_size(t[1],image)}
         function set_device_pixel_ratio(t,ratio)
          {t[8] = 0.25 / ratio;
           t[9] = 0.01 / ratio;
           t[10] = 1. / ratio;
           t[11] = ratio;
           return 0}
         function get_state(t){return last(t[6])}
         function save(t)
          {if(0 === t[6][3])
            var state=create$9(0);
           else
            var
             t$0=get_state(t),
             _ih_=t$0[11],
             _ib_=t$0[17],
             _ic_=t$0[16],
             _id_=t$0[15],
             _ie_=t$0[14],
             _if_=t$0[13],
             _ig_=t$0[12],
             _h__=_ih_[3],
             _h$_=_ih_[2],
             _ia_=[0,copy$1(_ih_[1]),_h$_,_h__],
             _ii_=copy$1(t$0[10]),
             _ij_=t$0[9],
             _ik_=t$0[8],
             _il_=t$0[7],
             _im_=t$0[6],
             _in_=t$0[5],
             _io_=copy$2(t$0[4]),
             _ip_=copy$2(t$0[3]),
             state=
              [0,
               t$0[1],
               t$0[2],
               _ip_,
               _io_,
               _in_,
               _im_,
               _il_,
               _ik_,
               _ij_,
               _ii_,
               _ia_,
               _ig_,
               _if_,
               _ie_,
               _id_,
               _ic_,
               _ib_];
           return add(t[6],state)}
         function restore(t)
          {var _h9_=t[6];_h9_[3] = max(_h9_[3] - 1 | 0,0);return 0}
         function set_shape_antialias(t,enabled)
          {var state=get_state(t);state[2] = enabled;return 0}
         function set_stroke_width(t,width)
          {var state=get_state(t);state[5] = width;return 0}
         function set_miter_limit(t,limit)
          {var state=get_state(t);state[6] = limit;return 0}
         function set_line_cap(t,cap)
          {var state=get_state(t);state[8] = cap;return 0}
         function set_line_join(t,join)
          {var state=get_state(t);state[7] = join;return 0}
         function transform(t,m)
          {var state=get_state(t);return premultiply(state[10],m)}
         function reset(t){var state=get_state(t);return identity(state[10])}
         function translate$0(t,x,y)
          {var state=get_state(t),m=create$0(0);
           translate(m,x,y);
           return premultiply(state[10],m)}
         function rotate(t,angle)
          {var
            state=get_state(t),
            dst=create$0(0),
            cs=Math.cos(angle),
            sn=Math.sin(angle);
           dst[1] = cs;
           dst[2] = sn;
           dst[3] = - sn;
           dst[4] = cs;
           dst[5] = 0.;
           dst[6] = 0.;
           return premultiply(state[10],dst)}
         function skew_x(t,angle)
          {var state=get_state(t),t$0=create$0(0);
           t$0[1] = 1.;
           t$0[2] = 0.;
           t$0[3] = Math.tan(angle);
           t$0[4] = 1.;
           t$0[5] = 0.;
           t$0[6] = 0.;
           return premultiply(state[10],t$0)}
         function skew_y(t,angle)
          {var state=get_state(t),t$0=create$0(0);
           t$0[1] = 1.;
           t$0[2] = Math.tan(angle);
           t$0[3] = 0.;
           t$0[4] = 1.;
           t$0[5] = 0.;
           t$0[6] = 0.;
           return premultiply(state[10],t$0)}
         function scale$0(t,x,y)
          {var state=get_state(t),m=create$0(0);
           scale(m,x,y);
           return premultiply(state[10],m)}
         function deg_to_rad(d){return d * 3.14159265358979312 / 180.}
         function rad_to_deg(r){return r * 180. / 3.14159265358979312}
         function current_transform(t){return get_state(t)[10]}
         function scissor(t,x,y,w,h)
          {var state=get_state(t),w$0=max$0(w,0.),h$0=max$0(h,0.);
           identity(state[11][1]);
           var m=state[11][1];
           m[5] = x + w$0 * 0.5;
           m[6] = y + h$0 * 0.5;
           multiply(state[11][1],state[10]);
           var init=state[11];
           state[11] = [0,init[1],w$0 * 0.5,h$0 * 0.5];
           return 0}
         function intersect(t,x$0,y$0,w$0,h$0)
          {var state=get_state(t);
           if(state[11][2] < 0.)return scissor(t,x$0,y$0,w$0,h$0);
           var
            pxform=copy$1(state[11][1]),
            invxform=create$0(0),
            ex=state[11][2],
            ey=state[11][3];
           inverse(invxform,state[10]);
           multiply(pxform,invxform);
           var
            tex=ex * Math.abs(pxform[1]) + ey * Math.abs(pxform[3]),
            tey=ex * Math.abs(pxform[2]) + ey * Math.abs(pxform[4]),
            ah=tey * 2.,
            aw=tex * 2.,
            ay=pxform[6] - tey,
            ax=pxform[5] - tex,
            x=max$0(ax,x$0),
            y=max$0(ay,y$0),
            maxx=min$1(ax + aw,x$0 + w$0),
            maxy=min$1(ay + ah,y$0 + h$0),
            h=max$0(0.,maxy - y),
            w=max$0(0.,maxx - x);
           return scissor(t,x,y,w,h)}
         function reset$0(t)
          {var state=get_state(t);state[11] = create$1(0);return 0}
         function set_composite_operation(t,op)
          {var state=get_state(t);state[1] = op;return 0}
         function set_composite_blend_func_separ
          (t,src_rgb,dst_rgb,src_alpha,dst_alpha)
          {var op=[0,src_rgb,dst_rgb,src_alpha,dst_alpha],state=get_state(t);
           state[1] = op;
           return 0}
         function set_composite_blend_func(t,src,dst)
          {return set_composite_blend_func_separ(t,src,dst,src,dst)}
         function set_alpha(t,alpha)
          {var state=get_state(t);state[9] = alpha;return 0}
         function last_path(t){return last(t[7][2])}
         function add_path(t)
          {var npoints=t[7][1][3],t$0=steal(t[7][2],create$8);
           t$0[1] = 0;
           t$0[2] = 0;
           t$0[3] = 0;
           t$0[4] = 0;
           t$0[5] = empty_sub;
           t$0[6] = empty_sub;
           t$0[7] = 0;
           t$0[8] = 1;
           t$0[1] = npoints;
           return 0}
         function add_point(t,x,y,flags)
          {var path=last_path(t),points=t[7][1];
           function insert(param)
            {if(points[1].length - 1 <= points[3])
              {var
                len=(points[2].length - 1) / 7 | 0,
                new_data=
                 init
                  (((len * 3 | 0) / 2 | 0) * 7 | 0,
                   function(idx)
                    {return idx < (len * 7 | 0)?points[2][1 + idx]:0.}),
                new_flags=
                 init
                  ((len * 3 | 0) / 2 | 0,
                   function(idx){return idx < len?points[1][1 + idx]:0});
               points[2] = new_data;
               points[1] = new_flags}
             var idx=points[3];
             points[3] = points[3] + 1 | 0;
             points[1][1 + idx] = flags;
             var idx$0=idx * 7 | 0;
             set$2(points[2],idx$0,x);
             set$2(points[2],idx$0 + 1 | 0,y);
             set$2(points[2],idx$0 + 2 | 0,0.);
             set$2(points[2],idx$0 + 3 | 0,0.);
             set$2(points[2],idx$0 + 4 | 0,0.);
             set$2(points[2],idx$0 + 5 | 0,0.);
             set$2(points[2],idx$0 + 6 | 0,0.);
             path[2] = path[2] + 1 | 0;
             return 0}
           if(0 < path[2] && 0 < t[7][1][3])
            {var
              idx$0=(points[3] - 1 | 0) * 7 | 0,
              lx=points[2][1 + idx$0],
              ly=points[2][1 + (idx$0 + 1 | 0)];
             if(equals(lx,ly,x,y,t[9]))
              {var idx=(points[3] - 1 | 0) * 7 | 0,last=points[1][1 + idx];
               points[1][1 + idx] = last | flags;
               return 0}
             return insert(0)}
           return insert(0)}
         function fabs(a){return a < 0.?- a:a}
         function tesselate_bezier(t,x1,y1,x2,y2,x3,y3,x4,y4,level,typ)
          {var x1$0=x1,y1$0=y1,x2$0=x2,y2$0=y2,x3$0=x3,y3$0=y3,level$0=level;
           for(;;)
            {var _h8_=level$0 < 10?1:0;
             if(_h8_)
              {var
                dx=x4 - x1$0,
                dy=y4 - y1$0,
                d2=fabs((x2$0 - x4) * dy - (y2$0 - y4) * dx),
                d3=fabs((x3$0 - x4) * dy - (y3$0 - y4) * dx);
               if((d2 + d3) * (d2 + d3) < t[8] * (dx * dx + dy * dy))
                return add_point(t,x4,y4,typ);
               var
                x23=(x2$0 + x3$0) * 0.5,
                x3$1=(x3$0 + x4) * 0.5,
                x2$1=(x23 + x3$1) * 0.5,
                x12=(x1$0 + x2$0) * 0.5,
                x123=(x12 + x23) * 0.5,
                x1$1=(x123 + x2$1) * 0.5,
                y23=(y2$0 + y3$0) * 0.5,
                y3$1=(y3$0 + y4) * 0.5,
                y2$1=(y23 + y3$1) * 0.5,
                y12=(y1$0 + y2$0) * 0.5,
                y123=(y12 + y23) * 0.5,
                y1$1=(y123 + y2$1) * 0.5;
               tesselate_bezier
                (t,
                 x1$0,
                 y1$0,
                 x12,
                 y12,
                 x123,
                 y123,
                 x1$1,
                 y1$1,
                 level$0 + 1 | 0,
                 no_flags$1);
               var
                level$1=level$0 + 1 | 0,
                x1$0=x1$1,
                y1$0=y1$1,
                x2$0=x2$1,
                y2$0=y2$1,
                x3$0=x3$1,
                y3$0=y3$1,
                level$0=level$1;
               continue}
             return _h8_}}
         function poly_reverse(points,offset,count)
          {var flags=points[1],data=points[2];
           function swap(data,i,j)
            {var tmp=data[1 + i];
             set$2(data,i,data[1 + j]);
             return set$2(data,j,tmp)}
           var i=[0,0],j=[0,count - 1 | 0];
           for(;;)
            {if(i[1] < j[1])
              {var tmp=flags[1 + (offset + i[1] | 0)];
               flags[1 + (offset + i[1] | 0)]
               =
               flags[1 + (offset + j[1] | 0)];
               flags[1 + (offset + j[1] | 0)] = tmp;
               i[1]++;
               j[1] += -1;
               continue}
             var
              offset$0=offset * 7 | 0,
              i$0=[0,offset$0],
              j$0=[0,offset$0 + ((count - 1 | 0) * 7 | 0) | 0];
             for(;;)
              {if(i$0[1] < j$0[1])
                {swap(data,i$0[1],j$0[1]);
                 swap(data,i$0[1] + 1 | 0,j$0[1] + 1 | 0);
                 swap(data,i$0[1] + 2 | 0,j$0[1] + 2 | 0);
                 swap(data,i$0[1] + 3 | 0,j$0[1] + 3 | 0);
                 swap(data,i$0[1] + 4 | 0,j$0[1] + 4 | 0);
                 swap(data,i$0[1] + 5 | 0,j$0[1] + 5 | 0);
                 swap(data,i$0[1] + 6 | 0,j$0[1] + 6 | 0);
                 i$0[1] = i$0[1] + 7 | 0;
                 j$0[1] = j$0[1] - 7 | 0;
                 continue}
               return 0}}}
         function begin(t)
          {clear$0(0,t[2]);
           var _h7_=t[7];
           _h7_[1][3] = 0;
           return clear$0(0,_h7_[2])}
         function add_command(t,cmd)
          {var xform=get_state(t)[10];
           if(typeof cmd === "number")
            var _h6_=cmd;
           else
            switch(cmd[0])
             {case 0:
               var
                y=cmd[2],
                x=cmd[1],
                xn=x * xform[1] + y * xform[3] + xform[5],
                yn=x * xform[2] + y * xform[4] + xform[6],
                _h6_=[0,xn,yn];
               break;
              case 1:
               var
                y$0=cmd[2],
                x$0=cmd[1],
                xn$0=x$0 * xform[1] + y$0 * xform[3] + xform[5],
                yn$0=x$0 * xform[2] + y$0 * xform[4] + xform[6],
                _h6_=[1,xn$0,yn$0];
               break;
              case 2:
               var
                y$1=cmd[6],
                x$1=cmd[5],
                c2y=cmd[4],
                c2x=cmd[3],
                c1y=cmd[2],
                c1x=cmd[1],
                xn$1=x$1 * xform[1] + y$1 * xform[3] + xform[5],
                yn$1=x$1 * xform[2] + y$1 * xform[4] + xform[6],
                c1xn=c1x * xform[1] + c1y * xform[3] + xform[5],
                c1yn=c1x * xform[2] + c1y * xform[4] + xform[6],
                c2xn=c2x * xform[1] + c2y * xform[3] + xform[5],
                c2yn=c2x * xform[2] + c2y * xform[4] + xform[6],
                _h6_=[2,c1xn,c1yn,c2xn,c2yn,xn$1,yn$1];
               break;
              default:var _h6_=cmd}
           return add(t[2],_h6_)}
         function close(t){return add_command(t,0)}
         function winding(t,winding){return add_command(t,[3,winding])}
         function move_to(t,x,y){return add_command(t,[0,x,y])}
         function line_to(t,x,y){return add_command(t,[1,x,y])}
         function bezier_to(t,c1x,c1y,c2x,c2y,x,y)
          {return add_command(t,[2,c1x,c1y,c2x,c2y,x,y])}
         function quad_to(t,cx,cy,x,y)
          {var
            x0=t[3],
            y0=t[4],
            bezier=
             [2,
              x0 + 0.66666666666666663 * (cx - x0),
              y0 + 0.66666666666666663 * (cy - y0),
              x + 0.66666666666666663 * (cx - x),
              y + 0.66666666666666663 * (cy - y),
              x,
              y];
           return add_command(t,bezier)}
         function rect(t,x,y,w,h)
          {add_command(t,[0,x,y]);
           add_command(t,[1,x,y + h]);
           add_command(t,[1,x + w,y + h]);
           add_command(t,[1,x + w,y]);
           return add_command(t,0)}
         function arc(t,cx,cy,r,a0,a1,dir)
          {var
            use_line_to=0 < t[2][3]?1:0,
            da$1=a1 - a0,
            pi=6.28318530717958623;
           if(dir)
            if(6.28318530717958623 <= Math.abs(da$1))
             var da$2=pi;
            else
             {var da=[0,da$1];
              for(;;)
               {if(da[1] < 0.){da[1] = da[1] + 6.28318530717958623;continue}
                var da$2=da[1];
                break}}
           else
            if(6.28318530717958623 <= Math.abs(da$1))
             var da$2=-6.28318530717958623;
            else
             {var da$0=[0,da$1];
              for(;;)
               {if(0. < da$0[1])
                 {da$0[1] = da$0[1] - 6.28318530717958623;continue}
                var da$2=da$0[1];
                break}}
           var
            a=Math.abs(da$2) / 1.57079632679489656 + 0.5 | 0,
            b=5,
            _h3_=a < 5?a:b,
            ndivs=imax(1,_h3_),
            hda=da$2 / ndivs / 2.,
            kappa=
             Math.abs
              (1.33333333333333326 * (1. - Math.cos(hda)) / Math.sin(hda)),
            kappa$0=0 === dir?- kappa:kappa,
            ptanx=[0,0.],
            ptany=[0,0.],
            px=[0,0.],
            py=[0,0.],
            _h4_=0;
           if(! (ndivs < 0))
            {var i=_h4_;
             for(;;)
              {var
                a$0=a0 + da$2 * (i / ndivs),
                dx=Math.cos(a$0),
                dy=Math.sin(a$0),
                x=cx + dx * r,
                y=cy + dy * r,
                tanx=- dy * r * kappa$0,
                tany=dx * r * kappa$0;
               if(0 === i)
                if(use_line_to)
                 add_command(t,[1,x,y]);
                else
                 add_command(t,[0,x,y]);
               else
                add_command
                 (t,
                  [2,px[1] + ptanx[1],py[1] + ptany[1],x - tanx,y - tany,x,y]);
               px[1] = x;
               py[1] = y;
               ptanx[1] = tanx;
               ptany[1] = tany;
               var _h5_=i + 1 | 0;
               if(ndivs !== i){var i=_h5_;continue}
               break}}
           return 0}
         function arc_to(t$2,x1,y1,x2,y2,radius)
          {var x0=t$2[3],y0=t$2[4];
           if(! equals(x0,y0,x1,y1,t$2[9]) && ! equals(x1,y1,x2,y2,t$2[9]))
            {var
              pqx=x2 - x0,
              pqy=y2 - y0,
              dx=x1 - x0,
              dy=y1 - y0,
              d=pqx * pqx + pqy * pqy,
              t=pqx * dx + pqy * dy,
              _h2_=t$2[9] * t$2[9],
              t$0=0. < d?t / d:t,
              t$1=t$0 < 0.?0.:1. < t$0?1.:t$0,
              dx$0=x0 + t$1 * pqx - x1,
              dy$0=y0 + t$1 * pqy - y1;
             if(! (dx$0 * dx$0 + dy$0 * dy$0 < _h2_) && ! (radius < t$2[9]))
              {var
                dx0=x0 - x1,
                dy0=y0 - y1,
                dx1=x2 - x1,
                dy1=y2 - y1,
                match=normalize(dx0,dy0),
                dy0$0=match[3],
                dx0$0=match[2],
                match$0=normalize(dx1,dy1),
                dy1$0=match$0[3],
                dx1$0=match$0[2],
                a=Math.acos(dx0$0 * dx1$0 + dy0$0 * dy1$0),
                d$0=radius / Math.tan(a / 2.);
               if(10000. < d$0)return line_to(t$2,x1,y1);
               if(0. < dx1$0 * dy0$0 + dx0$0 * dy1$0)
                {var
                  cx=x1 + dx0$0 * d$0 + dy0$0 * radius,
                  cy=y1 + dy0$0 * d$0 + - dx0$0 * radius,
                  a0=Math.atan2(dx0$0,- dy0$0),
                  a1=Math.atan2(- dx1$0,dy1$0);
                 return arc(t$2,cx,cy,radius,a0,a1,1)}
               var
                cx$0=x1 + dx0$0 * d$0 + - dy0$0 * radius,
                cy$0=y1 + dy0$0 * d$0 + dx0$0 * radius,
                a0$0=Math.atan2(- dx0$0,dy0$0),
                a1$0=Math.atan2(dx1$0,- dy1$0);
               return arc(t$2,cx$0,cy$0,radius,a0$0,a1$0,0)}}
           return line_to(t$2,x1,y1)}
         function ellipse(t,cx,cy,rx,ry)
          {function bz_to(c1x,c1y,c2x,c2y,x,y)
            {return add_command(t,[2,c1x,c1y,c2x,c2y,x,y])}
           add_command(t,[0,cx - rx,cy]);
           bz_to
            (cx - rx,
             cy + ry * 0.5522847493,
             cx - rx * 0.5522847493,
             cy + ry,
             cx,
             cy + ry);
           bz_to
            (cx + rx * 0.5522847493,
             cy + ry,
             cx + rx,
             cy + ry * 0.5522847493,
             cx + rx,
             cy);
           bz_to
            (cx + rx,
             cy - ry * 0.5522847493,
             cx + rx * 0.5522847493,
             cy - ry,
             cx,
             cy - ry);
           bz_to
            (cx - rx * 0.5522847493,
             cy - ry,
             cx - rx,
             cy - ry * 0.5522847493,
             cx - rx,
             cy);
           return add_command(t,0)}
         function circle(t,cx,cy,r){return ellipse(t,cx,cy,r,r)}
         function sign(a){return 0. <= a?1.:-1.}
         function rounded_rect_varying
          (t,x,y,w,h,top_left,top_right,bot_left,bot_right)
          {if
            (top_left
             <
             0.1
             &&
             top_right
             <
             0.1
             &&
             bot_left
             <
             0.1
             &&
             bot_right
             <
             0.1)
            return rect(t,x,y,w,h);
           function bz_to(c1x,c1y,c2x,c2y,x,y)
            {return add_command(t,[2,c1x,c1y,c2x,c2y,x,y])}
           function line_to(x,y){return add_command(t,[1,x,y])}
           var
            halfw=Math.abs(w) * 0.5,
            halfh=Math.abs(h) * 0.5,
            _hU_=sign(w),
            rxBL=min$0(bot_left,halfw) * _hU_,
            _hV_=sign(h),
            ryBL=min$0(bot_left,halfh) * _hV_,
            _hW_=sign(w),
            rxBR=min$0(bot_right,halfw) * _hW_,
            _hX_=sign(h),
            ryBR=min$0(bot_right,halfh) * _hX_,
            _hY_=sign(w),
            rxTR=min$0(top_right,halfw) * _hY_,
            _hZ_=sign(h),
            ryTR=min$0(top_right,halfh) * _hZ_,
            _h0_=sign(w),
            rxTL=min$0(top_left,halfw) * _h0_,
            _h1_=sign(h),
            ryTL=min$0(top_left,halfh) * _h1_;
           add_command(t,[0,x,y + ryTL]);
           line_to(x,y + h - ryBL);
           bz_to
            (x,
             y + h - ryBL * 0.447715250699999956,
             x + rxBL * 0.447715250699999956,
             y + h,
             x + rxBL,
             y + h);
           line_to(x + w - rxBR,y + h);
           bz_to
            (x + w - rxBR * 0.447715250699999956,
             y + h,
             x + w,
             y + h - ryBR * 0.447715250699999956,
             x + w,
             y + h - ryBR);
           line_to(x + w,y + ryTR);
           bz_to
            (x + w,
             y + ryTR * 0.447715250699999956,
             x + w - rxTR * 0.447715250699999956,
             y,
             x + w - rxTR,
             y);
           line_to(x + rxTL,y);
           bz_to
            (x + rxTL * 0.447715250699999956,
             y,
             x,
             y + ryTL * 0.447715250699999956,
             x,
             y + ryTL);
           return add_command(t,0)}
         function rounded_rect(t,x,y,w,h,r)
          {return rounded_rect_varying(t,x,y,w,h,r,r,r,r)}
         function flatten(t$1)
          {var _hE_=0 === t$1[7][2][3]?1:0;
           if(_hE_)
            {var _hG_=t$1[2][3] - 1 | 0,_hF_=0;
             if(! (_hG_ < 0))
              {var i$2=_hF_;
               for(;;)
                {var match$0=get$0(t$1[2],i$2);
                 if(typeof match$0 === "number")
                  {var path=last_path(t$1);path[3] = 1}
                 else
                  switch(match$0[0])
                   {case 0:
                     var y$0=match$0[2],x$0=match$0[1];
                     add_path(t$1);
                     add_point(t$1,x$0,y$0,typ);
                     break;
                    case 1:
                     var y$1=match$0[2],x$1=match$0[1];
                     add_point(t$1,x$1,y$1,typ);
                     break;
                    case 2:
                     var
                      y$2=match$0[6],
                      x$2=match$0[5],
                      c2y=match$0[4],
                      c2x=match$0[3],
                      c1y=match$0[2],
                      c1x=match$0[1],
                      pts=t$1[7][1],
                      last_x=pts[2][1 + ((pts[3] - 1 | 0) * 7 | 0)],
                      last_y=pts[2][1 + (((pts[3] - 1 | 0) * 7 | 0) + 1 | 0)];
                     if(t$1[5])
                      {var
                        ax$0=- last_x + 3. * c1x - 3. * c2x + x$2,
                        ay$0=- last_y + 3. * c1y - 3. * c2y + y$2,
                        bx$0=3. * last_x - 6. * c1x + 3. * c2x,
                        by$0=3. * last_y - 6. * c1y + 3. * c2y,
                        cx$0=-3. * last_x + 3. * c1x,
                        cy$0=-3. * last_y + 3. * c1y,
                        px=[0,last_x],
                        py=[0,last_y],
                        dx$0=[0,ax$0 + bx$0 + cx$0],
                        dy$0=[0,ay$0 + by$0 + cy$0],
                        ddx=[0,6. * ax$0 + 2. * bx$0],
                        ddy=[0,6. * ay$0 + 2. * by$0],
                        dddx=[0,6. * ax$0],
                        dddy=[0,6. * ay$0],
                        i=[0,0],
                        dt=[0,1024],
                        tol=t$1[8] * 12.;
                       b:
                       for(;;)
                        {if(i[1] < 1024)
                          {var
                            d$0=
                             [0,
                              ddx[1]
                              *
                              ddx[1]
                              +
                              ddy[1]
                              *
                              ddy[1]
                              +
                              dddx[1]
                              *
                              dddx[1]
                              +
                              dddy[1]
                              *
                              dddy[1]];
                           for(;;)
                            {var switch$0=0;
                             if(! (tol < d$0[1]) || ! (1 < dt[1]))switch$0 = 1;
                             if(switch$0 && ! (1024 < (i[1] + dt[1] | 0)))
                              for(;;)
                               {if
                                 (0.
                                  <
                                  d$0[1]
                                  &&
                                  d$0[1]
                                  <
                                  tol
                                  /
                                  10.
                                  &&
                                  dt[1]
                                  <
                                  1024
                                  &&
                                  (i[1] + (2 * dt[1] | 0) | 0)
                                  <=
                                  1024)
                                 {dx$0[1] = 2. * dx$0[1] + ddx[1];
                                  dy$0[1] = 2. * dy$0[1] + ddy[1];
                                  ddx[1] = 4. * ddx[1] + 4. * dddx[1];
                                  ddy[1] = 4. * ddy[1] + 4. * dddy[1];
                                  dddx[1] = 8. * dddx[1];
                                  dddy[1] = 8. * dddy[1];
                                  dt[1] = dt[1] << 1;
                                  d$0[1]
                                  =
                                  ddx[1]
                                  *
                                  ddx[1]
                                  +
                                  ddy[1]
                                  *
                                  ddy[1]
                                  +
                                  dddx[1]
                                  *
                                  dddx[1]
                                  +
                                  dddy[1]
                                  *
                                  dddy[1];
                                  continue}
                                px[1] = px[1] + dx$0[1];
                                py[1] = py[1] + dy$0[1];
                                dx$0[1] = dx$0[1] + ddx[1];
                                dy$0[1] = dy$0[1] + ddy[1];
                                ddx[1] = ddx[1] + dddx[1];
                                ddy[1] = ddy[1] + dddy[1];
                                var typ$0=0 < i[1]?typ:no_flags$1;
                                add_point(t$1,px[1],py[1],typ$0);
                                i[1] = i[1] + dt[1] | 0;
                                continue b}
                             dx$0[1] = 0.5 * dx$0[1] - 0.125 * ddx[1] + 0.0625 * dddx[1];
                             dy$0[1] = 0.5 * dy$0[1] - 0.125 * ddy[1] + 0.0625 * dddy[1];
                             ddx[1] = 0.25 * ddx[1] - 0.125 * dddx[1];
                             ddy[1] = 0.25 * ddy[1] - 0.125 * dddy[1];
                             dddx[1] = 0.125 * dddx[1];
                             dddy[1] = 0.125 * dddy[1];
                             dt[1] = dt[1] >>> 1 | 0;
                             d$0[1]
                             =
                             ddx[1]
                             *
                             ddx[1]
                             +
                             ddy[1]
                             *
                             ddy[1]
                             +
                             dddx[1]
                             *
                             dddx[1]
                             +
                             dddy[1]
                             *
                             dddy[1];
                             continue}}
                         break}}
                     else
                      tesselate_bezier
                       (t$1,last_x,last_y,c1x,c1y,c2x,c2y,x$2,y$2,0,typ);
                     break;
                    default:var w=match$0[1],path$0=last_path(t$1);path$0[7] = w}
                 var _hT_=i$2 + 1 | 0;
                 if(_hG_ !== i$2){var i$2=_hT_;continue}
                 break}}
             var
              xmin=[0,1000000.],
              ymin=[0,1000000.],
              xmax=[0,-1000000.],
              ymax=[0,-1000000.],
              points=t$1[7][1],
              _hI_=t$1[7][2][3] - 1 | 0,
              _hH_=0;
             if(! (_hI_ < 0))
              {var i$1=_hH_;
               for(;;)
                {var
                  path$1=get$0(t$1[7][2],i$1),
                  get$1=
                   function(path)
                    {function get(i){return path[1] + i | 0}return get},
                  get=get$1(path$1),
                  p0$0=[0,get(path$1[2] - 1 | 0)],
                  idx2$0=get(0),
                  idx1=p0$0[1] * 7 | 0,
                  idx2=idx2$0 * 7 | 0,
                  data=points[2],
                  x1=data[1 + idx1],
                  x2=data[1 + idx2],
                  y1=data[1 + (idx1 + 1 | 0)],
                  y2=data[1 + (idx2 + 1 | 0)];
                 if(equals(x1,y1,x2,y2,t$1[9]))
                  {path$1[2] = path$1[2] - 1 | 0;
                   p0$0[1] = get(path$1[2] - 1 | 0);
                   path$1[3] = 1}
                 if(2 < path$1[2])
                  {var
                    _hK_=path$1[1],
                    area=[0,0.],
                    _hC_=path$1[2] - 1 | 0,
                    _hB_=2;
                   if(! (_hC_ < 2))
                    {var i$0=_hB_;
                     for(;;)
                      {var
                        c$0=_hK_ + i$0 | 0,
                        b$0=(_hK_ + i$0 | 0) - 1 | 0,
                        t$0=points[2],
                        a=_hK_ * 7 | 0,
                        ax=t$0[1 + a],
                        ay=t$0[1 + (a + 1 | 0)],
                        b=b$0 * 7 | 0,
                        bx=t$0[1 + b],
                        by=t$0[1 + (b + 1 | 0)],
                        c=c$0 * 7 | 0,
                        cx=t$0[1 + c],
                        cy=t$0[1 + (c + 1 | 0)],
                        abx=bx - ax,
                        aby=by - ay,
                        acx=cx - ax,
                        acy=cy - ay;
                       area[1] = area[1] + (acx * aby - abx * acy);
                       var _hD_=i$0 + 1 | 0;
                       if(_hC_ !== i$0){var i$0=_hD_;continue}
                       break}}
                   var
                    area$0=area[1] * 0.5,
                    _hL_=equal(path$1[7],0),
                    _hM_=_hL_?area$0 < 0.?1:0:_hL_;
                   if(_hM_)poly_reverse(points,path$1[1],path$1[2]);
                   var _hN_=equal(path$1[7],1),_hO_=_hN_?0. < area$0?1:0:_hN_;
                   if(_hO_)poly_reverse(points,path$1[1],path$1[2])}
                 var p1_off=[0,0];
                 p0$0[1] = get(path$1[2] - 1 | 0);
                 var _hQ_=path$1[2] - 1 | 0,_hP_=0;
                 if(! (_hQ_ < 0))
                  {var for$0=_hP_;
                   for(;;)
                    {var
                      p1$0=get(p1_off[1]),
                      data$0=points[2],
                      p0=p0$0[1] * 7 | 0,
                      p1=p1$0 * 7 | 0,
                      x0=data$0[1 + p0],
                      x1$0=data$0[1 + p1],
                      y0=data$0[1 + (p0 + 1 | 0)],
                      y1$0=data$0[1 + (p1 + 1 | 0)];
                     set$2(data$0,p0 + 2 | 0,x1$0 - x0);
                     set$2(data$0,p0 + 3 | 0,y1$0 - y0);
                     var
                      idx=p0$0[1] * 7 | 0,
                      t=points[2],
                      dx=t[1 + (idx + 2 | 0)],
                      dy=t[1 + (idx + 3 | 0)],
                      d=Math.sqrt(dx * dx + dy * dy);
                     set$2(t,idx + 4 | 0,d);
                     if(1e-06 < d)
                      {var id=1. / d;
                       set$2(t,idx + 2 | 0,dx * id);
                       set$2(t,idx + 3 | 0,dy * id)}
                     var match=get_xy(points,p0$0[1]),y=match[2],x=match[1];
                     xmin[1] = min$1(xmin[1],x);
                     ymin[1] = min$1(ymin[1],y);
                     xmax[1] = max$0(xmax[1],x);
                     ymax[1] = max$0(ymax[1],y);
                     p0$0[1] = get(p1_off[1]);
                     p1_off[1]++;
                     var _hS_=for$0 + 1 | 0;
                     if(_hQ_ !== for$0){var for$0=_hS_;continue}
                     break}}
                 var _hR_=i$1 + 1 | 0;
                 if(_hI_ !== i$1){var i$1=_hR_;continue}
                 break}}
             t$1[7][4] = [254,xmin[1],ymin[1],xmax[1],ymax[1]];
             var _hJ_=0}
           else
            var _hJ_=_hE_;
           return _hJ_}
         function reset$2(t)
          {var t$0=get_state(t);
           t$0[1] = of_composite_operation(0);
           t$0[2] = 0;
           t$0[3] = create$2(0);
           t$0[4] = create$2(0);
           t$0[5] = 1.;
           t$0[6] = 0.;
           t$0[7] = 0;
           t$0[8] = 0;
           t$0[9] = 1.;
           identity(t$0[10]);
           t$0[11] = create$1(0);
           t$0[12] = 16.;
           t$0[13] = 0.;
           t$0[14] = 1.;
           t$0[15] = 0.;
           t$0[16] = left;
           t$0[17] = 0;
           set_color(t$0[3],white);
           set_color(t$0[4],black);
           t$0[1] = of_composite_operation(0);
           t$0[2] = 1;
           t$0[5] = 1.;
           t$0[6] = 10.;
           t$0[8] = 0;
           t$0[7] = 0;
           t$0[9] = 1.;
           identity(t$0[10]);
           t$0[11] = [0,create$0(0),-1.,-1.];
           t$0[12] = 16.;
           t$0[13] = 0.;
           t$0[14] = 1.;
           t$0[15] = 0.;
           t$0[16] = left;
           t$0[17] = 0;
           return 0}
         function begin_frame(t,width,height,device_ratio)
          {clear$0(0,t[6]);
           save(t);
           reset$2(t);
           set_device_pixel_ratio(t,device_ratio);
           var _hA_=t[1];
           _hA_[12][0] = width;
           _hA_[12][1] = height;
           t[15] = 0;
           t[16] = 0;
           t[17] = 0;
           t[18] = 0;
           t[7][3][2] = 0;
           return 0}
         function cancel_frame(t){return cancel(t[1])}
         function calculate_joins(t,w,line_join,miter_limit)
          {var
            iw=0. < w?1. / w:0.,
            data=t[7][1][2],
            flags=t[7][1][1],
            _hp_=t[7][2][3] - 1 | 0,
            _ho_=0;
           if(! (_hp_ < 0))
            {var i=_ho_;
             for(;;)
              {var
                path=get$0(t[7][2],i),
                get$1=
                 function(path)
                  {function get(idx){return path[1] + idx | 0}return get},
                get=get$1(path),
                p0_off=[0,path[2] - 1 | 0],
                p1_off=[0,0],
                left=[0,0];
               path[4] = 0;
               var _hr_=path[2] - 1 | 0,_hq_=0;
               if(! (_hr_ < 0))
                {var for$0=_hq_;
                 for(;;)
                  {var
                    p0=get(p0_off[1]),
                    idx=get(p1_off[1]),
                    dlx0=get_dy(data,p0),
                    dly0=- get_dx(data,p0),
                    dlx1=get_dy(data,idx),
                    dly1=- get_dx(data,idx),
                    dmx=(dlx0 + dlx1) * 0.5,
                    dmy=(dly0 + dly1) * 0.5;
                   set_dmx(data,idx,dmx);
                   set_dmy(data,idx,dmy);
                   var dmr2=dmx * dmx + dmy * dmy;
                   if(1e-06 < dmr2)
                    {var s=1. / dmr2,scale=600. < s?600.:s;
                     set_dmx(data,idx,dmx * scale);
                     set_dmy(data,idx,dmy * scale)}
                   var _ht_=has_flag(flags,idx,typ)?typ:no_flags$1;
                   flags[1 + idx] = _ht_;
                   var
                    dx1=get_dx(data,idx),
                    dy1=get_dy(data,idx),
                    dx0=get_dx(data,p0),
                    dy0=get_dy(data,p0),
                    cross=dx1 * dy0 - dx0 * dy1;
                   if(0. < cross){left[1]++;add_flag(flags,idx,left$0)}
                   var
                    len0=len(data,p0),
                    len1=len(data,idx),
                    limit=max$0(1.01,min$1(len0,len1) * iw);
                   if(dmr2 * limit * limit < 1.)
                    add_flag(flags,idx,inner_bevel);
                   if(has_flag(flags,idx,typ))
                    {var _hu_=dmr2 * miter_limit * miter_limit < 1.?1:0;
                     if(_hu_)
                      var _hv_=_hu_;
                     else
                      var
                       _hz_=equal$1(line_join,1),
                       _hv_=_hz_ || equal$1(line_join,2);
                     if(_hv_)add_flag(flags,idx,bevel)}
                   var
                    _hw_=has_flag(flags,idx,bevel),
                    _hx_=_hw_ || has_flag(flags,idx,inner_bevel);
                   if(_hx_)path[4] = path[4] + 1 | 0;
                   p0_off[1] = p1_off[1];
                   p1_off[1]++;
                   var _hy_=for$0 + 1 | 0;
                   if(_hr_ !== for$0){var for$0=_hy_;continue}
                   break}}
               path[8] = left[1] === path[2]?1:0;
               var _hs_=i + 1 | 0;
               if(_hp_ !== i){var i=_hs_;continue}
               break}}
           return 0}
         function choose_bevel(bevel,data,p0,p1,w)
          {var p1x=get_x(data,p1),p1y=get_y(data,p1);
           if(bevel)
            {var
              p1dx=get_dx(data,p1),
              p1dy=get_dy(data,p1),
              p0dx=get_dx(data,p0),
              p0dy=get_dy(data,p0),
              x0=p1x + p0dy * w,
              y0=p1y - p0dx * w,
              x1=p1x + p1dy * w,
              y1=p1y - p1dx * w;
             return [0,x0,y0,x1,y1]}
           var
            p1dmx=get_dmx(data,p1),
            p1dmy=get_dmy(data,p1),
            x0$0=p1x + p1dmx * w,
            y0$0=p1y + p1dmy * w,
            x1$0=p1x + p1dmx * w,
            y1$0=p1y + p1dmy * w;
           return [0,x0$0,y0$0,x1$0,y1$0]}
         function bevel_join(verts,offset,points,p0,p1,lw,rw,lu,ru)
          {var data=points[2],flags=points[1],offset$0=[0,offset];
           function set(x,y,u,v)
            {set$0(verts,offset$0[1],x,y,u,v);offset$0[1]++;return 0}
           var
            dlx0=get_dy(data,p0),
            dly0=- get_dx(data,p0),
            dlx1=get_dy(data,p1),
            dly1=- get_dx(data,p1),
            p1x=get_x(data,p1),
            p1y=get_y(data,p1),
            inner=has_flag(flags,p1,inner_bevel);
           if(has_flag(flags,p1,left$0))
            {var
              match=choose_bevel(inner,data,p0,p1,lw),
              ly1=match[4],
              lx1=match[3],
              ly0=match[2],
              lx0=match[1];
             set(lx0,ly0,lu,1.);
             set(p1x - dlx0 * rw,p1y - dly0 * rw,ru,1.);
             if(has_flag(flags,p1,bevel))
              {set(lx0,ly0,lu,1.);
               set(p1x - dlx0 * rw,p1y - dly0 * rw,ru,1.);
               set(lx1,ly1,lu,1.);
               set(p1x - dlx1 * rw,p1y - dly1 * rw,ru,1.)}
             else
              {var
                rx0=p1x - get_dmx(data,p1) * rw,
                ry0=p1y - get_dmy(data,p1) * rw;
               set(p1x,p1y,0.5,1.);
               set(p1x - dlx0 * rw,p1y - dly0 * rw,ru,1.);
               set(rx0,ry0,ru,1.);
               set(rx0,ry0,ru,1.);
               set(p1x,p1y,0.5,1.);
               set(p1x - dlx1 * rw,p1y - dly1 * rw,ru,1.)}
             set(lx1,ly1,lu,1.);
             set(p1x - dlx1 * rw,p1y - dly1 * rw,ru,1.)}
           else
            {var
              match$0=choose_bevel(inner,data,p0,p1,- rw),
              ry1=match$0[4],
              rx1=match$0[3],
              ry0$0=match$0[2],
              rx0$0=match$0[1];
             set(p1x + dlx0 * lw,p1y + dly0 * lw,lu,1.);
             set(rx0$0,ry0$0,ru,1.);
             if(has_flag(flags,p1,bevel))
              {set(p1x + dlx0 * lw,p1y + dly0 * lw,lu,1.);
               set(rx0$0,ry0$0,ru,1.);
               set(p1x + dlx1 * lw,p1y + dly1 * lw,lu,1.);
               set(rx1,ry1,ru,1.)}
             else
              {var
                lx0$0=p1x + get_dmx(data,p1) * lw,
                ly0$0=p1y + get_dmy(data,p1) * lw;
               set(p1x + dlx0 * lw,p1y + dly0 * lw,lu,1.);
               set(p1x,p1y,0.5,1.);
               set(lx0$0,ly0$0,lu,1.);
               set(lx0$0,ly0$0,lu,1.);
               set(p1x + dlx1 * lw,p1y + dly1 * lw,lu,1.);
               set(p1x,p1y,0.5,1.)}
             set(p1x + dlx1 * lw,p1y + dly1 * lw,lu,1.);
             set(rx1,ry1,ru,1.)}
           return offset$0[1]}
         function expand_fill(t,w,line_join,miter_limit)
          {var aa=t[10],fringe=0. < w?1:0;
           calculate_joins(t,w,line_join,miter_limit);
           var
            _g9_=1 === t[7][2][3]?1:0,
            convex=_g9_?t[7][2][2][1][8]:_g9_,
            points=t[7][1],
            flags=points[1],
            data=points[2],
            woff=0.5 * aa,
            verts=[0,t[7][3][2]],
            dst=[0,verts[1]],
            _g$_=t[7][2][3] - 1 | 0,
            _g__=0;
           if(! (_g$_ < 0))
            {var i=_g__;
             for(;;)
              {var path=get$0(t[7][2],i);
               dst[1] = verts[1];
               var
                get_pt$0=
                 function(path)
                  {function get_pt(idx){return path[1] + idx | 0}
                   return get_pt},
                get_pt=get_pt$0(path);
               if(fringe)
                {var
                  p0=[0,get_pt(path[2] - 1 | 0)],
                  p1_off=[0,0],
                  _hb_=path[2] - 1 | 0,
                  _ha_=0;
                 if(! (_hb_ < 0))
                  {var for$1=_ha_;
                   for(;;)
                    {var p1$0=get_pt(p1_off[1]);
                     if(has_flag(flags,p1$0,bevel))
                      if(has_flag(flags,p1$0,left$0))
                       {var
                         _hg_=get_dmx(data,p1$0) * woff,
                         lx=get_x(data,p1$0) + _hg_,
                         _hh_=get_dmy(data,p1$0) * woff,
                         ly=get_y(data,p1$0) + _hh_;
                        set$0(t[7][3],dst[1],lx,ly,0.5,1.);
                        dst[1]++}
                      else
                       {var
                         dy0=get_dy(data,p0[1]),
                         dly0=- dy0,
                         dlx1=get_dy(data,p1$0),
                         dly1=- get_dx(data,p1$0),
                         p1x$0=get_x(data,p1$0),
                         p1y$0=get_y(data,p1$0),
                         lx0=p1x$0 + dy0 * woff,
                         ly0=p1y$0 + dly0 * woff,
                         lx1=p1x$0 + dlx1 * woff,
                         ly1=p1y$0 + dly1 * woff;
                        check_size(t[7][3],dst[1] + 1 | 0);
                        unsafe_set(t[7][3],dst[1],lx0,ly0,0.5,1.);
                        unsafe_set(t[7][3],dst[1] + 1 | 0,lx1,ly1,0.5,1.);
                        dst[1] = dst[1] + 2 | 0}
                     else
                      {var
                        _hj_=get_dmx(data,p1$0) * woff,
                        x$1=get_x(data,p1$0) + _hj_,
                        _hk_=get_dmy(data,p1$0) * woff,
                        y$1=get_y(data,p1$0) + _hk_;
                       set$0(t[7][3],dst[1],x$1,y$1,0.5,1.);
                       dst[1]++}
                     p0[1] = p1$0;
                     p1_off[1]++;
                     var _hi_=for$1 + 1 | 0;
                     if(_hb_ !== for$1){var for$1=_hi_;continue}
                     break}}}
               else
                {check_size(t[7][3],dst[1] + path[2] | 0);
                 var _hm_=path[2] - 1 | 0,_hl_=0;
                 if(! (_hm_ < 0))
                  {var j=_hl_;
                   for(;;)
                    {var
                      point=get_pt(j),
                      match$1=get_xy(points,point),
                      y$2=match$1[2],
                      x$2=match$1[1];
                     unsafe_set(t[7][3],dst[1] + j | 0,x$2,y$2,0.5,1.);
                     var _hn_=j + 1 | 0;
                     if(_hm_ !== j){var j=_hn_;continue}
                     break}}
                 dst[1] = dst[1] + path[2] | 0}
               var nfill=dst[1] - verts[1] | 0;
               path[5] = [0,verts[1],nfill,t[7][3]];
               verts[1] = dst[1];
               var flag=12;
               if(fringe)
                {if(convex)var lu=0.5,lw=woff;else var lu=0.,lw=w + woff;
                 var rw=w - woff;
                 dst[1] = verts[1];
                 var
                  p1_off$0=[0,0],
                  p0$0=[0,get_pt(path[2] - 1 | 0)],
                  _hd_=path[2] - 1 | 0,
                  ru=1.,
                  _hc_=0;
                 if(! (_hd_ < 0))
                  {var for$0=_hc_;
                   for(;;)
                    {var p1=get_pt(p1_off$0[1]);
                     if(has_flag(flags,p1,flag))
                      dst[1]
                      =
                      bevel_join(t[7][3],dst[1],t[7][1],p0$0[1],p1,lw,rw,lu,ru);
                     else
                      {check_size(t[7][3],dst[1] + 2 | 0);
                       var
                        p1x=get_x(data,p1),
                        p1y=get_y(data,p1),
                        p1dmx=get_dmx(data,p1),
                        p1dmy=get_dmy(data,p1),
                        x=p1x + p1dmx * lw,
                        y=p1y + p1dmy * lw;
                       unsafe_set(t[7][3],dst[1],x,y,lu,1.);
                       var x$0=p1x - p1dmx * rw,y$0=p1y - p1dmy * rw;
                       unsafe_set(t[7][3],dst[1] + 1 | 0,x$0,y$0,ru,1.);
                       dst[1] = dst[1] + 2 | 0}
                     p0$0[1] = p1;
                     p1_off$0[1]++;
                     var _hf_=for$0 + 1 | 0;
                     if(_hd_ !== for$0){var for$0=_hf_;continue}
                     break}}
                 check_size(t[7][3],dst[1] + 2 | 0);
                 var
                  match=get$1(t[7][3],verts[1]),
                  v0_y=match[2],
                  v0_x=match[1];
                 unsafe_set(t[7][3],dst[1],v0_x,v0_y,lu,1.);
                 var
                  match$0=get$1(t[7][3],verts[1] + 1 | 0),
                  v1_y=match$0[2],
                  v1_x=match$0[1];
                 unsafe_set(t[7][3],dst[1] + 1 | 0,v1_x,v1_y,ru,1.);
                 dst[1] = dst[1] + 2 | 0;
                 var nstroke=dst[1] - verts[1] | 0;
                 if(! (0 < nstroke))throw [0,Assert_failure,_bO_];
                 path[6] = [0,verts[1],nstroke,t[7][3]];
                 verts[1] = dst[1]}
               else
                path[6] = empty$3;
               var _he_=i + 1 | 0;
               if(_g$_ !== i){var i=_he_;continue}
               break}}
           return 0}
         function butt_cap_start(verts,dst,px,py,dx,dy,w,d,aa,u0,u1)
          {var after=dst + 4 | 0,px$0=px - dx * d,py$0=py - dy * d,dly=- dx;
           check_size(verts,dst + 3 | 0);
           unsafe_set
            (verts,
             dst | 0,
             px$0 + dy * w - dx * aa,
             py$0 + dly * w - dy * aa,
             u0,
             0.);
           unsafe_set
            (verts,
             dst + 1 | 0,
             px$0 - dy * w - dx * aa,
             py$0 - dly * w - dy * aa,
             u1,
             0.);
           unsafe_set(verts,dst + 2 | 0,px$0 + dy * w,py$0 + dly * w,u0,1.);
           unsafe_set(verts,dst + 3 | 0,px$0 - dy * w,py$0 - dly * w,u1,1.);
           return after}
         function butt_cap_end(verts,dst,px,py,dx,dy,w,d,aa,u0,u1)
          {var after=dst + 4 | 0,px$0=px + dx * d,py$0=py + dy * d,dly=- dx;
           check_size(verts,dst + 3 | 0);
           unsafe_set(verts,dst | 0,px$0 + dy * w,py$0 + dly * w,u0,1.);
           unsafe_set(verts,dst + 1 | 0,px$0 - dy * w,py$0 - dly * w,u1,1.);
           unsafe_set
            (verts,
             dst + 2 | 0,
             px$0 + dy * w + dx * aa,
             py$0 + dly * w + dy * aa,
             u0,
             0.);
           unsafe_set
            (verts,
             dst + 3 | 0,
             px$0 - dy * w + dx * aa,
             py$0 - dly * w + dy * aa,
             u1,
             0.);
           return after}
         function clamp(v,min,max)
          {return caml_lessthan(v,min)?min:caml_greaterthan(v,max)?max:v}
         function expand_stroke(t,w,aa,line_cap,line_join,miter_limit)
          {var
            da=Math.acos(w / (w + t[8])) * 2.,
            ncap=imax(2,Math.ceil(3.14159265358979312 / da) | 0),
            lw=w + aa * 0.5;
           if(aa == 0.)var u1=0.5,u0=0.5;else var u1=1.,u0=0.;
           calculate_joins(t,lw,line_join,miter_limit);
           var
            verts=[0,t[7][3][2]],
            data$0=t[7][1][2],
            flags$0=t[7][1][1],
            dst=[0,verts[1]],
            _gZ_=t[7][2][3] - 1 | 0,
            _gY_=0;
           if(! (_gZ_ < 0))
            {var i$3=_gY_;
             a:
             for(;;)
              {var
                path=get$0(t[7][2],i$3),
                get$2=
                 function(path)
                  {function get(idx){return path[1] + idx | 0}return get},
                get=get$2(path);
               path[5] = empty$3;
               dst[1] = verts[1];
               var
                s=[0,0],
                e=[0,path[2]],
                p0_off=[0,path[2] - 1 | 0],
                p1_off=[0,0];
               if(1 - path[3])
                {p0_off[1] = 0;
                 p1_off[1] = 1;
                 s[1] = 1;
                 e[1] = path[2] - 1 | 0;
                 var
                  p0=get(p0_off[1]),
                  p1=get(p1_off[1]),
                  _g0_=get_x(data$0,p0),
                  dx=get_x(data$0,p1) - _g0_,
                  _g1_=get_y(data$0,p0),
                  dy=get_y(data$0,p1) - _g1_,
                  match$1=normalize(dx,dy),
                  dy$0=match$1[3],
                  dx$0=match$1[2],
                  px=get_x(data$0,p0),
                  py=get_y(data$0,p0);
                 switch(line_cap)
                  {case 0:
                    dst[1]
                    =
                    butt_cap_start
                     (t[7][3],dst[1],px,py,dx$0,dy$0,lw,- aa * 0.5,aa,u0,u1);
                    break;
                   case 1:
                    var _g8_=t[7][3],dly=- dx$0,i=[0,0];
                    for(;;)
                     {if(i[1] < ncap)
                       {var
                         a=i[1] / (ncap - 1 | 0) * 3.14159265358979312,
                         ax=Math.cos(a) * lw,
                         ay=Math.sin(a) * lw;
                        set$0
                         (_g8_,
                          dst[1],
                          px - dy$0 * ax - dx$0 * ay,
                          py - dly * ax - dy$0 * ay,
                          u0,
                          1.);
                        dst[1]++;
                        set$0(_g8_,dst[1],px,py,0.5,1.);
                        dst[1]++;
                        i[1]++;
                        continue}
                      set$0(_g8_,dst[1],px + dy$0 * lw,py + dly * lw,u0,1.);
                      dst[1]++;
                      set$0(_g8_,dst[1],px - dy$0 * lw,py - dly * lw,u1,1.);
                      dst[1]++;
                      break}
                    break;
                   case 2:
                    dst[1]
                    =
                    butt_cap_start
                     (t[7][3],dst[1],px,py,dx$0,dy$0,lw,lw - aa,aa,u0,u1);
                    break
                   }}
               var j=[0,s[1]];
               for(;;)
                {if(j[1] < e[1])
                  {var p0$0=get(p0_off[1]),p1$0=get(p1_off[1]),switch$0=0;
                   if
                    (has_flag(flags$0,p1$0,bevel)
                     ||
                     has_flag(flags$0,p1$0,inner_bevel))
                    switch$0 = 1;
                   else
                    {var
                      p1x$1=get_x(data$0,p1$0),
                      p1y$1=get_y(data$0,p1$0),
                      p1dmx=get_dmx(data$0,p1$0),
                      p1dmy=get_dmy(data$0,p1$0);
                     set$0
                      (t[7][3],dst[1],p1x$1 + p1dmx * lw,p1y$1 + p1dmy * lw,u0,1.);
                     dst[1]++;
                     set$0
                      (t[7][3],dst[1],p1x$1 - p1dmx * lw,p1y$1 - p1dmy * lw,u1,1.);
                     dst[1]++}
                   if(switch$0)
                    if(equal$1(line_join,2))
                     {var
                       _g2_=t[7][1],
                       _g3_=t[7][3],
                       flags=_g2_[1],
                       data=_g2_[2],
                       dlx0=get_dy(data,p0$0),
                       dly0=- get_dx(data,p0$0),
                       dlx1=get_dy(data,p1$0),
                       dly1=- get_dx(data,p1$0);
                      if(has_flag(flags,p1$0,left$0))
                       {var
                         inner=has_flag(flags,p1$0,inner_bevel),
                         match=choose_bevel(inner,data,p0$0,p1$0,lw),
                         ly1=match[4],
                         lx1=match[3],
                         ly0=match[2],
                         lx0=match[1],
                         a0=Math.atan2(- dly0,- dlx0),
                         a1=Math.atan2(- dly1,- dlx1),
                         a1$0=a0 < a1?a1 - 6.28318530717958623:a1,
                         p1x=get_x(data,p1$0),
                         p1y=get_y(data,p1$0);
                        set$0(_g3_,dst[1],lx0,ly0,u0,1.);
                        dst[1]++;
                        set$0(_g3_,dst[1],p1x - dlx0 * lw,p1y - dly0 * lw,u1,1.);
                        dst[1]++;
                        var
                         n=
                          clamp
                           (Math.ceil((a0 - a1$0) / 3.14159265358979312 * ncap) | 0,
                            2,
                            ncap),
                         _gT_=n - 1 | 0,
                         _gS_=0;
                        if(! (_gT_ < 0))
                         {var i$1=_gS_;
                          for(;;)
                           {var
                             u=i$1 / (n - 1.),
                             a$1=a0 + u * (a1$0 - a0),
                             rx=p1x + Math.cos(a$1) * lw,
                             ry=p1y + Math.sin(a$1) * lw;
                            set$0(_g3_,dst[1],p1x,p1y,0.5,1.);
                            dst[1]++;
                            set$0(_g3_,dst[1],rx,ry,u1,1.);
                            dst[1]++;
                            var _gU_=i$1 + 1 | 0;
                            if(_gT_ !== i$1){var i$1=_gU_;continue}
                            break}}
                        set$0(_g3_,dst[1],lx1,ly1,u0,1.);
                        dst[1]++;
                        set$0(_g3_,dst[1],p1x - dlx1 * lw,p1y - dly1 * lw,u1,1.);
                        dst[1]++}
                      else
                       {var
                         inner$0=has_flag(flags,p1$0,inner_bevel),
                         match$0=choose_bevel(inner$0,data,p0$0,p1$0,- lw),
                         ry1=match$0[4],
                         rx1=match$0[3],
                         ry0=match$0[2],
                         rx0=match$0[1],
                         a0$0=Math.atan2(dly0,dlx0),
                         a1$1=Math.atan2(dly1,dlx1),
                         a1$2=a1$1 < a0$0?a1$1 + 6.28318530717958623:a1$1,
                         p1x$0=get_x(data,p1$0),
                         p1y$0=get_y(data,p1$0);
                        set$0(_g3_,dst[1],p1x$0 + dlx0 * lw,p1y$0 + dly0 * lw,u0,1.);
                        dst[1]++;
                        set$0(_g3_,dst[1],rx0,ry0,u1,1.);
                        dst[1]++;
                        var
                         n$0=
                          clamp
                           (Math.ceil((a1$2 - a0$0) / 3.14159265358979312 * ncap) | 0,
                            2,
                            ncap),
                         _gW_=n$0 - 1 | 0,
                         _gV_=0;
                        if(! (_gW_ < 0))
                         {var i$2=_gV_;
                          for(;;)
                           {var
                             u$0=i$2 / (n$0 - 1 | 0),
                             a$2=a0$0 + u$0 * (a1$2 - a0$0),
                             lx=p1x$0 + Math.cos(a$2) * lw,
                             ly=p1y$0 + Math.sin(a$2) * lw;
                            set$0(_g3_,dst[1],lx,ly,u0,1.);
                            dst[1]++;
                            set$0(_g3_,dst[1],p1x$0,p1y$0,0.5,1.);
                            dst[1]++;
                            var _gX_=i$2 + 1 | 0;
                            if(_gW_ !== i$2){var i$2=_gX_;continue}
                            break}}
                        set$0(_g3_,dst[1],p1x$0 + dlx1 * lw,p1y$0 + dly1 * lw,u0,1.);
                        dst[1]++;
                        set$0(_g3_,dst[1],rx1,ry1,u1,1.);
                        dst[1]++}}
                    else
                     dst[1]
                     =
                     bevel_join(t[7][3],dst[1],t[7][1],p0$0,p1$0,lw,lw,u0,u1);
                   p0_off[1] = p1_off[1];
                   p1_off[1]++;
                   j[1]++;
                   continue}
                 if(path[3])
                  {var
                    match$2=get$1(t[7][3],verts[1]),
                    v0y=match$2[2],
                    v0x=match$2[1],
                    match$3=get$1(t[7][3],verts[1] + 1 | 0),
                    v1y=match$3[2],
                    v1x=match$3[1];
                   set$0(t[7][3],dst[1],v0x,v0y,u0,1.);
                   dst[1]++;
                   set$0(t[7][3],dst[1],v1x,v1y,u1,1.);
                   dst[1]++}
                 else
                  {var
                    p0$1=get(p0_off[1]),
                    p1$1=get(p1_off[1]),
                    _g5_=get_x(data$0,p0$1),
                    dx$1=get_x(data$0,p1$1) - _g5_,
                    _g6_=get_y(data$0,p0$1),
                    dy$1=get_y(data$0,p1$1) - _g6_,
                    match$4=normalize(dx$1,dy$1),
                    dy$2=match$4[3],
                    dx$2=match$4[2],
                    px$0=get_x(data$0,p1$1),
                    py$0=get_y(data$0,p1$1);
                   switch(line_cap)
                    {case 0:
                      dst[1]
                      =
                      butt_cap_end
                       (t[7][3],dst[1],px$0,py$0,dx$2,dy$2,lw,- aa * 0.5,aa,u0,u1);
                      break;
                     case 1:
                      var _g7_=t[7][3],i$0=[0,0],dly$0=- dx$2;
                      set$0(_g7_,dst[1],px$0 + dy$2 * lw,py$0 + dly$0 * lw,u0,1.);
                      dst[1]++;
                      set$0(_g7_,dst[1],px$0 - dy$2 * lw,py$0 - dly$0 * lw,u1,1.);
                      dst[1]++;
                      for(;;)
                       {if(i$0[1] < ncap)
                         {var
                           a$0=i$0[1] / (ncap - 1 | 0) * 3.14159265358979312,
                           ax$0=Math.cos(a$0) * lw,
                           ay$0=Math.sin(a$0) * lw;
                          set$0(_g7_,dst[1],px$0,py$0,0.5,1.);
                          dst[1]++;
                          set$0
                           (_g7_,
                            dst[1],
                            px$0 - dy$2 * ax$0 + dx$2 * ay$0,
                            py$0 - dly$0 * ax$0 + dy$2 * ay$0,
                            u0,
                            1.);
                          dst[1]++;
                          i$0[1]++;
                          continue}
                        break}
                      break;
                     case 2:
                      dst[1]
                      =
                      butt_cap_end
                       (t[7][3],dst[1],px$0,py$0,dx$2,dy$2,lw,lw - aa,aa,u0,u1);
                      break
                     }}
                 var len=dst[1] - verts[1] | 0;
                 path[6] = [0,verts[1],len,t[7][3]];
                 verts[1] = dst[1];
                 var _g4_=i$3 + 1 | 0;
                 if(_gZ_ !== i$3){var i$3=_g4_;continue a}
                 break}
               break}}
           return 0}
         function stroke_calc_width(t,state)
          {var
            scale=get_average_scale(state[10]),
            stroke_width=[0,clamp(state[5] * scale,0.,200.)],
            before=stroke_width[1];
           if(stroke_width[1] < t[10])stroke_width[1] = t[10];
           return [0,before,stroke_width[1]]}
         function stroke_prepare(t,state)
          {var
            match=stroke_calc_width(t,state),
            stroke_width=match[2],
            before=match[1];
           flatten(t);
           var switch$0=0;
           if(t[1][8] && state[2])
            {expand_stroke
              (t,stroke_width * 0.5,t[10],state[8],state[7],state[6]);
             switch$0 = 1}
           if(! switch$0)
            expand_stroke(t,stroke_width * 0.5,0.,state[8],state[7],state[6]);
           return before}
         function stroke_finish(t,state,stroke_width)
          {var paint=copy$2(state[4]),stroke_width$0=[0,stroke_width];
           if(stroke_width$0[1] < t[10])
            {var
              alpha=clamp(stroke_width$0[1] / t[10],0.,1.),
              alpha$0=alpha * alpha;
             modify_alpha(paint,alpha$0);
             stroke_width$0[1] = t[10]}
           modify_alpha(paint,state[9]);
           var
            _gM_=t[7][2],
            _gN_=stroke_width$0[1],
            _gO_=t[10],
            _gP_=state[11],
            _gR_=t[1],
            _gQ_=state[1],
            call=steal(_gR_[15],empty$5);
           reset$1(call,2);
           call[2] = paint[19] | 0;
           call[7] = of_composite_op_state(_gQ_);
           call[5] = -1;
           call[4] = -1;
           var _gK_=_gM_[3] - 1 | 0,_gJ_=0;
           if(! (_gK_ < 0))
            {var i=_gJ_;
             for(;;)
              {var path=get$0(_gM_,i),count=path[6][2];
               if(0 < count)
                add(call[8],[0,init$1[1],init$1[2],path[6][1],path[6][2]]);
               var _gL_=i + 1 | 0;
               if(_gK_ !== i){var i=_gL_;continue}
               break}}
           return has(_gR_[14],stencil_strokes)
                   ?(call[6]
                     =
                     make_slot(_gR_[13],2,_gR_[7]),
                     convert_paint(_gR_,call[6],paint,_gP_,_gN_,_gO_,-1.),
                     convert_paint
                      (_gR_,
                       call[6] + _gR_[7] | 0,
                       paint,
                       _gP_,
                       _gN_,
                       _gO_,
                       0.998039215686274517))
                   :(call[6]
                     =
                     make_slot(_gR_[13],1,_gR_[7]),
                     convert_paint(_gR_,call[6],paint,_gP_,_gN_,_gO_,-1.))}
         function stroke(t)
          {var state=get_state(t),stroke_width=stroke_prepare(t,state);
           return stroke_finish(t,state,stroke_width)}
         function fill_prepare(t,state)
          {flatten(t);
           if(t[1][8] && state[2])return expand_fill(t,t[10],0,2.4);
           return expand_fill(t,0.,0,2.4)}
         function fill_finish(t,state)
          {var paint=copy$2(state[3]);
           modify_alpha(paint,state[9]);
           var
            _gC_=t[7][3],
            _gD_=t[7][2],
            _gE_=t[7][4],
            _gF_=t[10],
            _gG_=state[11],
            _gI_=t[1],
            _gH_=state[1],
            call=steal(_gI_[15],empty$5);
           reset$1(call,0);
           var npaths=_gD_[3];
           call[5] = 4;
           call[3] = npaths;
           call[2] = paint[19] | 0;
           call[7] = of_composite_op_state(_gH_);
           var _gx_=1 === npaths?1:0,_gy_=_gx_?get$0(_gD_,0)[8]:_gx_;
           if(_gy_){call[1] = 1;call[5] = 0}
           var _gA_=_gD_[3] - 1 | 0,_gz_=0;
           if(! (_gA_ < 0))
            {var i=_gz_;
             for(;;)
              {var
                path=get$0(_gD_,i),
                fill_offset=[0,0],
                fill_count=[0,0],
                stroke_offset=[0,0],
                stroke_count=[0,0],
                nfill=path[5][2];
               if(0 < nfill)
                {fill_offset[1] = path[5][1];fill_count[1] = path[5][2]}
               var nstroke=path[6][2];
               if(0 < nstroke)
                {stroke_offset[1] = path[6][1];stroke_count[1] = path[6][2]}
               add
                (call[8],
                 [0,
                  fill_offset[1],
                  fill_count[1],
                  stroke_offset[1],
                  stroke_count[1]]);
               var _gB_=i + 1 | 0;
               if(_gA_ !== i){var i=_gB_;continue}
               break}}
           if(call[1])
            {call[6] = make_slot(_gI_[13],1,_gI_[7]);
             return convert_paint(_gI_,call[6],paint,_gG_,_gF_,_gF_,-1.)}
           var offset=_gC_[2];
           call[4] = offset;
           set$0(_gC_,offset,_gE_[3],_gE_[4],0.5,1.);
           set$0(_gC_,offset + 1 | 0,_gE_[3],_gE_[2],0.5,1.);
           set$0(_gC_,offset + 2 | 0,_gE_[1],_gE_[4],0.5,1.);
           set$0(_gC_,offset + 3 | 0,_gE_[1],_gE_[2],0.5,1.);
           call[6] = make_slot(_gI_[13],2,_gI_[7]);
           set_type(_gI_[13],call[6],simple);
           set_stroke_thr(_gI_[13],call[6],-1.);
           return convert_paint
                   (_gI_,call[6] + _gI_[7] | 0,paint,_gG_,_gF_,_gF_,-1.)}
         function fill(t)
          {var state=get_state(t);
           fill_prepare(t,state);
           return fill_finish(t,state)}
         function draw(t,tess,tx,ty)
          {var
            state=get_state(t),
            m=state[10],
            i=[0,0],
            len=caml_call1(Buffer[2][2],tess[1]) / 4 | 0,
            start=t[7][3][2];
           set$0(t[7][3],start + len | 0,0.,0.,0.,0.);
           var
            vbuff=t[7][3][1],
            off=[0,start * 4 | 0],
            xmin=[0,1000000.],
            ymin=[0,1000000.],
            xmax=[0,-1000000.],
            ymax=[0,-1000000.];
           for(;;)
            {if(i[1] < (len * 4 | 0))
              {var
                x=caml_call2(Buffer[2][3],tess[1],i[1]),
                y=caml_call2(Buffer[2][3],tess[1],i[1] + 1 | 0),
                u=caml_call2(Buffer[2][3],tess[1],i[1] + 2 | 0),
                v=caml_call2(Buffer[2][3],tess[1],i[1] + 3 | 0),
                x$0=x * m[1] + y * m[3] + m[5] + tx,
                y$0=x$0 * m[2] + y * m[4] + m[6] + ty;
               xmin[1] = min$1(xmin[1],x$0);
               ymin[1] = min$1(ymin[1],y$0);
               xmax[1] = max$0(xmax[1],x$0);
               ymax[1] = max$0(ymax[1],y$0);
               caml_call3(Buffer[2][1],vbuff,off[1],x$0);
               caml_call3(Buffer[2][1],vbuff,off[1] + 1 | 0,y$0);
               caml_call3(Buffer[2][1],vbuff,off[1] + 2 | 0,u);
               caml_call3(Buffer[2][1],vbuff,off[1] + 3 | 0,v);
               off[1] = off[1] + 4 | 0;
               i[1] = i[1] + 4 | 0;
               continue}
             var old_width=state[5],old_fringe=t[10],old_bounds=t[7][4];
             state[5] = tess[4];
             t[10] = tess[5];
             t[7][4] = [254,xmin[1],ymin[1],xmax[1],ymax[1]];
             var match=stroke_calc_width(t,state),width=match[2],_gw_=tess[2];
             iter$0
              (function(p)
                {add_path(t);
                 var path=last_path(t);
                 path[5] = [0,start + p[1] | 0,p[2],t[7][3]];
                 path[6] = [0,start + p[3] | 0,p[4],t[7][3]];
                 return 0},
               _gw_);
             switch(tess[3])
              {case 0:stroke_finish(t,state,width);break;
               case 1:fill_finish(t,state);break;
               case 2:fill_finish(t,state);stroke_finish(t,state,width);break;
               default:stroke_finish(t,state,width);fill_finish(t,state)}
             state[5] = old_width;
             t[10] = old_fringe;
             t[7][4] = old_bounds;
             return 0}}
         function save$0(t,kind)
          {var state=get_state(t);
           switch(kind)
            {case 0:stroke_prepare(t,state);break;
             case 1:fill_prepare(t,state);break;
             case 2:
              fill_prepare(t,state);
              var copy=copy$3(t[7][2],copy$4),temp=t[7][2];
              t[7][2] = copy;
              stroke_prepare(t,state);
              append_steal(temp,copy,create$8);
              t[7][2] = temp;
              break;
             default:
              stroke_prepare(t,state);
              var copy$0=copy$3(t[7][2],copy$4),temp$0=t[7][2];
              t[7][2] = copy$0;
              fill_prepare(t,state);
              append_steal(temp$0,copy$0,create$8);
              t[7][2] = temp$0}
           var _gs_=t[7][2],length=[0,0],_gq_=_gs_[3] - 1 | 0,_gp_=0;
           if(! (_gq_ < 0))
            {var i=_gp_;
             for(;;)
              {var path=get$0(_gs_,i);
               length[1] = length[1] + path[5][2] | 0;
               length[1] = length[1] + path[6][2] | 0;
               var _gr_=i + 1 | 0;
               if(_gq_ !== i){var i=_gr_;continue}
               break}}
           var
            buffer=caml_call1(Buffer[2][4],length[1] * 4 | 0),
            paths=caml_make_vect(t[7][2][3],empty_path),
            i$0=[0,0],
            off=[0,0],
            vbuff=t[7][3][1],
            l=t[7][2][3] - 1 | 0,
            _gt_=0;
           if(! (l < 0))
            {var idx=_gt_;
             for(;;)
              {var
                path$0=get$0(t[7][2],idx),
                fill_length=path$0[5][2],
                stroke_length=path$0[6][2],
                fill_off=path$0[5][1],
                stroke_off=path$0[6][1];
               caml_call5
                (Buffer[2][5],
                 vbuff,
                 fill_off * 4 | 0,
                 buffer,
                 off[1] * 4 | 0,
                 fill_length * 4 | 0);
               caml_call5
                (Buffer[2][5],
                 vbuff,
                 stroke_off * 4 | 0,
                 buffer,
                 (off[1] + fill_length | 0) * 4 | 0,
                 stroke_length * 4 | 0);
               var
                path$1=
                 [0,off[1],fill_length,off[1] + fill_length | 0,stroke_length];
               off[1] = (off[1] + fill_length | 0) + stroke_length | 0;
               var _gu_=i$0[1];
               caml_check_bound(paths,_gu_)[1 + _gu_] = path$1;
               i$0[1]++;
               var _gv_=idx + 1 | 0;
               if(l !== idx){var idx=_gv_;continue}
               break}}
           return [0,buffer,paths,kind,state[5],t[10]]}
         function end_frame(t$0)
          {var _gl_=t$0[7][3],_gm_=t$0[1];
           if(0 < _gm_[15][3])
            {_gm_[1].useProgram(_gm_[2]);
             _gm_[1].enable(cull_face_enum);
             _gm_[1].cullFace(m$0);
             _gm_[1].frontFace(m$1);
             _gm_[1].enable(blend);
             _gm_[1].disable(depth_test);
             _gm_[1].disable(scissor_test);
             color_mask(_gm_[1],1,1,1,1);
             _gm_[1].stencilMask(-1);
             _gm_[1].stencilOp(keep,keep,keep);
             _gm_[1].stencilFunc(always,0,-1);
             _gm_[1].activeTexture(t);
             bind_texture(_gm_[1],m,0);
             _gm_[17] = 0;
             _gm_[18] = -1;
             _gm_[19] = always;
             _gm_[20] = 0;
             _gm_[21] = -1;
             _gm_[22] = empty$4;
             _gm_[1].bindBuffer(target,_gm_[6]);
             var ubo_size=_gm_[13][2] * 4 | 0;
             buffer_data(_gm_[1],target,_gm_[13][1],ubo_size,stream_draw);
             _gm_[1].bindBuffer(array_buffer,_gm_[5]);
             var vert_size=_gl_[2] * 16 | 0;
             buffer_data(_gm_[1],array_buffer,_gl_[1],vert_size,stream_draw);
             _gm_[1].bindVertexArray(_gm_[4]);
             _gm_[1].uniform1i(_gm_[3][2],0);
             var
              _ge_=_gm_[12],
              v1=_ge_[0],
              v2=_ge_[1],
              _gf_=_gm_[3][3],
              _gg_=_gm_[1];
             temp_array[0] = v1;
             temp_array[1] = v2;
             _gg_.uniform2fv(_gf_,temp_array);
             var _gi_=_gm_[15][3] - 1 | 0,_gh_=0;
             if(! (_gi_ < 0))
              {var i$6=_gh_;
               for(;;)
                {var
                  call=get$0(_gm_[15],i$6),
                  _gj_=call[7],
                  _fT_=_gm_[22],
                  _fP_=blending_eq(_fT_[1],_gj_[1]),
                  switch$0=0;
                 if(_fP_)
                  {var _fQ_=blending_eq(_fT_[2],_gj_[2]);
                   if(_fQ_)
                    {var _fR_=blending_eq(_fT_[3],_gj_[3]);
                     if(_fR_)
                      {var _fU_=blending_eq(_fT_[4],_gj_[4]);switch$0 = 1}
                     else
                      var _fS_=_fR_}
                   else
                    var _fS_=_fQ_}
                 else
                  var _fS_=_fP_;
                 if(! switch$0)var _fU_=_fS_;
                 if(1 - _fU_)
                  {_gm_[22] = _gj_;
                   var
                    d=int_val(_gj_[4]),
                    e=int_val(_gj_[3]),
                    b=int_val(_gj_[2]),
                    a=int_val(_gj_[1]);
                   _gm_[1].blendFuncSeparate(a,b,e,d)}
                 switch(call[1])
                  {case 0:
                    _gm_[1].enable(stencil_test);
                    stencil_mask(_gm_,255);
                    stencil_func(_gm_,always,0,255);
                    color_mask(_gm_[1],0,0,0,0);
                    set_uniforms(_gm_,call[6],0);
                    _gm_[1].stencilOpSeparate(front,keep,keep,incr_wrap);
                    _gm_[1].stencilOpSeparate(m$0,keep,keep,decr_wrap);
                    _gm_[1].disable(cull_face_enum);
                    var _f8_=call[8][3] - 1 | 0,_f7_=0;
                    if(! (_f8_ < 0))
                     {var i$4=_f7_;
                      for(;;)
                       {var path$4=get$0(call[8],i$4);
                        _gm_[1].drawArrays(triangle_fan,path$4[1],path$4[2]);
                        var _ga_=i$4 + 1 | 0;
                        if(_f8_ !== i$4){var i$4=_ga_;continue}
                        break}}
                    _gm_[1].enable(cull_face_enum);
                    color_mask(_gm_[1],1,1,1,1);
                    set_uniforms(_gm_,call[6] + _gm_[7] | 0,call[2]);
                    if(has(_gm_[14],antialias))
                     {stencil_func(_gm_,equal$0,0,255);
                      _gm_[1].stencilOp(keep,keep,keep);
                      var _f__=call[8][3] - 1 | 0,_f9_=0;
                      if(! (_f__ < 0))
                       {var i$3=_f9_;
                        for(;;)
                         {var path$3=get$0(call[8],i$3);
                          _gm_[1].drawArrays(triangle_strip,path$3[3],path$3[4]);
                          var _f$_=i$3 + 1 | 0;
                          if(_f__ !== i$3){var i$3=_f$_;continue}
                          break}}}
                    stencil_func(_gm_,notequal,0,255);
                    _gm_[1].stencilOp(zero$1,zero$1,zero$1);
                    _gm_[1].drawArrays(triangle_strip,call[4],call[5]);
                    _gm_[1].disable(stencil_test);
                    break;
                   case 1:
                    set_uniforms(_gm_,call[6],call[2]);
                    var _gc_=call[8][3] - 1 | 0,_gb_=0;
                    if(! (_gc_ < 0))
                     {var i$5=_gb_;
                      for(;;)
                       {var path$5=get$0(call[8],i$5);
                        _gm_[1].drawArrays(triangle_fan,path$5[1],path$5[2]);
                        if(0 < path$5[4])
                         _gm_[1].drawArrays(triangle_strip,path$5[3],path$5[4]);
                        var _gd_=i$5 + 1 | 0;
                        if(_gc_ !== i$5){var i$5=_gd_;continue}
                        break}}
                    break;
                   case 2:
                    if(has(_gm_[14],stencil_strokes))
                     {_gm_[1].enable(stencil_test);
                      stencil_mask(_gm_,255);
                      stencil_func(_gm_,equal$0,0,255);
                      _gm_[1].stencilOp(keep,keep,incr);
                      set_uniforms(_gm_,call[6] + _gm_[7] | 0,call[2]);
                      var _fW_=call[8][3] - 1 | 0,_fV_=0;
                      if(! (_fW_ < 0))
                       {var i$1=_fV_;
                        for(;;)
                         {var path$1=get$0(call[8],i$1);
                          _gm_[1].drawArrays(triangle_strip,path$1[3],path$1[4]);
                          var _f3_=i$1 + 1 | 0;
                          if(_fW_ !== i$1){var i$1=_f3_;continue}
                          break}}
                      set_uniforms(_gm_,call[6],call[2]);
                      stencil_func(_gm_,equal$0,0,255);
                      _gm_[1].stencilOp(keep,keep,keep);
                      var _fY_=call[8][3] - 1 | 0,_fX_=0;
                      if(! (_fY_ < 0))
                       {var i$0=_fX_;
                        for(;;)
                         {var path$0=get$0(call[8],i$0);
                          _gm_[1].drawArrays(triangle_strip,path$0[3],path$0[4]);
                          var _f2_=i$0 + 1 | 0;
                          if(_fY_ !== i$0){var i$0=_f2_;continue}
                          break}}
                      color_mask(_gm_[1],0,0,0,0);
                      stencil_func(_gm_,always,0,255);
                      _gm_[1].stencilOp(zero$1,zero$1,zero$1);
                      var _f0_=call[8][3] - 1 | 0,_fZ_=0;
                      if(! (_f0_ < 0))
                       {var i=_fZ_;
                        for(;;)
                         {var path=get$0(call[8],i);
                          _gm_[1].drawArrays(triangle_strip,path[3],path[4]);
                          var _f1_=i + 1 | 0;
                          if(_f0_ !== i){var i=_f1_;continue}
                          break}}
                      color_mask(_gm_[1],1,1,1,1);
                      _gm_[1].disable(stencil_test)}
                    else
                     {set_uniforms(_gm_,call[6],call[2]);
                      var _f5_=call[8][3] - 1 | 0,_f4_=0;
                      if(! (_f5_ < 0))
                       {var i$2=_f4_;
                        for(;;)
                         {var path$2=get$0(call[8],i$2);
                          _gm_[1].drawArrays(triangle_strip,path$2[3],path$2[4]);
                          var _f6_=i$2 + 1 | 0;
                          if(_f5_ !== i$2){var i$2=_f6_;continue}
                          break}}}
                    break;
                   default:
                    set_uniforms(_gm_,call[6],call[2]);
                    _gm_[1].drawArrays(triangles,call[4],call[5])}
                 var _gk_=i$6 + 1 | 0;
                 if(_gi_ !== i$6){var i$6=_gk_;continue}
                 break}}
             _gm_[1].bindVertexArray(no_handler);
             _gm_[1].disable(cull_face_enum);
             bind_texture$0(_gm_,0)}
           cancel(_gm_);
           var _gn_=0 !== t$0[14]?1:0,_go_=_gn_?0:_gn_;
           return _go_}
         function set_paint_color(p,color)
          {p[1] = 1.;
           p[2] = 0.;
           p[3] = 0.;
           p[4] = 1.;
           p[5] = 0.;
           p[6] = 0.;
           p[9] = 0.;
           p[10] = 1.;
           p[11] = color[1];
           p[12] = color[2];
           p[13] = color[3];
           p[14] = color[4];
           p[15] = color[1];
           p[16] = color[2];
           p[17] = color[3];
           p[18] = color[4];
           return 0}
         function linear_gradient(t,sx,sy,ex,ey,icol,ocol)
          {var paint=create$2(0);
           reset_xform(paint);
           var dx=ex - sx,dy=ey - sy,d=Math.sqrt(dx * dx + dy * dy);
           if(0.0001 < d)
            var dy$0=dy / d,dy$1=dy$0,dx$0=dx / d;
           else
            var dy$1=1.,dx$0=0.;
           paint[1] = dy$1;
           paint[2] = - dx$0;
           paint[3] = dx$0;
           paint[4] = dy$1;
           paint[5] = sx - dx$0 * 100000.;
           paint[6] = sy - dy$1 * 100000.;
           paint[7] = 100000.;
           paint[8] = 100000. + d * 0.5;
           paint[9] = 0.;
           paint[10] = max$0(1.,d);
           set_only_inner_and_outer(paint,icol,ocol);
           return paint}
         function box_gradient(t,x,y,w,h,r,f,icol,ocol)
          {var paint=create$2(0);
           reset_xform(paint);
           paint[5] = x + w * 0.5;
           paint[6] = y + h * 0.5;
           paint[7] = w * 0.5;
           paint[8] = h * 0.5;
           paint[9] = r;
           paint[10] = max$0(1.,f);
           set_only_inner_and_outer(paint,icol,ocol);
           return paint}
         function radial_gradient(t,cx,cy,in_radius,out_radius,icol,ocol)
          {var paint=create$2(0);
           reset_xform(paint);
           paint[5] = cx;
           paint[6] = cy;
           var r=(in_radius + out_radius) * 0.5,f=out_radius - in_radius;
           paint[7] = r;
           paint[8] = r;
           paint[9] = r;
           paint[10] = max$0(1.,f);
           set_only_inner_and_outer(paint,icol,ocol);
           return paint}
         function image_pattern(t,cx,cy,w,h,angle,image,alpha)
          {var t$0=create$2(0),cs=Math.cos(angle),sn=Math.sin(angle);
           t$0[1] = cs;
           t$0[2] = sn;
           t$0[3] = - sn;
           t$0[4] = cs;
           t$0[5] = 0.;
           t$0[6] = 0.;
           t$0[5] = cx;
           t$0[6] = cy;
           t$0[7] = w;
           t$0[8] = h;
           t$0[19] = image;
           t$0[11] = 1.;
           t$0[12] = 1.;
           t$0[13] = 1.;
           t$0[14] = alpha;
           t$0[15] = 1.;
           t$0[16] = 1.;
           t$0[17] = 1.;
           t$0[18] = alpha;
           return t$0}
         var
          Paint=
           [0,linear_gradient,box_gradient,radial_gradient,image_pattern];
         function set_fill_color(t,color)
          {var state=get_state(t);return set_paint_color(state[3],color)}
         function set_fill_paint(t,paint)
          {var state=get_state(t);
           state[3] = copy$2(paint);
           return multiply$0(state[3],state[10])}
         function set_stroke_color(t,color)
          {var state=get_state(t);return set_paint_color(state[4],color)}
         function set_stroke_paint(t,paint)
          {var state=get_state(t);
           state[4] = copy$2(paint);
           return multiply$0(state[4],state[10])}
         function get_font_scale(state)
          {var
            a=get_average_scale(state[10]),
            avg=Math.floor(a / 0.01 + 0.5) * 0.01;
           return min(avg,4.)}
         function set_font_attributes(t,state,scale)
          {caml_call2(Font[7],t[12],state[12] * scale);
           caml_call2(Font[8],t[12],state[13] * scale);
           caml_call2(Font[9],t[12],state[15] * scale);
           caml_call2(Font[10],t[12],state[16]);
           return caml_call2(Font[11],t[12],state[17])}
         var q=caml_call1(Font[3][1],0);
         function text_w(t,x,y,opt,end,str)
          {if(opt)var sth=opt[1],start=sth;else var start=0;
           var
            state$0=get_state(t),
            _fK_=t[11],
            scale=get_font_scale(state$0) * _fK_,
            inv_scale=1. / scale,
            _fL_=state$0[10],
            det=_fL_[1] * _fL_[4] - _fL_[3] * _fL_[2],
            is_flipped=det < 0.?1:0;
           if(end)
            var len$0=end[1],end$0=len$0;
           else
            var end$0=caml_ml_string_length(str);
           set_font_attributes(t,state$0,scale);
           var
            off=t[7][3][2],
            iter=
             caml_call7
              (Font[17],
               t[12],
               x * scale,
               y * scale,
               [0,start],
               [0,end$0],
               str,
               Font[1][7]);
           for(;;)
            {var q$0=caml_call3(Font[18],t[12],iter,q);
             if(q$0)
              {if(is_flipped)
                {var y0$0=q[2],t0=q[4];
                 q[2] = q[6];
                 q[4] = q[8];
                 q[6] = y0$0;
                 q[8] = t0}
               var _fM_=state$0[10],_fN_=t[7][3],at=_fN_[2];
               check_size(_fN_,at + 5 | 0);
               var
                qx0=q[1] * inv_scale,
                qy0=q[2] * inv_scale,
                c0=qx0 * _fM_[1] + qy0 * _fM_[3] + _fM_[5],
                c1=qx0 * _fM_[2] + qy0 * _fM_[4] + _fM_[6],
                qx1=q[5] * inv_scale,
                qy1=q[6] * inv_scale,
                c4=qx1 * _fM_[1] + qy1 * _fM_[3] + _fM_[5],
                c5=qx1 * _fM_[2] + qy1 * _fM_[4] + _fM_[6],
                c2=qx1 * _fM_[1] + qy0 * _fM_[3] + _fM_[5],
                c3=qx1 * _fM_[2] + qy0 * _fM_[4] + _fM_[6],
                c6=qx0 * _fM_[1] + qy1 * _fM_[3] + _fM_[5],
                c7=qx0 * _fM_[2] + qy1 * _fM_[4] + _fM_[6];
               unsafe_set(_fN_,at,c0,c1,q[3],q[4]);
               unsafe_set(_fN_,at + 1 | 0,c4,c5,q[7],q[8]);
               unsafe_set(_fN_,at + 2 | 0,c2,c3,q[7],q[4]);
               unsafe_set(_fN_,at + 3 | 0,c0,c1,q[3],q[4]);
               unsafe_set(_fN_,at + 4 | 0,c6,c7,q[3],q[8]);
               unsafe_set(_fN_,at + 5 | 0,c4,c5,q[7],q[8]);
               continue}
             var match=caml_call1(Font[15],t[12]);
             if(match)
              {var
                match$0=match[1],
                y1=match$0[4],
                x1=match$0[3],
                y0=match$0[2],
                x0=match$0[1],
                image=get$0(t[13],t[14]);
               if(0 !== image)
                {var
                  match$1=caml_call1(Font[16],t[12]),
                  data=match$1[1],
                  w=x1 - x0 | 0,
                  h=y1 - y0 | 0;
                 update_texture(t[1],image,x0,y0,w,h,data)}}
             var _fO_=t[7][3],state=get_state(t),paint=copy$2(state[3]);
             paint[19] = get$0(t[13],t[14]);
             modify_alpha(paint,state[9]);
             var
              len=_fO_[2] - off | 0,
              _fJ_=t[1],
              _fG_=t[10],
              _fH_=state[11],
              _fI_=state[1],
              call=steal(_fJ_[15],empty$5);
             reset$1(call,3);
             call[2] = paint[19] | 0;
             call[7] = of_composite_op_state(_fI_);
             call[4] = off;
             call[5] = len;
             call[6] = make_slot(_fJ_[13],1,_fJ_[7]);
             convert_paint(_fJ_,call[6],paint,_fH_,1.,_fG_,-1.);
             set_type(_fJ_[13],call[6],img);
             t[15] = t[15] + 1 | 0;
             t[18] = t[18] + (len / 3 | 0) | 0;
             return caml_call1(Font[4][1],iter) / scale}}
         function text(t,x,y,start,end,str)
          {text_w(t,x,y,start,end,str);return 0}
         function metrics(t)
          {var
            state=get_state(t),
            _fF_=t[11],
            scale=get_font_scale(state) * _fF_;
           set_font_attributes(t,state,scale);
           var metrics=caml_call1(Font[12],t[12]);
           return [254,metrics[1],metrics[2],metrics[3]]}
         function make_empty_rows(count)
          {return caml_make_vect(count,empty_row)}
         function symbol(a,b)
          {var switch$0=0;
           switch(a)
            {case 0:if(! b)switch$0 = 1;break;
             case 1:if(1 === b)switch$0 = 1;break;
             case 2:if(2 === b)switch$0 = 1;break;
             default:if(3 <= b)switch$0 = 1}
           return switch$0?1:0}
         function break_lines(t,break_width,max_rows,start,end,lines,text)
          {var
            state=get_state(t),
            _e5_=t[11],
            scale=get_font_scale(state) * _e5_,
            inv_scale=1. / scale;
           set_font_attributes(t,state,scale);
           var
            break_row_width=break_width * scale,
            iter=caml_call7(Font[17],t[12],0.,0.,start,end,text,Font[1][6]),
            nrows=[0,0],
            row_start_x=[0,0.],
            row_width=[0,0.],
            row_min_x=[0,0.],
            row_max_x=[0,0.],
            row_start=[0,-1],
            row_end=[0,-1],
            word_start=[0,-1],
            word_start_x=[0,0.],
            word_min_x=[0,0.],
            break_end=[0,-1],
            break_width$0=[0,0.],
            break_max_x=[0,0.];
           try
            {var
              loop=
               function(ptype)
                {var ptype$0=ptype;
                 for(;;)
                  {var res=caml_call3(Font[18],t[12],iter,q);
                   if(res)
                    {var ch=caml_call1(Font[4][2],iter),switch$0=0;
                     if(14 <= ch)
                      {if(32 === ch)switch$0 = 1;else if(133 === ch)switch$0 = 2}
                     else
                      if(10 === ch)switch$0 = 2;else if(9 <= ch)switch$0 = 1;
                     switch(switch$0)
                      {case 0:
                        var switch$1=0;
                        if(! (19968 <= ch) || 655359 < ch)switch$1 = 1;
                        var switch$2=0;
                        if(switch$1)
                         {var switch$3=0;
                          if(12288 <= ch && ! (12543 < ch))switch$3 = 1;
                          if(! switch$3)
                           {var switch$4=0;
                            if(65280 <= ch && ! (65519 < ch))switch$4 = 1;
                            if(! switch$4)
                             {var switch$5=0;
                              if(! (4352 <= ch) || 4607 < ch)switch$5 = 1;
                              if(switch$5)
                               {var switch$6=0;
                                if(! (12592 <= ch) || 12687 < ch)switch$6 = 1;
                                if(switch$6)
                                 {var switch$7=0;
                                  if(! (44032 <= ch) || 55215 < ch)switch$7 = 1;
                                  if(switch$7){var type=2;switch$2 = 1}}}}}}
                        if(! switch$2)var type=3;
                        break;
                       case 1:var type=0;break;
                       default:var type=1}
                     if(1 === type)
                      {var
                        _e9_=caml_call1(Font[4][5],iter),
                        _e__=row_max_x[1] * inv_scale,
                        _e$_=row_min_x[1] * inv_scale,
                        _fa_=row_width[1] * inv_scale,
                        _fb_=0 <= row_end[1]?row_end[1]:caml_call1(Font[4][3],iter),
                        _fc_=
                         0 <= row_start[1]?row_start[1]:caml_call1(Font[4][3],iter),
                        row=[0,_fc_,_fb_,_fa_,_e$_,_e__,_e9_],
                        _fd_=nrows[1];
                       caml_check_bound(lines,_fd_)[1 + _fd_] = row;
                       nrows[1]++;
                       if(max_rows <= nrows[1])throw Exit;
                       break_end[1] = row_start[1];
                       break_width$0[1] = 0.;
                       break_max_x[1] = 0.;
                       row_start[1] = -1;
                       row_end[1] = -1;
                       row_width[1] = 0.;
                       row_min_x[1] = 0.;
                       row_max_x[1] = 0.}
                     else
                      if(row_start[1] === -1)
                       {var _fe_=symbol(type,2),_ff_=_fe_ || symbol(type,3);
                        if(_ff_)
                         {row_start_x[1] = caml_call1(Font[4][6],iter);
                          row_start[1] = caml_call1(Font[4][3],iter);
                          row_end[1] = caml_call1(Font[4][5],iter);
                          var _fg_=row_start_x[1];
                          row_width[1] = caml_call1(Font[4][1],iter) - _fg_;
                          row_min_x[1] = q[1] - row_start_x[1];
                          row_max_x[1] = q[5] - row_start_x[1];
                          word_start[1] = caml_call1(Font[4][3],iter);
                          word_start_x[1] = caml_call1(Font[4][6],iter);
                          word_min_x[1] = q[1] - row_start_x[1];
                          break_end[1] = row_start[1];
                          break_width$0[1] = 0.;
                          break_max_x[1] = 0.}}
                      else
                       {var
                         _fh_=row_start_x[1],
                         next_width=caml_call1(Font[4][1],iter) - _fh_,
                         _fi_=symbol(ptype$0,0);
                        if(_fi_)
                         var _fj_=symbol(type,2),_fk_=_fj_ || symbol(type,3);
                        else
                         var _fk_=_fi_;
                        var _fl_=_fk_ || symbol(type,3);
                        if(_fl_)
                         {word_start[1] = caml_call1(Font[4][3],iter);
                          word_start_x[1] = caml_call1(Font[4][6],iter);
                          word_min_x[1] = q[1]}
                        var _fm_=symbol(type,2),_fn_=_fm_ || symbol(type,3);
                        if(_fn_)
                         {row_end[1] = caml_call1(Font[4][5],iter);
                          var _fo_=row_start_x[1];
                          row_width[1] = caml_call1(Font[4][1],iter) - _fo_;
                          row_max_x[1] = q[5] - row_start_x[1]}
                        var
                         _fp_=symbol(ptype$0,2),
                         _fq_=_fp_ || symbol(ptype$0,3),
                         _fr_=_fq_?symbol(type,0):_fq_,
                         _fs_=_fr_ || symbol(type,3);
                        if(_fs_)
                         {break_end[1] = caml_call1(Font[4][5],iter);
                          word_start[1] = caml_call1(Font[4][5],iter);
                          break_width$0[1] = row_width[1];
                          break_max_x[1] = row_max_x[1]}
                        var
                         _ft_=symbol(type,2),
                         _fu_=_ft_ || symbol(type,3),
                         _fv_=_fu_?break_row_width < next_width?1:0:_fu_;
                        if(_fv_)
                         {if(break_end[1] === row_start[1])
                           {var
                             _fw_=caml_call1(Font[4][3],iter),
                             _fx_=row_max_x[1] * inv_scale,
                             _fy_=row_min_x[1] * inv_scale,
                             _fz_=row_width[1] * inv_scale,
                             _fA_=caml_call1(Font[4][3],iter),
                             row$0=[0,row_start[1],_fA_,_fz_,_fy_,_fx_,_fw_],
                             _fB_=nrows[1];
                            caml_check_bound(lines,_fB_)[1 + _fB_] = row$0;
                            nrows[1]++;
                            if(max_rows <= nrows[1])throw Exit;
                            row_start_x[1] = caml_call1(Font[4][6],iter);
                            row_start[1] = caml_call1(Font[4][3],iter);
                            row_end[1] = caml_call1(Font[4][5],iter);
                            var _fC_=row_start_x[1];
                            row_width[1] = caml_call1(Font[4][1],iter) - _fC_;
                            row_min_x[1] = q[1] - row_start_x[1];
                            row_max_x[1] = q[5] - row_start_x[1];
                            word_start[1] = caml_call1(Font[4][3],iter);
                            word_start_x[1] = caml_call1(Font[4][6],iter);
                            word_min_x[1] = q[1] - row_start_x[1]}
                          else
                           {var
                             row$1=
                              [0,
                               row_start[1],
                               break_end[1],
                               break_width$0[1] * inv_scale,
                               row_min_x[1] * inv_scale,
                               break_max_x[1] * inv_scale,
                               word_start[1]],
                             _fD_=nrows[1];
                            caml_check_bound(lines,_fD_)[1 + _fD_] = row$1;
                            nrows[1]++;
                            if(max_rows <= nrows[1])throw Exit;
                            row_start_x[1] = word_start_x[1];
                            row_start[1] = word_start[1];
                            row_end[1] = caml_call1(Font[4][5],iter);
                            var _fE_=row_start_x[1];
                            row_width[1] = caml_call1(Font[4][1],iter) - _fE_;
                            row_min_x[1] = word_min_x[1] - row_start_x[1];
                            row_max_x[1] = q[5] - row_start_x[1]}
                          break_end[1] = row_start[1];
                          break_width$0[1] = 0.;
                          break_max_x[1] = 0.}}
                     var ptype$0=type;
                     continue}
                   return 0}};
             loop(0);
             if(end)
              var e=end[1],end$0=e;
             else
              var end$0=caml_ml_string_length(text);
             var row_start$0=row_start[1] === end$0?-1:row_start[1];
             if(1 - (row_start$0 === -1?1:0))
              {var
                row=
                 [0,
                  row_start$0,
                  row_end[1],
                  row_width[1] * inv_scale,
                  row_min_x[1] * inv_scale,
                  row_max_x[1] * inv_scale,
                  end$0],
                _e6_=nrows[1];
               caml_check_bound(lines,_e6_)[1 + _e6_] = row;
               nrows[1]++}
             var _e7_=nrows[1];
             return _e7_}
           catch(_e8_)
            {_e8_ = caml_wrap_exception(_e8_);
             if(_e8_ === Exit)return nrows[1];
             throw _e8_}}
         function glyph_positions(t,x,y,start,end,glyphs,text)
          {var
            state=get_state(t),
            _eZ_=t[11],
            scale=get_font_scale(state) * _eZ_,
            inv_scale=1. / scale;
           set_font_attributes(t,state,scale);
           var
            iter=
             caml_call7
              (Font[17],t[12],x * scale,y * scale,start,end,text,Font[1][6]),
            idx=0;
           for(;;)
            {var res=caml_call3(Font[18],t[12],iter,q);
             if(res)
              {var
                _e0_=q[5],
                _e1_=max$0(caml_call1(Font[4][1],iter),_e0_) * inv_scale,
                _e2_=q[1],
                _e3_=min$1(caml_call1(Font[4][6],iter),_e2_) * inv_scale,
                _e4_=caml_call1(Font[4][6],iter) * inv_scale,
                pos=[0,caml_call1(Font[4][3],iter),_e4_,_e3_,_e1_];
               caml_check_bound(glyphs,idx)[1 + idx] = pos;
               var idx$0=idx + 1 | 0,idx=idx$0;
               continue}
             return idx}}
         function bounds(t,x,y,start,end,str)
          {var
            state=get_state(t),
            _eY_=t[11],
            scale=get_font_scale(state) * _eY_,
            inv_scale=1. / scale;
           set_font_attributes(t,state,scale);
           var
            match=caml_call6(Font[5],t[12],x * scale,y * scale,start,end,str),
            bounds=match[2],
            advance=match[1],
            match$0=caml_call2(Font[6],t[12],y * scale),
            ymax=match$0[2],
            ymin=match$0[1];
           return [0,
                   [254,
                    bounds[1] * inv_scale,
                    ymin * inv_scale,
                    bounds[3] * inv_scale,
                    ymax * inv_scale],
                   advance * inv_scale]}
         var lines=[0,empty_row,empty_row];
         function box_bounds(t,x,y,break_width,opt,end,text)
          {if(opt)var sth=opt[1],start=sth;else var start=0;
           var
            state=get_state(t),
            _eU_=t[11],
            scale=get_font_scale(state) * _eU_,
            inv_scale=1. / scale,
            old_align=state[16],
            halign=h_align(state[16]),
            valign=v_align(state[16]),
            min_x=[0,x],
            max_x=[0,x],
            min_y=[0,y],
            max_y=[0,y],
            line_h=metrics(t)[3];
           state[16] = 1 | valign;
           set_font_attributes(t,state,scale);
           var
            y$0=[0,y],
            match=caml_call2(Font[6],t[12],0.),
            rmax_y=match[2],
            rmin_y=match[1],
            rmin_y$0=rmin_y * inv_scale,
            rmax_y$0=rmax_y * inv_scale,
            start$0=[0,start];
           for(;;)
            {var
              count=
               break_lines(t,break_width,2,[0,start$0[1]],end,lines,text);
             if(0 === count)
              {state[16] = old_align;
               return [254,min_x[1],min_y[1],max_x[1],max_y[1]]}
             var _eW_=count - 1 | 0,_eV_=0;
             if(! (_eW_ < 0))
              {var i=_eV_;
               for(;;)
                {var
                  line=caml_check_bound(lines,i)[1 + i],
                  dx=
                   has(halign,left)
                    ?0.
                    :has(halign,center)
                      ?break_width * 0.5 - line[3] * 0.5
                      :has(halign,right)?break_width - line[3]:0.,
                  rmin_x=x + line[4] + dx,
                  rmax_x=x + line[5] + dx;
                 min_x[1] = min$1(min_x[1],rmin_x);
                 max_x[1] = max$0(max_x[1],rmax_x);
                 min_y[1] = min$1(min_y[1],y$0[1] + rmin_y$0);
                 max_y[1] = max$0(max_y[1],y$0[1] + rmax_y$0);
                 y$0[1] = y$0[1] + line_h * state[14];
                 start$0[1] = line[6];
                 var _eX_=i + 1 | 0;
                 if(_eW_ !== i){var i=_eX_;continue}
                 break}}
             continue}}
         function create$4(t,name,file)
          {return caml_call3(Font[14],t[12],name,file)}
         function set_size(t,size)
          {var state=get_state(t);state[12] = size;return 0}
         function set_blur(t,blur)
          {var state=get_state(t);state[15] = blur;return 0}
         function set_letter_spacing(t,spacing)
          {var state=get_state(t);state[13] = spacing;return 0}
         function set_align(t,align)
          {var state=get_state(t);state[16] = align;return 0}
         function set_line_height(t,height)
          {var state=get_state(t);state[14] = height;return 0}
         function find_font(t,name){return caml_call2(Font[13],t[12],name)}
         function set_font_face(t,name)
          {var state=get_state(t),match=caml_call2(Font[13],t[12],name);
           if(match){var id=match[1];state[17] = id;return 0}
           return 0}
         function set_font_face_id(t,id)
          {var state=get_state(t);state[17] = id;return 0}
         function text_box(t,x,y,break_width,opt,end,str)
          {if(opt)var sth=opt[1],start=sth;else var start=0;
           var
            state=get_state(t),
            old_align=state[16],
            halign=h_align(state[16]),
            valign=v_align(state[16]),
            metrics$0=metrics(t);
           state[16] = 1 | valign;
           var start$0=[0,start],y$0=[0,y];
           for(;;)
            {var
              count=
               break_lines(t,break_width,2,[0,start$0[1]],end,lines,str);
             if(0 === count){state[16] = old_align;return 0}
             var _eS_=count - 1 | 0,_eR_=0;
             if(! (_eS_ < 0))
              {var i=_eR_;
               for(;;)
                {var
                  line=caml_check_bound(lines,i)[1 + i],
                  s=line[1],
                  e=line[2];
                 if(has(halign,left))
                  text(t,x,y$0[1],[0,s],[0,e],str);
                 else
                  if(has(halign,center))
                   {var x$0=x + break_width * 0.5 - line[3] * 0.5;
                    text(t,x$0,y$0[1],[0,s],[0,e],str)}
                  else
                   if(has(halign,right))
                    {var x$1=x + break_width - line[3];
                     text(t,x$1,y$0[1],[0,s],[0,e],str)}
                 y$0[1] = y$0[1] + metrics$0[3] * state[14];
                 start$0[1] = line[6];
                 var _eT_=i + 1 | 0;
                 if(_eS_ !== i){var i=_eT_;continue}
                 break}}
             continue}}
         function add_fallback_id(t,font,fallback)
          {return caml_call3(Font[19],t[12],font,fallback)}
         function add_fallback(t,name,fallback)
          {return caml_call3(Font[20],t[12],name,fallback)}
         function reset_fallback_id(t,font)
          {return caml_call2(Font[21],t[12],font)}
         function reset_fallback(t,name)
          {return caml_call2(Font[22],t[12],name)}
         function create$7(flags,impl)
          {var
            _eF_=create$3(1,0),
            _eG_=caml_call1(Font[2],0),
            _es_=[0,create$6(10000),0],
            _ez_=
             [0,
              [0,caml_make_vect(1000,0),caml_make_vect(7000,0.),0],
              init$0(10,create$8),
              _es_,
              empty],
            _eL_=create$3(10,create$9(0)),
            _eM_=has(flags,tesselate_afd),
            _eA_=0,
            _eB_=0,
            _eC_=0,
            _eD_=0,
            _eE_=0,
            _eH_=1.,
            _eI_=0.,
            _eJ_=0.,
            _eK_=0.,
            _eN_=0.,
            _eO_=0.,
            _eP_=create$3(128,0),
            match=
             with_return
              (function(r)
                {var
                  prog=impl.createProgram(),
                  vert=impl.createShader(impl.VERTEX_SHADER),
                  frag=impl.createShader(impl.FRAGMENT_SHADER);
                 impl.shaderSource
                  (vert,
                   "#version 300 es\n\nuniform vec2 viewSize;\nlayout(location = 0) in vec2 vertex;\nlayout(location = 1) in vec2 tcoord;\nout vec2 ftcoord;\nout vec2 fpos;\n\nvoid main(void) {\n\tftcoord = tcoord;\n\tfpos = vertex;\n\tgl_Position = vec4(2.0*vertex.x/viewSize.x - 1.0, 1.0 - 2.0*vertex.y/viewSize.y, 0, 1);\n}\n");
                 impl.shaderSource
                  (frag,
                   "#version 300 es\nprecision highp float;\n\n#define EDGE_AA 1\n\nlayout(std140) uniform frag {\n    mat3 scissorMat;\n    mat3 paintMat;\n    vec4 innerCol;\n    vec4 outerCol;\n    vec2 scissorExt;\n    vec2 scissorScale;\n    vec2 extent;\n    float radius;\n    float feather;\n    float strokeMult;\n    float strokeThr;\n    float texType_;\n    float type_;\n};\n\n#define type int(type_)\n#define texType int(texType_)\n\n  /*\n#define UNIFORMARRAY_SIZE 11\nuniform vec4 frag[UNIFORMARRAY_SIZE];\n\n#define scissorMat mat3(frag[0].xyz, frag[1].xyz, frag[2].xyz)\n#define paintMat mat3(frag[3].xyz, frag[4].xyz, frag[5].xyz)\n#define innerCol frag[6]\n#define outerCol frag[7]\n#define scissorExt frag[8].xy\n#define scissorScale frag[8].zw\n#define extent frag[9].xy\n#define radius frag[9].z\n#define feather frag[9].w\n#define strokeMult frag[10].x\n#define strokeThr frag[10].y\n#define texType int(frag[10].z)\n#define type int(frag[10].w)\n  */\n\nuniform sampler2D tex;\nin vec2 ftcoord;\nin vec2 fpos;\nout vec4 fragColor;\n\nfloat sdroundrect(vec2 pt, vec2 ext, float rad) {\n\tvec2 ext2 = ext - vec2(rad,rad);\n\tvec2 d = abs(pt) - ext2;\n\treturn min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rad;\n}\n\n#ifdef EDGE_AA\nfloat strokeMask() {\n\treturn min(1.0, (1.0-abs(ftcoord.x*2.0-1.0))*strokeMult) * min(1.0, ftcoord.y);\n}\n#endif\n\n// Scissoring\nfloat scissorMask(vec2 p) {\n\tvec2 sc = (abs((scissorMat * vec3(p,1.0)).xy) - scissorExt);\n\tsc = vec2(0.5,0.5) - sc * scissorScale;\n\treturn clamp(sc.x,0.0,1.0) * clamp(sc.y,0.0,1.0);\n}\n\nvoid main(void) {\n   vec4 result = vec4(1, 1, 0, 1);\n\tfloat scissor = scissorMask(fpos);\n#ifdef EDGE_AA\n\tfloat strokeAlpha = strokeMask();\n\tif (strokeAlpha < strokeThr) discard;\n#else\n\tfloat strokeAlpha = 1.0;\n#endif\n\tif (type == 0) {\t\t\t// Gradient\n\t\t// Calculate gradient color using box gradient\n\t\tvec2 pt = (paintMat * vec3(fpos,1.0)).xy;\n\t\tfloat d = clamp((sdroundrect(pt, extent, radius) + feather*0.5) / feather, 0.0, 1.0);\n\t\tvec4 color = mix(innerCol,outerCol,d);\n\t\t// Combine alpha\n\t\tcolor *= strokeAlpha * scissor;\n\t\tresult = color;\n\t} else if (type == 1) {\t\t// Image\n\t\t// Calculate color fron texture\n\n\t\tvec2 pt = (paintMat * vec3(fpos,1.0)).xy / extent;\n\t\tvec4 color = texture(tex, pt);\n\n\t\tif (texType == 1) color = vec4(color.xyz*color.w,color.w);\n\t\tif (texType == 2) color = vec4(color.x);\n\t\t// Apply color tint and alpha.\n\t\tcolor *= innerCol;\n\t\t// Combine alpha\n\t\tcolor *= strokeAlpha * scissor;\n\t\tresult = color;\n\t} else if (type == 2) {\t\t// Stencil fill\n\t\tresult = vec4(1,1,1,1);\n\t} else if (type == 3) {\t\t// Textured tris\n\t\tvec4 color = texture(tex, ftcoord);\n\t\tif (texType == 1) color = vec4(color.xyz*color.w,color.w);\n\t\tif (texType == 2) color = vec4(color.x);\n\t\tcolor *= scissor;\n\t\tresult = color * innerCol;\n\t}\n\tfragColor = result;\n}\n");
                 impl.compileShader(vert);
                 var status=impl.getShaderParameter(vert,impl.COMPILE_STATUS);
                 if(1 - (status | 0))
                  {var log=impl.getShaderInfoLog(vert);
                   print_endline(_bF_);
                   print_endline(caml_string_of_jsstring(log));
                   caml_call1(r[1],0)}
                 impl.compileShader(frag);
                 var
                  status$0=
                   impl.getShaderParameter(frag,impl.COMPILE_STATUS);
                 if(1 - (status$0 | 0))
                  {var log$0=impl.getShaderInfoLog(frag);
                   print_endline(_bG_);
                   print_endline(caml_string_of_jsstring(log$0));
                   caml_call1(r[1],0)}
                 impl.attachShader(prog,vert);
                 impl.attachShader(prog,frag);
                 impl.bindAttribLocation(prog,0,"vertex");
                 impl.bindAttribLocation(prog,1,"tcoord");
                 impl.linkProgram(prog);
                 var status$1=impl.getProgramParameter(prog,impl.LINK_STATUS);
                 if(1 - (status$1 | 0))
                  {print_endline(_bH_);caml_call1(r[1],0)}
                 return [0,prog]});
           if(match)
            var
             prog=match[1],
             view_size=impl.getUniformLocation(prog,"viewSize"),
             tex=impl.getUniformLocation(prog,"tex"),
             frag=impl.getUniformLocation(prog,"frag"),
             vert_buf=impl.createBuffer(),
             frag_buf=impl.createBuffer(),
             match$0=[0,[0,prog,[0,frag,tex,view_size,vert_buf,frag_buf]]];
           else
            var match$0=0;
           if(match$0)
            {var
              match$1=match$0[1],
              locs=match$1[2],
              shader=match$1[1],
              vao=impl.createVertexArray();
             impl.bindVertexArray(vao);
             impl.bindBuffer(array_buffer,locs[4]);
             impl.enableVertexAttribArray(0);
             impl.enableVertexAttribArray(1);
             vertex_attrib_pointer(impl,0,2,float$0,0,16,0);
             vertex_attrib_pointer(impl,1,2,float$0,0,16,8);
             impl.bindVertexArray(no_handler);
             impl.bindBuffer(array_buffer,locs[5]);
             impl.uniformBlockBinding(shader,locs[1],0);
             var align=impl.getParameter(p);
             caml_call1(printf(_bI_),align);
             caml_call1(printf(_bJ_),size);
             var frag_size=(176 + align | 0) - caml_mod(176,align) | 0;
             caml_call1(printf(_bK_),frag_size);
             var frag_size$0=frag_size / 4 | 0;
             impl.finish();
             var
              frag_uniforms=[0,create$6(17600),0],
              _et_=create$3(128,init$1),
              _eu_=init$0(128,empty$5),
              _ev_=create$6(2),
              _ew_=create(0,10),
              _ex_=has(flags,antialias),
              t=
               [0,
                impl,
                shader,
                locs,
                vao,
                locs[4],
                locs[5],
                frag_size$0,
                _ex_,
                _ew_,
                0,
                0,
                _ev_,
                frag_uniforms,
                flags,
                _eu_,
                _et_,
                0,
                0,
                equal$0,
                0,
                0,
                empty$4],
              o=create_texture(t,885266238,1,1,no_flags$0,create$5(4)),
              default$0=0;
             if(o)var v=o[1],_ey_=v;else var _ey_=default$0;
             t[11] = _ey_;
             var param=[0,t]}
           else
            var param=0;
           if(param)var t$0=param[1],_eQ_=t$0;else var _eQ_=failwith(_bN_);
           var
            t$1=
             [0,
              _eQ_,
              _eP_,
              _eO_,
              _eN_,
              _eM_,
              _eL_,
              _ez_,
              _eK_,
              _eJ_,
              _eI_,
              _eH_,
              _eG_,
              _eF_,
              _eE_,
              _eD_,
              _eC_,
              _eB_,
              _eA_],
            match$2=caml_call1(Font[16],t$1[12]),
            h=match$2[3],
            w=match$2[2],
            data=match$2[1],
            value=create_texture(t$1[1],885266238,w,h,no_flags$0,data);
           if(value)
            {var image=value[1];add(t$1[13],image)}
           else
            failwith(_bP_);
           save(t$1);
           reset$2(t$1);
           set_device_pixel_ratio(t$1,1.);
           return t$1}
         return [0,
                 Buffer,
                 [0,begin,draw,save$0],
                 create$7,
                 save,
                 restore,
                 reset$2,
                 set_device_pixel_ratio,
                 set_shape_antialias,
                 set_miter_limit,
                 set_stroke_width,
                 set_line_cap,
                 set_line_join,
                 begin_frame,
                 cancel_frame,
                 end_frame,
                 [0,
                  reset,
                  transform,
                  translate$0,
                  rotate,
                  skew_x,
                  skew_y,
                  scale$0,
                  current_transform,
                  deg_to_rad,
                  rad_to_deg],
                 [0,scissor,intersect,reset$0],
                 [0,
                  set_composite_operation,
                  set_composite_blend_func,
                  set_composite_blend_func_separ,
                  set_alpha],
                 fill,
                 stroke,
                 [0,
                  begin,
                  close,
                  move_to,
                  line_to,
                  bezier_to,
                  quad_to,
                  rect,
                  winding,
                  arc,
                  arc_to,
                  ellipse,
                  circle,
                  rounded_rect,
                  rounded_rect_varying],
                 [0,dummy,from_color,from_buffer,update_image,size$0],
                 Paint,
                 set_fill_color,
                 set_fill_paint,
                 set_stroke_color,
                 set_stroke_paint,
                 [0,
                  text,
                  text_w,
                  find_font,
                  set_size,
                  set_blur,
                  set_line_height,
                  set_letter_spacing,
                  set_align,
                  set_font_face,
                  set_font_face_id,
                  create$4,
                  bounds,
                  metrics,
                  break_lines,
                  make_empty_rows,
                  empty_glyph_position,
                  glyph_positions,
                  text_box,
                  box_bounds,
                  add_fallback_id,
                  add_fallback,
                  reset_fallback_id,
                  reset_fallback]]}
       (Font),
     create$10=include[3],
     save=include[4],
     restore=include[5],
     set_stroke_width=include[10],
     set_line_cap=include[11],
     set_line_join=include[12],
     begin_frame=include[13],
     end_frame=include[15],
     Transform=include[16],
     Scissor=include[17],
     Global=include[18],
     fill=include[19],
     stroke=include[20],
     Path=include[21],
     Image=include[22],
     Paint=include[23],
     set_fill_color=include[24],
     set_fill_paint=include[25],
     set_stroke_color=include[26],
     Text=include[28],
     canvas=getElementById_exn(_bQ_),
     options={"antialias":false$0,"stencil":true$0},
     ctx_webgl=canvas.getContext("webgl2",options);
    window.wctx = ctx_webgl;
    function clampf(a,mn,mx)
     {return caml_lessthan(a,mn)?mn:caml_greaterthan(a,mx)?mx:a}
    function is_black(c)
     {var _eo_=c[1] == 0.?1:0;
      if(_eo_)
       {var _ep_=c[2] == 0.?1:0;
        if(_ep_)
         var _eq_=c[3] == 0.?1:0,_er_=_eq_?c[4] == 1.?1:0:_eq_;
        else
         var _er_=_ep_}
      else
       var _er_=_eo_;
      return _er_}
    function to_utf8(c)
     {var
       n=
        128 <= c
         ?2048 <= c
           ?65536 <= c?2097152 <= c?67108864 <= c?c <= 2147483647?6:6:5:4:3
           :2
         :1,
       b=caml_create_bytes(n);
      function symbol(b,i,v)
       {var switch$0=0;
        if(0 <= v && ! (255 < v)){var _en_=v;switch$0 = 1}
        if(! switch$0)var _en_=invalid_arg(_b_);
        return caml_bytes_set(b,i,_en_)}
      var n$0=n,c$0=c;
      for(;;)
       {var switcher=n$0 - 1 | 0;
        if(! (5 < switcher >>> 0))
         switch(switcher)
          {case 0:symbol(b,0,c$0);break;
           case 1:
            symbol(b,1,128 | c$0 & 63);
            var c$1=c$0 >>> 6 | 0 | 192,n$1=n$0 - 1 | 0,n$0=n$1,c$0=c$1;
            continue;
           case 2:
            symbol(b,2,128 | c$0 & 63);
            var c$2=c$0 >>> 6 | 0 | 2048,n$2=n$0 - 1 | 0,n$0=n$2,c$0=c$2;
            continue;
           case 3:
            symbol(b,3,128 | c$0 & 63);
            var c$3=c$0 >>> 6 | 0 | 65536,n$3=n$0 - 1 | 0,n$0=n$3,c$0=c$3;
            continue;
           case 4:
            symbol(b,4,128 | c$0 & 63);
            var c$4=c$0 >>> 6 | 0 | 2097152,n$4=n$0 - 1 | 0,n$0=n$4,c$0=c$4;
            continue;
           default:
            symbol(b,5,128 | c$0 & 63);
            var c$5=c$0 >>> 6 | 0 | 67108864,n$5=n$0 - 1 | 0,n$0=n$5,c$0=c$5;
            continue}
        return caml_string_of_bytes(copy(b))}}
    var icon_search=128269,icon_circled_cross=10006,icon_chevron_right=59230;
    function draw_label(vg,text,x,y,w,h)
     {caml_call2(Text[4],vg,15.);
      caml_call2(Text[9],vg,_bX_);
      caml_call2(set_fill_color,vg,rgba(255,255,255,128));
      caml_call2(Text[8],vg,17);
      return caml_call6(Text[1],vg,x,y + h * 0.5,0,0,text)}
    function draw_edit_box_base(vg,x,y,w,h)
     {var
       _el_=rgba(32,32,32,32),
       _em_=rgba(255,255,255,32),
       bg=
        caml_call9
         (Paint[2],vg,x + 1.,y + 1. + 1.5,w - 2.,h - 2.,3.,4.,_em_,_el_);
      caml_call1(Path[1],vg);
      caml_call6(Path[13],vg,x + 1.,y + 1.,w - 2.,h - 2.,3.);
      caml_call2(set_fill_paint,vg,bg);
      caml_call1(fill,vg);
      caml_call1(Path[1],vg);
      caml_call6(Path[13],vg,x + 0.5,y + 0.5,w - 1.,h - 1.,3.5);
      caml_call2(set_stroke_color,vg,rgba(0,0,0,48));
      return caml_call1(stroke,vg)}
    function draw_edit_box(vg,text,x,y,w,h)
     {draw_edit_box_base(vg,x,y,w,h);
      caml_call2(Text[4],vg,17.);
      caml_call2(Text[9],vg,_bY_);
      caml_call2(set_fill_color,vg,rgba(255,255,255,64));
      caml_call2(Text[8],vg,17);
      return caml_call6(Text[1],vg,x + h * 0.3,y + h * 0.5,0,0,text)}
    function draw_button(vg,preicon,text,x,y,w,h,col)
     {var
       _eh_=is_black(col)?16:32,
       _ei_=rgba(0,0,0,_eh_),
       _ej_=is_black(col)?16:32,
       _ek_=rgba(255,255,255,_ej_),
       bg=caml_call7(Paint[1],vg,x,y,x,y + h,_ek_,_ei_);
      caml_call1(Path[1],vg);
      caml_call6(Path[13],vg,x + 1.,y + 1.,w - 2.,h - 2.,3.);
      if(1 - is_black(col))
       {caml_call2(set_fill_color,vg,col);caml_call1(fill,vg)}
      caml_call2(set_fill_paint,vg,bg);
      caml_call1(fill,vg);
      caml_call1(Path[1],vg);
      caml_call6(Path[13],vg,x + 0.5,y + 0.5,w - 1.,h - 1.,3.5);
      caml_call2(set_stroke_color,vg,rgba(0,0,0,48));
      caml_call1(stroke,vg);
      caml_call2(Text[4],vg,17.);
      caml_call2(Text[9],vg,_b1_);
      var tw=caml_call6(Text[12],vg,0.,0.,0,0,text)[2],iw=[0,0.];
      if(preicon)
       {var icon=preicon[1];
        caml_call2(Text[4],vg,h * 1.3);
        caml_call2(Text[9],vg,_b2_);
        iw[1] = caml_call6(Text[12],vg,0.,0.,0,0,icon)[2];
        iw[1] = iw[1] + h * 0.15;
        caml_call2(set_fill_color,vg,rgba(255,255,255,96));
        caml_call2(Text[8],vg,17);
        caml_call6
         (Text[1],
          vg,
          x + w * 0.5 - tw * 0.5 - iw[1] * 0.75,
          y + h * 0.5,
          0,
          0,
          icon)}
      caml_call2(Text[4],vg,17.);
      caml_call2(Text[9],vg,_b3_);
      caml_call2(Text[8],vg,17);
      caml_call2(set_fill_color,vg,rgba(0,0,0,160));
      caml_call6
       (Text[1],
        vg,
        x + w * 0.5 - tw * 0.5 + iw[1] * 0.25,
        y + h * 0.5 - 1.,
        0,
        0,
        text);
      caml_call2(set_fill_color,vg,rgba(255,255,255,160));
      return caml_call6
              (Text[1],
               vg,
               x + w * 0.5 - tw * 0.5 + iw[1] * 0.25,
               y + h * 0.5,
               0,
               0,
               text)}
    var
     lines=caml_call1(Text[15],3),
     glyphs=caml_make_vect(175,Text[16]),
     icon_login=59200,
     icon_trash=59177;
    function init$2(style,name)
     {return [0,style,name,caml_make_vect(100,0.),0]}
    var t$0=init$2(0,_cg_),mx=[0,0.],my=[0,0.],blowup=[0,0];
    function load_data(vg,k)
     {var
       img_canvas=document.createElement("canvas"),
       img_ctx=img_canvas.getContext("2d"),
       images=caml_make_vect(12,Image[1]),
       count=[0,0],
       i=0;
      for(;;)
       {var
         src=caml_call1(sprintf(_ci_),i + 1 | 0),
         id=caml_call1(sprintf(_cj_),i + 1 | 0),
         _ed_=function(pnode){return pnode},
         _ee_=function(param){throw Not_found},
         img=
          case$0
           (document.getElementById(caml_jsstring_of_string(id)),_ee_,_ed_);
        img.onload
        =
        handler
         (function(img,i)
            {return function(param)
              {img_canvas.width = img.width;
               img_canvas.height = img.height;
               img_ctx.drawImage(img,0.,0.);
               var
                w=img.width,
                h=img.height,
                data$0=img_ctx.getImageData(0.,0.,w,h),
                data=new uint8Array(data$0.data),
                img$0=caml_call5(Image[3],vg,data,w,h,no_flags$0);
               if(img$0)
                var img$1=img$0[1],img$2=img$1;
               else
                var img$2=failwith(_ch_);
               caml_check_bound(images,i)[1 + i] = img$2;
               count[1]++;
               return true$0}}
           (img,i));
        img.src = caml_jsstring_of_string(src);
        var _ef_=i + 1 | 0;
        if(11 !== i){var i=_ef_;continue}
        var
         callback=
          function(param)
           {if(12 <= count[1])return caml_call1(k,[0,images]);
            var id=[0,0],d=100.;
            function loop(step,param)
             {if(2147483000. < step)
               var remain=step - 2147483000.,step$0=overflow_limit;
              else
               var remain=0.,step$0=step;
              var
               cb=
                remain == 0.?callback:function(_eg_){return loop(remain,_eg_)};
              id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
              return 0}
            loop(d,0);
            return 0};
        return callback(0)}}
    function scale_canvas_by_body(canvas)
     {var
       body=document.body,
       dpr$0=window.devicePixelRatio,
       dpr$1=1.5 < dpr$0?1.5:dpr$0,
       width=body.clientWidth * dpr$1 | 0,
       height=body.clientHeight * dpr$1 | 0,
       dpr=window.devicePixelRatio,
       _eb_=caml_jsstring_of_string(caml_call1(sprintf(_ck_),width / dpr));
      canvas.style.width = _eb_;
      var
       _ec_=
        caml_jsstring_of_string(caml_call1(sprintf(_cl_),height / dpr));
      canvas.style.height = _ec_;
      canvas.width = width;
      return canvas.height = height}
    var h=canvas.height,w=canvas.width;
    window.onresize
    =
    handler(function(evt){scale_canvas_by_body(canvas);return true$0});
    window.onclick
    =
    handler(function(param){blowup[1] = 1 - blowup[1];return false$0});
    ctx_webgl.viewport(0,0,w,h);
    ctx_webgl.clearColor(1.,0.5,0.,1.);
    ctx_webgl.clear
     (ctx_webgl.COLOR_BUFFER_BIT
      |
      ctx_webgl.DEPTH_BUFFER_BIT
      |
      ctx_webgl.STENCIL_BUFFER_BIT);
    canvas.onmousemove
    =
    handler
     (function(evt)
       {mx[1] = evt.clientX * window.devicePixelRatio;
        my[1] = evt.clientY * window.devicePixelRatio;
        return false$0});
    var touch="touchmove";
    addEventListener
     (canvas,
      touch,
      handler
       (function(evt)
         {var lst=evt.touches,x=lst[0],match=x === undefined$0?0:[0,x];
          if(match)
           {var evt$0=match[1];
            mx[1] = evt$0.clientX * window.devicePixelRatio;
            my[1] = evt$0.clientY * window.devicePixelRatio}
          return 1 < lst.length?true$0:false$0}),
      false$0);
    var vg=caml_call2(create$10,11,ctx_webgl);
    caml_call3(Text[11],vg,_cn_,_cm_);
    caml_call3(Text[11],vg,_cp_,_co_);
    caml_call3(Text[11],vg,_cr_,_cq_);
    caml_call3(Text[11],vg,_ct_,_cs_);
    caml_call3(Text[11],vg,_cv_,_cu_);
    caml_call3(Text[11],vg,_cx_,_cw_);
    caml_call3(Text[21],vg,_cz_,_cy_);
    caml_call3(Text[21],vg,_cB_,_cA_);
    document.onkeyup
    =
    handler
     (function(evt)
       {if(32 === evt.keyCode)blowup[1] = 1 - blowup[1];return false$0});
    load_data
     (vg,
      function(data)
       {scale_canvas_by_body(canvas);
        var prev=[0,0.],_cG_=0.;
        function closure(vg,data,now)
         {ctx_webgl.clearColor(0.3,0.3,0.32,1.);
          ctx_webgl.clear
           (ctx_webgl.COLOR_BUFFER_BIT
            |
            ctx_webgl.DEPTH_BUFFER_BIT
            |
            ctx_webgl.STENCIL_BUFFER_BIT);
          var width$0=canvas.width,height=canvas.height;
          ctx_webgl.viewport(0,0,width$0,height);
          caml_call4(begin_frame,vg,width$0,height,1.);
          var t=now / 1000.,dt=t - prev[1];
          prev[1] = t;
          t$0[4] = caml_mod(t$0[4] + 1 | 0,t$0[3].length - 1);
          caml_array_set(t$0[3],t$0[4],dt);
          var
           _d__=my[1],
           _d$_=mx[1],
           x$0=width$0 - 250.,
           lx=x$0 + 34.5,
           rx=x$0 + 150. - 34.5,
           blink=1. - Math.pow(Math.sin(t * 0.5),200.) * 0.8,
           _d9_=blowup[1],
           _cK_=rgba(0,0,0,16),
           _cL_=rgba(0,0,0,32),
           bg=caml_call7(Paint[1],vg,x$0,100.,x$0 + 15.,150.,_cL_,_cK_);
          caml_call1(Path[1],vg);
          caml_call5(Path[11],vg,lx + 3.,116.,34.5,50.);
          caml_call5(Path[11],vg,rx + 3.,116.,34.5,50.);
          caml_call2(set_fill_paint,vg,bg);
          caml_call1(fill,vg);
          var
           _cM_=rgba(128,128,128,255),
           _cN_=rgba(220,220,220,255),
           bg$0=caml_call7(Paint[1],vg,x$0,75.,x$0 + 15.,150.,_cN_,_cM_);
          caml_call1(Path[1],vg);
          caml_call5(Path[11],vg,lx,100.,34.5,50.);
          caml_call5(Path[11],vg,rx,100.,34.5,50.);
          caml_call2(set_fill_paint,vg,bg$0);
          caml_call1(fill,vg);
          var
           dx=(_d$_ - rx) / 345.,
           dy=(_d__ - 100.) / 500.,
           d=Math.sqrt(dx * dx + dy * dy),
           ex=34.5,
           ey=50.,
           ly=100.,
           ry=100.,
           br=17.25;
          if(1. < d)
           var dy$0=dy / d,dy$1=dy$0,dx$0=dx / d;
          else
           var dy$1=dy,dx$0=dx;
          var dx$1=dx$0 * 34.5 * 0.4,dy$2=dy$1 * 50. * 0.5;
          caml_call1(Path[1],vg);
          caml_call5
           (Path[11],
            vg,
            lx + dx$1,
            100. + dy$2 + 12.5 * (1. - blink),
            br,
            17.25 * blink);
          caml_call2(set_fill_color,vg,rgba(32,32,32,255));
          caml_call1(fill,vg);
          caml_call1(Path[1],vg);
          caml_call5
           (Path[11],
            vg,
            rx + dx$1,
            100. + dy$2 + 12.5 * (1. - blink),
            br,
            17.25 * blink);
          caml_call2(set_fill_color,vg,rgba(32,32,32,255));
          caml_call1(fill,vg);
          var
           _cO_=rgba(255,255,255,0),
           _cP_=rgba(255,255,255,128),
           gloss=caml_call7(Paint[3],vg,lx - 8.625,75.,3.45,25.875,_cP_,_cO_);
          caml_call1(Path[1],vg);
          caml_call5(Path[11],vg,lx,ly,ex,ey);
          caml_call2(set_fill_paint,vg,gloss);
          caml_call1(fill,vg);
          var
           _cQ_=rgba(255,255,255,0),
           _cR_=rgba(255,255,255,128),
           gloss$0=
            caml_call7(Paint[3],vg,rx - 8.625,75.,3.45,25.875,_cR_,_cQ_);
          caml_call1(Path[1],vg);
          caml_call5(Path[11],vg,rx,ry,ex,ey);
          caml_call2(set_fill_paint,vg,gloss$0);
          caml_call1(fill,vg);
          var x$1=width$0 - 450.;
          caml_call1(save,vg);
          caml_call2(Text[4],vg,15.);
          caml_call2(Text[9],vg,_b6_);
          caml_call2(Text[8],vg,9);
          var
           line_h=caml_call1(Text[13],vg)[3],
           start=[0,0],
           y$0=[0,50.],
           lnum=[0,0],
           gutter=[0,0],
           gx=[0,0.],
           gy=[0,0.],
           r=[0,0],
           width=150.,
           end=175;
          for(;;)
           {var
             count=
              caml_call7(Text[14],vg,width,3,[0,start[1]],[0,end],lines,text);
            if(0 === count)
             {if(0 < gutter[1])
               {var _dS_=gutter[1],txt=caml_call1(sprintf(_b7_),_dS_);
                caml_call2(Text[4],vg,12.);
                caml_call2(Text[8],vg,20);
                var b=caml_call6(Text[12],vg,gx[1],gy[1],0,0,txt);
                caml_call1(Path[1],vg);
                caml_call2(set_fill_color,vg,rgba(255,192,0,255));
                caml_call6
                 (Path[13],
                  vg,
                  b[1][1] - 4.,
                  b[1][2] - 2.,
                  b[1][3] - b[1][1] + 8.,
                  b[1][4] - b[1][2] + 4.,
                  (b[1][4] - b[1][2] + 4.) / 2. - 1.);
                caml_call1(fill,vg);
                caml_call2(set_fill_color,vg,rgba(32,32,32,255));
                caml_call6(Text[1],vg,gx[1],gy[1],0,0,txt)}
              y$0[1] = y$0[1] + 20.;
              caml_call2(Text[4],vg,11.);
              caml_call2(Text[8],vg,9);
              caml_call2(Text[6],vg,1.2);
              var
               bounds=caml_call7(Text[19],vg,x$1,y$0[1],150.,0,0,hover_text),
               gx$1=clampf(_d$_,bounds[1],bounds[3]) - _d$_,
               gy$0=clampf(_d__,bounds[2],bounds[4]) - _d__,
               a$0=Math.sqrt(gx$1 * gx$1 + gy$0 * gy$0) / 30.,
               a$1=clampf(a$0,0.,1.);
              caml_call2(Global[4],vg,a$1);
              caml_call1(Path[1],vg);
              caml_call2(set_fill_color,vg,rgba(220,220,220,255));
              caml_call6
               (Path[13],
                vg,
                bounds[1] - 2.,
                bounds[2] - 2.,
                bounds[3] - bounds[1] + 4.,
                bounds[4] - bounds[2] + 4.,
                3.);
              var px$0=(bounds[3] + bounds[1]) / 2.;
              caml_call3(Path[3],vg,px$0,bounds[2] - 10.);
              caml_call3(Path[4],vg,px$0 + 7.,bounds[2] + 1.);
              caml_call3(Path[4],vg,px$0 - 7.,bounds[2] + 1.);
              caml_call1(fill,vg);
              caml_call2(set_fill_color,vg,rgba(0,0,0,220));
              caml_call7(Text[18],vg,x$1,y$0[1],150.,0,0,hover_text);
              caml_call1(restore,vg);
              var h=height / 2.,y$1=height / 2.,samples=caml_make_vect(6,0.);
              caml_array_set
               (samples,
                0,
                (1. + Math.sin(t * 1.2345 + Math.cos(t * 0.33457) * 0.44))
                *
                0.5);
              caml_array_set
               (samples,
                1,
                (1. + Math.sin(t * 0.68363 + Math.cos(t * 1.3) * 1.55)) * 0.5);
              caml_array_set
               (samples,
                2,
                (1. + Math.sin(t * 1.1642 + Math.cos(t * 0.33457) * 1.24))
                *
                0.5);
              caml_array_set
               (samples,
                3,
                (1. + Math.sin(t * 0.56345 + Math.cos(t * 1.63) * 0.14)) * 0.5);
              caml_array_set
               (samples,
                4,
                (1. + Math.sin(t * 1.6245 + Math.cos(t * 0.254) * 0.3)) * 0.5);
              caml_array_set
               (samples,
                5,
                (1. + Math.sin(t * 0.345 + Math.cos(t * 0.03) * 0.6)) * 0.5);
              var
               sx=caml_make_vect(6,0.),
               sy=caml_make_vect(6,0.),
               dx$2=width$0 / 5.,
               i$5=0,
               x$2=0.;
              for(;;)
               {caml_array_set(sx,i$5,0. + i$5 * dx$2);
                caml_array_set
                 (sy,i$5,y$1 + h * caml_array_get(samples,i$5) * 0.8);
                var _dd_=i$5 + 1 | 0;
                if(5 !== i$5){var i$5=_dd_;continue}
                var
                 _c6_=rgba(0,160,192,64),
                 _c7_=rgba(0,160,192,0),
                 bg$6=caml_call7(Paint[1],vg,x$2,y$1,x$2,y$1 + h,_c7_,_c6_);
                caml_call1(Path[1],vg);
                caml_call3
                 (Path[3],vg,caml_array_get(sx,0),caml_array_get(sy,0));
                var i$4=1;
                for(;;)
                 {caml_call7
                   (Path[5],
                    vg,
                    caml_array_get(sx,i$4 - 1 | 0) + dx$2 * 0.5,
                    caml_array_get(sy,i$4 - 1 | 0),
                    caml_array_get(sx,i$4) - dx$2 * 0.5,
                    caml_array_get(sy,i$4),
                    caml_array_get(sx,i$4),
                    caml_array_get(sy,i$4));
                  var _dc_=i$4 + 1 | 0;
                  if(5 !== i$4){var i$4=_dc_;continue}
                  caml_call3(Path[4],vg,0. + width$0,y$1 + h);
                  caml_call3(Path[4],vg,x$2,y$1 + h);
                  caml_call2(set_fill_paint,vg,bg$6);
                  caml_call1(fill,vg);
                  caml_call1(Path[1],vg);
                  caml_call3
                   (Path[3],vg,caml_array_get(sx,0),caml_array_get(sy,0) + 2.);
                  var i$3=1;
                  for(;;)
                   {caml_call7
                     (Path[5],
                      vg,
                      caml_array_get(sx,i$3 - 1 | 0) + dx$2 * 0.5,
                      caml_array_get(sy,i$3 - 1 | 0) + 2.,
                      caml_array_get(sx,i$3) - dx$2 * 0.5,
                      caml_array_get(sy,i$3) + 2.,
                      caml_array_get(sx,i$3),
                      caml_array_get(sy,i$3) + 2.);
                    var _db_=i$3 + 1 | 0;
                    if(5 !== i$3){var i$3=_db_;continue}
                    caml_call2(set_stroke_color,vg,rgba(0,0,0,32));
                    caml_call2(set_stroke_width,vg,3.);
                    caml_call1(stroke,vg);
                    caml_call1(Path[1],vg);
                    caml_call3
                     (Path[3],vg,caml_array_get(sx,0),caml_array_get(sy,0));
                    var i$2=1;
                    for(;;)
                     {caml_call7
                       (Path[5],
                        vg,
                        caml_array_get(sx,i$2 - 1 | 0) + dx$2 * 0.5,
                        caml_array_get(sy,i$2 - 1 | 0),
                        caml_array_get(sx,i$2) - dx$2 * 0.5,
                        caml_array_get(sy,i$2),
                        caml_array_get(sx,i$2),
                        caml_array_get(sy,i$2));
                      var _da_=i$2 + 1 | 0;
                      if(5 !== i$2){var i$2=_da_;continue}
                      caml_call2(set_stroke_color,vg,rgba(0,160,192,255));
                      caml_call2(set_stroke_width,vg,3.);
                      caml_call1(stroke,vg);
                      var i$1=0;
                      for(;;)
                       {var
                         _c__=rgba(0,0,0,32),
                         bg$7=
                          caml_call7
                           (Paint[3],
                            vg,
                            caml_array_get(sx,i$1),
                            caml_array_get(sy,i$1),
                            3.,
                            8.,
                            _c__,
                            transparent);
                        caml_call1(Path[1],vg);
                        caml_call5
                         (Path[7],
                          vg,
                          caml_array_get(sx,i$1) - 10.,
                          caml_array_get(sy,i$1) - 10. + 2.,
                          20.,
                          20.);
                        caml_call2(set_fill_paint,vg,bg$7);
                        caml_call1(fill,vg);
                        var _c$_=i$1 + 1 | 0;
                        if(5 !== i$1){var i$1=_c$_;continue}
                        caml_call1(Path[1],vg);
                        var i$0=0;
                        for(;;)
                         {caml_call4
                           (Path[12],
                            vg,
                            caml_array_get(sx,i$0),
                            caml_array_get(sy,i$0),
                            4.);
                          var _c9_=i$0 + 1 | 0;
                          if(5 !== i$0){var i$0=_c9_;continue}
                          caml_call2(set_fill_color,vg,rgba(0,160,192,255));
                          caml_call1(fill,vg);
                          caml_call1(Path[1],vg);
                          var i=0;
                          for(;;)
                           {caml_call4
                             (Path[12],vg,caml_array_get(sx,i),caml_array_get(sy,i),2.);
                            var _c8_=i + 1 | 0;
                            if(5 !== i){var i=_c8_;continue}
                            caml_call2(set_fill_color,vg,rgba(220,220,220,255));
                            caml_call1(fill,vg);
                            caml_call2(set_stroke_width,vg,1.);
                            var
                             y$2=height - 300.,
                             x$3=width$0 - 300.,
                             hue=Math.sin(t * 0.12);
                            caml_call1(save,vg);
                            var cx=x$3 + 125.,cy$0=y$2 + 125.,i$9=0,r1=120.,r0=100.;
                            for(;;)
                             {var
                               a0=
                                i$9
                                /
                                6.
                                *
                                3.14159265358979312
                                *
                                2.
                                -
                                0.00416666666666666661,
                               a1=
                                (i$9 + 1 | 0)
                                /
                                6.
                                *
                                3.14159265358979312
                                *
                                2.
                                +
                                0.00416666666666666661;
                              caml_call1(Path[1],vg);
                              caml_call7(Path[9],vg,cx,cy$0,r0,a0,a1,1);
                              caml_call7(Path[9],vg,cx,cy$0,r1,a1,a0,0);
                              caml_call1(Path[2],vg);
                              var
                               ax=cx + Math.cos(a0) * 220. * 0.5,
                               ay=cy$0 + Math.sin(a0) * 220. * 0.5,
                               bx=cx + Math.cos(a1) * 220. * 0.5,
                               by=cy$0 + Math.sin(a1) * 220. * 0.5,
                               _dl_=hsla(a1 / 6.28318530717958623,1.,0.55,255),
                               _dm_=hsla(a0 / 6.28318530717958623,1.,0.55,255),
                               paint$3=caml_call7(Paint[1],vg,ax,ay,bx,by,_dm_,_dl_);
                              caml_call2(set_fill_paint,vg,paint$3);
                              caml_call1(fill,vg);
                              var _dn_=i$9 + 1 | 0;
                              if(5 !== i$9){var i$9=_dn_;continue}
                              caml_call1(Path[1],vg);
                              caml_call4(Path[12],vg,cx,cy$0,99.5);
                              caml_call4(Path[12],vg,cx,cy$0,120.5);
                              caml_call2(set_stroke_color,vg,rgba(0,0,0,64));
                              caml_call2(set_stroke_width,vg,1.);
                              caml_call1(stroke,vg);
                              caml_call1(save,vg);
                              caml_call3(Transform[3],vg,cx,cy$0);
                              caml_call2(Transform[4],vg,hue * 3.14159265358979312 * 2.);
                              caml_call2(set_stroke_width,vg,2.);
                              caml_call1(Path[1],vg);
                              caml_call5(Path[7],vg,99.,-3.,22.,6.);
                              caml_call2(set_stroke_color,vg,rgba(255,255,255,192));
                              caml_call1(stroke,vg);
                              var
                               _di_=rgba(0,0,0,128),
                               paint=
                                caml_call9
                                 (Paint[2],vg,97.,-5.,26.,10.,2.,4.,_di_,transparent);
                              caml_call1(Path[1],vg);
                              caml_call5(Path[7],vg,88.,-14.,44.,28.);
                              caml_call5(Path[7],vg,98.,-4.,24.,8.);
                              caml_call2(Path[8],vg,1);
                              caml_call2(set_fill_paint,vg,paint);
                              caml_call1(fill,vg);
                              caml_call1(Path[1],vg);
                              caml_call3(Path[3],vg,94.,0.);
                              caml_call3
                               (Path[4],vg,-46.9999999999999787,81.4063879557372445);
                              caml_call3
                               (Path[4],vg,-46.9999999999999787,-81.4063879557372445);
                              caml_call1(Path[2],vg);
                              var
                               _dj_=hsla(hue,1.,0.5,255),
                               paint$0=
                                caml_call7
                                 (Paint[1],
                                  vg,
                                  94.,
                                  0.,
                                  -46.9999999999999787,
                                  81.4063879557372445,
                                  _dj_,
                                  white);
                              caml_call2(set_fill_paint,vg,paint$0);
                              caml_call1(fill,vg);
                              var
                               paint$1=
                                caml_call7
                                 (Paint[1],
                                  vg,
                                  23.5000000000000107,
                                  40.7031939778686223,
                                  -46.9999999999999787,
                                  -81.4063879557372445,
                                  transparent,
                                  black);
                              caml_call2(set_fill_paint,vg,paint$1);
                              caml_call1(fill,vg);
                              caml_call2(set_stroke_color,vg,rgba(0,0,0,64));
                              caml_call1(stroke,vg);
                              caml_call2(set_stroke_width,vg,2.);
                              caml_call1(Path[1],vg);
                              caml_call4
                               (Path[12],vg,-14.0999999999999925,32.5625551822949,5.);
                              caml_call2(set_stroke_color,vg,rgba(255,255,255,192));
                              caml_call1(stroke,vg);
                              var
                               _dk_=rgba(0,0,0,64),
                               paint$2=
                                caml_call7
                                 (Paint[3],
                                  vg,
                                  -14.0999999999999925,
                                  32.5625551822949,
                                  7.,
                                  9.,
                                  _dk_,
                                  transparent);
                              caml_call1(Path[1],vg);
                              caml_call5
                               (Path[7],vg,-34.0999999999999943,12.5625551822949,40.,40.);
                              caml_call4
                               (Path[12],vg,-14.0999999999999925,32.5625551822949,7.);
                              caml_call2(Path[8],vg,1);
                              caml_call2(set_fill_paint,vg,paint$2);
                              caml_call1(fill,vg);
                              caml_call1(restore,vg);
                              caml_call1(restore,vg);
                              var y$3=height - 50.,pts=caml_make_vect(8,0.);
                              caml_call1(save,vg);
                              caml_array_set
                               (pts,
                                0,
                                Math.cos(t * 0.3)
                                *
                                56.6666666666666714
                                *
                                0.5
                                -
                                14.1666666666666679);
                              caml_array_set
                               (pts,1,Math.sin(t * 0.3) * 56.6666666666666714 * 0.5);
                              caml_array_set(pts,2,-14.1666666666666679);
                              caml_array_set(pts,3,0.);
                              caml_array_set(pts,4,14.1666666666666679);
                              caml_array_set(pts,5,0.);
                              caml_array_set
                               (pts,
                                6,
                                14.1666666666666679
                                +
                                Math.cos(- t * 0.3)
                                *
                                56.6666666666666714
                                *
                                0.5);
                              caml_array_set
                               (pts,7,Math.sin(- t * 0.3) * 56.6666666666666714 * 0.5);
                              var joins=[0,0,2,1],caps=[0,0,1,2],i$6=0;
                              c:
                              for(;;)
                               {var j=0;
                                for(;;)
                                 {var
                                   fx=
                                    148.333333333333343
                                    +
                                    ((i$6 * 3 | 0) + j | 0)
                                    /
                                    9.
                                    *
                                    600.
                                    +
                                    5.,
                                   fy=y$3 - 28.3333333333333357 + 5.;
                                  caml_call2
                                   (set_line_cap,vg,caml_check_bound(caps,i$6)[1 + i$6]);
                                  caml_call2
                                   (set_line_join,vg,caml_check_bound(joins,j)[1 + j]);
                                  caml_call2(set_stroke_width,vg,17.);
                                  caml_call2(set_stroke_color,vg,rgba(0,0,0,160));
                                  caml_call1(Path[1],vg);
                                  caml_call3
                                   (Path[3],
                                    vg,
                                    fx + caml_array_get(pts,0),
                                    fy + caml_array_get(pts,1));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,2),
                                    fy + caml_array_get(pts,3));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,4),
                                    fy + caml_array_get(pts,5));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,6),
                                    fy + caml_array_get(pts,7));
                                  caml_call1(stroke,vg);
                                  caml_call2(set_line_cap,vg,0);
                                  caml_call2(set_line_join,vg,1);
                                  caml_call2(set_stroke_width,vg,1.);
                                  caml_call2(set_stroke_color,vg,rgba(0,192,255,255));
                                  caml_call1(Path[1],vg);
                                  caml_call3
                                   (Path[3],
                                    vg,
                                    fx + caml_array_get(pts,0),
                                    fy + caml_array_get(pts,1));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,2),
                                    fy + caml_array_get(pts,3));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,4),
                                    fy + caml_array_get(pts,5));
                                  caml_call3
                                   (Path[4],
                                    vg,
                                    fx + caml_array_get(pts,6),
                                    fy + caml_array_get(pts,7));
                                  caml_call1(stroke,vg);
                                  var _df_=j + 1 | 0;
                                  if(2 !== j){var j=_df_;continue}
                                  var _de_=i$6 + 1 | 0;
                                  if(2 !== i$6){var i$6=_de_;continue c}
                                  caml_call1(restore,vg);
                                  caml_call1(save,vg);
                                  caml_call2(set_stroke_color,vg,black);
                                  var y=[0,50.],i$7=0,x$4=10.;
                                  for(;;)
                                   {var w=(i$7 + 0.5) * 0.1;
                                    caml_call2(set_stroke_width,vg,w);
                                    caml_call1(Path[1],vg);
                                    caml_call3(Path[3],vg,x$4,y[1]);
                                    caml_call3(Path[4],vg,40.,y[1] + 9.);
                                    caml_call1(stroke,vg);
                                    y[1] = y[1] + 10.;
                                    var _dg_=i$7 + 1 | 0;
                                    if(19 !== i$7){var i$7=_dg_;continue}
                                    caml_call1(restore,vg);
                                    var caps$0=[0,0,1,2];
                                    caml_call1(save,vg);
                                    caml_call1(Path[1],vg);
                                    caml_call5(Path[7],vg,6.,300.,38.,40.);
                                    caml_call2(set_fill_color,vg,rgba(255,255,255,32));
                                    caml_call1(fill,vg);
                                    caml_call1(Path[1],vg);
                                    caml_call5(Path[7],vg,10.,300.,30.,40.);
                                    caml_call2(set_fill_color,vg,rgba(255,255,255,32));
                                    caml_call1(fill,vg);
                                    caml_call2(set_stroke_width,vg,8.);
                                    var i$8=0,x$5=10.;
                                    for(;;)
                                     {caml_call2
                                       (set_line_cap,vg,caml_check_bound(caps$0,i$8)[1 + i$8]);
                                      caml_call2(set_stroke_color,vg,black);
                                      caml_call1(Path[1],vg);
                                      caml_call3(Path[3],vg,x$5,300. + i$8 * 10. + 5.);
                                      caml_call3(Path[4],vg,40.,300. + i$8 * 10. + 5.);
                                      caml_call1(stroke,vg);
                                      var _dh_=i$8 + 1 | 0;
                                      if(2 !== i$8){var i$8=_dh_;continue}
                                      caml_call1(restore,vg);
                                      var y$4=height - 80.;
                                      caml_call1(save,vg);
                                      caml_call3(Transform[3],vg,50.,y$4);
                                      var _do_=caml_call1(Transform[9],5.);
                                      caml_call2(Transform[4],vg,_do_);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,-20.,-20.,60.,40.);
                                      caml_call2(set_fill_color,vg,rgba(255,0,0,255));
                                      caml_call1(fill,vg);
                                      caml_call5(Scissor[1],vg,-20.,-20.,60.,40.);
                                      caml_call3(Transform[3],vg,40.,0.);
                                      caml_call2(Transform[4],vg,t);
                                      caml_call1(save,vg);
                                      caml_call1(Scissor[3],vg);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,-20.,-10.,60.,30.);
                                      caml_call2(set_fill_color,vg,rgba(255,128,0,64));
                                      caml_call1(fill,vg);
                                      caml_call1(restore,vg);
                                      caml_call5(Scissor[2],vg,-20.,-10.,60.,30.);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,-20.,-10.,60.,30.);
                                      caml_call2(set_fill_color,vg,rgba(255,128,0,255));
                                      caml_call1(fill,vg);
                                      caml_call1(restore,vg);
                                      caml_call1(save,vg);
                                      if(_d9_)
                                       {caml_call2
                                         (Transform[4],
                                          vg,
                                          Math.sin(t * 0.3) * 5. / 180. * 3.14159265358979312);
                                        caml_call3(Transform[7],vg,2.,2.)}
                                      caml_call1(save,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,50.,50.,300.,400.,3.);
                                      caml_call2(set_fill_color,vg,rgba(28,30,34,192));
                                      caml_call1(fill,vg);
                                      var
                                       _cH_=rgba(0,0,0,128),
                                       shadow=
                                        caml_call9
                                         (Paint[2],vg,50.,52.,300.,400.,6.,10.,_cH_,transparent);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,40.,40.,320.,430.);
                                      caml_call6(Path[13],vg,50.,50.,300.,400.,3.);
                                      caml_call2(Path[8],vg,1);
                                      caml_call2(set_fill_paint,vg,shadow);
                                      caml_call1(fill,vg);
                                      var
                                       _cI_=rgba(0,0,0,16),
                                       _cJ_=rgba(255,255,255,8),
                                       header=caml_call7(Paint[1],vg,50.,50.,50.,65.,_cJ_,_cI_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,51.,51.,298.,30.,2.);
                                      caml_call2(set_fill_paint,vg,header);
                                      caml_call1(fill,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call3(Path[3],vg,50.5,80.5);
                                      caml_call3(Path[4],vg,349.5,80.5);
                                      caml_call2(set_stroke_color,vg,rgba(0,0,0,32));
                                      caml_call1(stroke,vg);
                                      caml_call2(Text[4],vg,15.);
                                      caml_call2(Text[9],vg,_bR_);
                                      caml_call2(Text[8],vg,18);
                                      caml_call2(Text[5],vg,2.);
                                      caml_call2(set_fill_color,vg,rgba(0,0,0,128));
                                      caml_call6(Text[1],vg,200.,67.,0,0,title);
                                      caml_call2(Text[5],vg,0.);
                                      caml_call2(set_fill_color,vg,rgba(220,220,220,160));
                                      caml_call6(Text[1],vg,200.,66.,0,0,title);
                                      caml_call1(restore,vg);
                                      var
                                       y$5=[0,95.],
                                       _dT_=y$5[1],
                                       _cS_=rgba(0,0,0,92),
                                       _cT_=rgba(0,0,0,16),
                                       bg$1=
                                        caml_call9
                                         (Paint[2],vg,60.,_dT_ + 1.5,280.,25.,12.5,5.,_cT_,_cS_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,60.,_dT_,280.,25.,11.5);
                                      caml_call2(set_fill_paint,vg,bg$1);
                                      caml_call1(fill,vg);
                                      caml_call2(Text[4],vg,32.5);
                                      caml_call2(Text[9],vg,_bS_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,64));
                                      caml_call2(Text[8],vg,18);
                                      var _cU_=to_utf8(icon_search);
                                      caml_call6
                                       (Text[1],vg,73.75,_dT_ + 13.7500000000000018,0,0,_cU_);
                                      caml_call2(Text[4],vg,17.);
                                      caml_call2(Text[9],vg,_bT_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,32));
                                      caml_call2(Text[8],vg,17);
                                      caml_call6(Text[1],vg,86.25,_dT_ + 12.5,0,0,text$0);
                                      caml_call2(Text[4],vg,32.5);
                                      caml_call2(Text[9],vg,_bU_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,32));
                                      caml_call2(Text[8],vg,18);
                                      var _cV_=to_utf8(icon_circled_cross);
                                      caml_call6
                                       (Text[1],vg,326.25,_dT_ + 13.7500000000000018,0,0,_cV_);
                                      y$5[1] = y$5[1] + 40.;
                                      var
                                       _dU_=y$5[1],
                                       _cW_=rgba(0,0,0,16),
                                       _cX_=rgba(255,255,255,16),
                                       bg$2=
                                        caml_call7(Paint[1],vg,60.,_dU_,60.,_dU_ + 28.,_cX_,_cW_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,61.,_dU_ + 1.,278.,26.,3.);
                                      caml_call2(set_fill_paint,vg,bg$2);
                                      caml_call1(fill,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,60.5,_dU_ + 0.5,279.,27.,3.5);
                                      caml_call2(set_stroke_color,vg,rgba(0,0,0,48));
                                      caml_call1(stroke,vg);
                                      caml_call2(Text[4],vg,17.);
                                      caml_call2(Text[9],vg,_bV_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,160));
                                      caml_call2(Text[8],vg,17);
                                      caml_call6(Text[1],vg,68.4,_dU_ + 14.,0,0,text$1);
                                      caml_call2(Text[4],vg,36.4);
                                      caml_call2(Text[9],vg,_bW_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,64));
                                      caml_call2(Text[8],vg,18);
                                      var _cY_=to_utf8(icon_chevron_right);
                                      caml_call6(Text[1],vg,326.,_dU_ + 14.,0,0,_cY_);
                                      var popy=y$5[1] + 14.;
                                      y$5[1] = y$5[1] + 45.;
                                      draw_label(vg,_b8_,60.,y$5[1],280.,20.);
                                      y$5[1] = y$5[1] + 25.;
                                      draw_edit_box(vg,_b9_,60.,y$5[1],280.,28.);
                                      y$5[1] = y$5[1] + 35.;
                                      draw_edit_box(vg,_b__,60.,y$5[1],280.,28.);
                                      y$5[1] = y$5[1] + 38.;
                                      var _dV_=y$5[1];
                                      caml_call2(Text[4],vg,15.);
                                      caml_call2(Text[9],vg,_b4_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,160));
                                      caml_call2(Text[8],vg,17);
                                      caml_call6(Text[1],vg,88.,_dV_ + 14.,0,0,text$2);
                                      var
                                       _cZ_=rgba(0,0,0,92),
                                       _c0_=rgba(0,0,0,32),
                                       bg$3=
                                        caml_call9
                                         (Paint[2],
                                          vg,
                                          61.,
                                          _dV_ + 14. - 9. + 1.,
                                          18.,
                                          18.,
                                          3.,
                                          3.,
                                          _c0_,
                                          _cZ_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,61.,_dV_ + 14. - 9.,18.,18.,3.);
                                      caml_call2(set_fill_paint,vg,bg$3);
                                      caml_call1(fill,vg);
                                      caml_call2(Text[4],vg,33.);
                                      caml_call2(Text[9],vg,_b5_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,128));
                                      caml_call2(Text[8],vg,18);
                                      caml_call6(Text[1],vg,71.,_dV_ + 14.,0,0,icon_check);
                                      var _dW_=rgba(0,96,128,255),_dX_=y$5[1];
                                      draw_button
                                       (vg,[0,to_utf8(icon_login)],_b$_,198.,_dX_,140.,28.,_dW_);
                                      y$5[1] = y$5[1] + 45.;
                                      draw_label(vg,_ca_,60.,y$5[1],280.,20.);
                                      y$5[1] = y$5[1] + 25.;
                                      var _dY_=y$5[1];
                                      draw_edit_box_base(vg,240.,_dY_,100.,28.);
                                      var uw=caml_call6(Text[12],vg,0.,0.,0,0,units);
                                      caml_call2(Text[4],vg,15.);
                                      caml_call2(Text[9],vg,_bZ_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,64));
                                      caml_call2(Text[8],vg,20);
                                      caml_call6(Text[1],vg,331.6,_dY_ + 14.,0,0,units);
                                      caml_call2(Text[4],vg,17.);
                                      caml_call2(Text[9],vg,_b0_);
                                      caml_call2(set_fill_color,vg,rgba(255,255,255,128));
                                      caml_call2(Text[8],vg,20);
                                      caml_call6
                                       (Text[1],vg,340. - uw[2] - 14.,_dY_ + 14.,0,0,text$3);
                                      var cy=y$5[1] + 14.;
                                      caml_call1(save,vg);
                                      var
                                       _c1_=rgba(0,0,0,128),
                                       _c2_=rgba(0,0,0,32),
                                       bg$4=
                                        caml_call9
                                         (Paint[2],vg,60.,cy - 2. + 1.,170.,4.,2.,2.,_c2_,_c1_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,60.,cy - 2.,170.,4.,2.);
                                      caml_call2(set_fill_paint,vg,bg$4);
                                      caml_call1(fill,vg);
                                      var
                                       _c3_=rgba(0,0,0,64),
                                       bg$5=
                                        caml_call7(Paint[3],vg,128.,cy + 1.,4.,10.,_c3_,transparent);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,116.,cy - 7. - 5.,24.,27.);
                                      caml_call4(Path[12],vg,128.,cy,7.);
                                      caml_call2(Path[8],vg,1);
                                      caml_call2(set_fill_paint,vg,bg$5);
                                      caml_call1(fill,vg);
                                      var
                                       _c4_=rgba(0,0,0,16),
                                       _c5_=rgba(255,255,255,16),
                                       knob=
                                        caml_call7(Paint[1],vg,60.,cy - 7.,60.,cy + 7.,_c5_,_c4_);
                                      caml_call1(Path[1],vg);
                                      caml_call4(Path[12],vg,128.,cy,6.);
                                      caml_call2(set_fill_color,vg,rgba(40,43,48,255));
                                      caml_call1(fill,vg);
                                      caml_call2(set_fill_paint,vg,knob);
                                      caml_call1(fill,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call4(Path[12],vg,128.,cy,6.5);
                                      caml_call2(set_stroke_color,vg,rgba(0,0,0,92));
                                      caml_call1(stroke,vg);
                                      caml_call1(restore,vg);
                                      y$5[1] = y$5[1] + 55.;
                                      var _dZ_=rgba(128,16,8,255),_d0_=y$5[1];
                                      draw_button
                                       (vg,[0,to_utf8(icon_trash)],_cb_,60.,_d0_,160.,28.,_dZ_);
                                      draw_button(vg,0,_cc_,230.,y$5[1],110.,28.,transparent);
                                      var
                                       _d1_=data[1],
                                       y$6=popy - 30.,
                                       len=_d1_.length - 1,
                                       stack_h=len / 2. * 70. + 10.,
                                       u=(1. + Math.cos(t * 0.5)) * 0.5,
                                       u2=(1. + Math.cos(t * 0.2)) * 0.5;
                                      caml_call1(save,vg);
                                      var
                                       _dq_=rgba(0,0,0,128),
                                       shadow_paint=
                                        caml_call9
                                         (Paint[2],
                                          vg,
                                          365.,
                                          y$6 + 4.,
                                          160.,
                                          300.,
                                          6.,
                                          20.,
                                          _dq_,
                                          transparent);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,355.,y$6 - 10.,180.,330.);
                                      caml_call6(Path[13],vg,365.,y$6,160.,300.,3.);
                                      caml_call2(Path[8],vg,1);
                                      caml_call2(set_fill_paint,vg,shadow_paint);
                                      caml_call1(fill,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,365.,y$6,160.,300.,3.);
                                      caml_call3(Path[3],vg,355.,y$6 + 30.5);
                                      caml_call3(Path[4],vg,366.,y$6 + 30.5 - 11.);
                                      caml_call3(Path[4],vg,366.,y$6 + 30.5 + 11.);
                                      caml_call2(set_fill_color,vg,rgba(200,200,200,255));
                                      caml_call1(fill,vg);
                                      caml_call1(save,vg);
                                      caml_call5(Scissor[1],vg,365.,y$6,160.,300.);
                                      caml_call3(Transform[3],vg,0.,- (stack_h - 300.) * u);
                                      var
                                       dv=1. / (len - 1.),
                                       _ds_=_d1_.length - 1 - 1 | 0,
                                       x$6=365.,
                                       thumb=60.,
                                       _dr_=0;
                                      if(! (_ds_ < 0))
                                       {var i$10=_dr_;
                                        for(;;)
                                         {var
                                           ty=y$6 + 10.,
                                           tx=375. + (i$10 % 2 | 0) * 70.,
                                           ty$0=ty + (i$10 / 2 | 0) * 70.,
                                           _dB_=caml_check_bound(_d1_,i$10)[1 + i$10],
                                           match=caml_call2(Image[5],vg,_dB_),
                                           imgh=match[2],
                                           imgw=match[1];
                                          if(imgw < imgh)
                                           var
                                            ih=60. * imgh / imgw,
                                            iy=- (ih - 60.) * 0.5,
                                            iy$0=iy,
                                            ix=0.,
                                            ih$0=ih,
                                            iw=thumb;
                                          else
                                           var
                                            iw$0=60. * imgw / imgh,
                                            ix$0=- (iw$0 - 60.) * 0.5,
                                            iy$0=0.,
                                            ix=ix$0,
                                            ih$0=thumb,
                                            iw=iw$0;
                                          var v=i$10 * dv,a=clampf((u2 - v) / dv,0.,1.);
                                          if(a < 1.)
                                           {var
                                             cy$1=ty$0 + 30.,
                                             cx$0=tx + 30.,
                                             a0$0=0. + t * 6.,
                                             a1$0=3.14159265358979312 + t * 6.;
                                            caml_call1(save,vg);
                                            caml_call1(Path[1],vg);
                                            caml_call7(Path[9],vg,cx$0,cy$1,15.,a0$0,a1$0,1);
                                            caml_call7(Path[9],vg,cx$0,cy$1,11.25,a1$0,a0$0,0);
                                            caml_call1(Path[2],vg);
                                            var
                                             ax$0=cx$0 + Math.cos(a0$0) * 26.25 * 0.5,
                                             ay$0=cy$1 + Math.sin(a0$0) * 26.25 * 0.5,
                                             bx$0=cx$0 + Math.cos(a1$0) * 26.25 * 0.5,
                                             by$0=cy$1 + Math.sin(a1$0) * 26.25 * 0.5,
                                             _dp_=rgba(0,0,0,128),
                                             paint$4=
                                              caml_call7(Paint[1],vg,ax$0,ay$0,bx$0,by$0,transparent,_dp_);
                                            caml_call2(set_fill_paint,vg,paint$4);
                                            caml_call1(fill,vg);
                                            caml_call1(restore,vg)}
                                          var
                                           _dC_=caml_check_bound(_d1_,i$10)[1 + i$10],
                                           img_paint=
                                            caml_call8
                                             (Paint[4],vg,tx + ix,ty$0 + iy$0,iw,ih$0,0.,_dC_,a);
                                          caml_call1(Path[1],vg);
                                          caml_call6(Path[13],vg,tx,ty$0,thumb,thumb,5.);
                                          caml_call2(set_fill_paint,vg,img_paint);
                                          caml_call1(fill,vg);
                                          var
                                           _dD_=rgba(0,0,0,128),
                                           shadow_paint$2=
                                            caml_call9
                                             (Paint[2],vg,tx - 1.,ty$0,62.,62.,5.,3.,_dD_,transparent);
                                          caml_call1(Path[1],vg);
                                          caml_call5(Path[7],vg,tx - 5.,ty$0 - 5.,70.,70.);
                                          caml_call6(Path[13],vg,tx,ty$0,thumb,thumb,6.);
                                          caml_call2(Path[8],vg,1);
                                          caml_call2(set_fill_paint,vg,shadow_paint$2);
                                          caml_call1(fill,vg);
                                          caml_call1(Path[1],vg);
                                          caml_call6(Path[13],vg,tx + 0.5,ty$0 + 0.5,59.,59.,3.5);
                                          caml_call2(set_stroke_width,vg,1.);
                                          caml_call2(set_stroke_color,vg,rgba(255,255,255,192));
                                          caml_call1(stroke,vg);
                                          var _dE_=i$10 + 1 | 0;
                                          if(_ds_ !== i$10){var i$10=_dE_;continue}
                                          break}}
                                      caml_call1(restore,vg);
                                      var
                                       _dt_=rgba(200,200,200,0),
                                       _du_=rgba(200,200,200,255),
                                       fade_paint=
                                        caml_call7(Paint[1],vg,x$6,y$6,x$6,y$6 + 6.,_du_,_dt_);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,369.,y$6,152.,6.);
                                      caml_call2(set_fill_paint,vg,fade_paint);
                                      caml_call1(fill,vg);
                                      var
                                       _dv_=rgba(200,200,200,0),
                                       _dw_=rgba(200,200,200,255),
                                       fade_paint$0=
                                        caml_call7
                                         (Paint[1],vg,x$6,y$6 + 300.,x$6,y$6 + 300. - 6.,_dw_,_dv_);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,369.,y$6 + 300. - 6.,152.,6.);
                                      caml_call2(set_fill_paint,vg,fade_paint$0);
                                      caml_call1(fill,vg);
                                      var
                                       _dx_=rgba(0,0,0,92),
                                       _dy_=rgba(0,0,0,32),
                                       shadow_paint$0=
                                        caml_call9
                                         (Paint[2],vg,514.,y$6 + 4. + 1.,8.,292.,3.,4.,_dy_,_dx_);
                                      caml_call1(Path[1],vg);
                                      caml_call6(Path[13],vg,513.,y$6 + 4.,8.,292.,3.);
                                      caml_call2(set_fill_paint,vg,shadow_paint$0);
                                      caml_call1(fill,vg);
                                      var
                                       scroll_h=300. / stack_h * 292.,
                                       _dz_=rgba(128,128,128,255),
                                       _dA_=rgba(220,220,220,255),
                                       shadow_paint$1=
                                        caml_call9
                                         (Paint[2],
                                          vg,
                                          512.,
                                          y$6 + 4. + (292. - scroll_h) * u - 1.,
                                          8.,
                                          scroll_h,
                                          3.,
                                          4.,
                                          _dA_,
                                          _dz_);
                                      caml_call1(Path[1],vg);
                                      caml_call6
                                       (Path[13],
                                        vg,
                                        514.,
                                        y$6 + 4. + 1. + (292. - scroll_h) * u,
                                        6.,
                                        scroll_h - 2.,
                                        2.);
                                      caml_call2(set_fill_paint,vg,shadow_paint$1);
                                      caml_call1(fill,vg);
                                      caml_call1(restore,vg);
                                      caml_call1(restore,vg);
                                      var
                                       avg=[0,0.],
                                       _d3_=t$0[3].length - 1 - 1 | 0,
                                       y$7=5.,
                                       x$7=5.,
                                       _d2_=0;
                                      if(! (_d3_ < 0))
                                       {var i$13=_d2_;
                                        for(;;)
                                         {avg[1] = avg[1] + caml_array_get(t$0[3],i$13);
                                          var _d4_=i$13 + 1 | 0;
                                          if(_d3_ !== i$13){var i$13=_d4_;continue}
                                          break}}
                                      var avg$0=avg[1] / (t$0[3].length - 1);
                                      caml_call1(Path[1],vg);
                                      caml_call5(Path[7],vg,x$7,y$7,200.,35.);
                                      caml_call2(set_fill_color,vg,rgba(0,0,0,128));
                                      caml_call1(fill,vg);
                                      caml_call1(Path[1],vg);
                                      caml_call3(Path[3],vg,x$7,40.);
                                      var len$0=t$0[3].length - 1;
                                      switch(t$0[1])
                                       {case 0:
                                         var _d6_=len$0 - 1 | 0,_d5_=0;
                                         if(! (_d6_ < 0))
                                          {var i$14=_d5_;
                                           for(;;)
                                            {var
                                              _d7_=caml_mod(t$0[4] + i$14 | 0,len$0),
                                              v$0=1. / (1e-05 + caml_array_get(t$0[3],_d7_)),
                                              v$1=80. < v$0?80.:v$0,
                                              vx=5. + i$14 / (len$0 - 1.) * 200.,
                                              vy=40. - v$1 / 80. * 35.;
                                             caml_call3(Path[4],vg,vx,vy);
                                             var _d8_=i$14 + 1 | 0;
                                             if(_d6_ !== i$14){var i$14=_d8_;continue}
                                             break}}
                                         break;
                                        case 1:break
                                        }
                                      caml_call3(Path[4],vg,205.,40.);
                                      caml_call2(set_fill_color,vg,rgba(255,192,0,128));
                                      caml_call1(fill,vg);
                                      caml_call2(Text[9],vg,_cd_);
                                      caml_call2(Text[4],vg,12.);
                                      caml_call2(Text[8],vg,9);
                                      caml_call2(set_fill_color,vg,rgba(240,240,240,192));
                                      caml_call6(Text[1],vg,8.,8.,0,0,t$0[2]);
                                      switch(t$0[1])
                                       {case 0:
                                         caml_call2(Text[4],vg,15.);
                                         caml_call2(Text[8],vg,12);
                                         caml_call2(set_fill_color,vg,rgba(240,240,240,255));
                                         var s=caml_call1(sprintf(_ce_),1. / avg$0);
                                         caml_call6(Text[1],vg,202.,8.,0,0,s);
                                         caml_call2(Text[4],vg,13.);
                                         caml_call2(Text[8],vg,68);
                                         caml_call2(set_fill_color,vg,rgba(240,240,240,160));
                                         var s$0=caml_call1(sprintf(_cf_),avg$0 * 1000.);
                                         caml_call6(Text[1],vg,202.,37.,0,0,s$0);
                                         break;
                                        case 1:break
                                        }
                                      caml_call1(end_frame,vg);
                                      window.requestAnimationFrame
                                       (caml_js_wrap_callback
                                         (function(_ea_){return closure(vg,data,_ea_)}));
                                      return 0}}}}}}}}}}}}}
            var _dG_=count - 1 | 0,_dF_=0;
            if(! (_dG_ < 0))
             {var i$11=_dF_;
              for(;;)
               {var
                 row=caml_check_bound(lines,i$11)[1 + i$11],
                 _dH_=x$1 < _d$_?1:0;
                if(_dH_)
                 {var _dI_=_d$_ < x$1 + 150.?1:0;
                  if(_dI_)
                   var
                    _dJ_=y$0[1] <= _d__?1:0,
                    hit=_dJ_?_d__ < y$0[1] + line_h?1:0:_dJ_;
                  else
                   var hit=_dI_}
                else
                 var hit=_dH_;
                r[1]++;
                caml_call1(Path[1],vg);
                var _dK_=hit?64:16;
                caml_call2(set_fill_color,vg,rgba(255,255,255,_dK_));
                caml_call5
                 (Path[7],vg,x$1 + row[4],y$0[1],row[5] - row[4],line_h);
                caml_call1(fill,vg);
                caml_call2(set_fill_color,vg,white);
                caml_call6(Text[1],vg,x$1,y$0[1],[0,row[1]],[0,row[2]],text);
                if(hit)
                 {var
                   x=_d$_ < x$1 + row[3] / 2.?x$1:x$1 + row[3],
                   caretx=[0,x],
                   px=[0,x$1],
                   nglyphs=
                    caml_call7
                     (Text[17],vg,x$1,y$0[1],[0,row[1]],[0,row[2]],glyphs,text),
                   _dM_=nglyphs - 1 | 0,
                   _dL_=0;
                  if(! (_dM_ < 0))
                   {var i$12=_dL_;
                    for(;;)
                     {var
                       glyph=caml_check_bound(glyphs,i$12)[1 + i$12],
                       x0=glyph[2];
                      if((i$12 + 1 | 0) < nglyphs)
                       var
                        _dO_=i$12 + 1 | 0,
                        x1=caml_check_bound(glyphs,_dO_)[1 + _dO_][2];
                      else
                       var x1=x$1 + row[3];
                      var
                       gx$0=x0 * 0.3 + x1 * 0.7,
                       _dP_=px[1] <= _d$_?1:0,
                       _dQ_=_dP_?_d$_ < gx$0?1:0:_dP_;
                      if(_dQ_)caretx[1] = glyph[2];
                      px[1] = gx$0;
                      var _dR_=i$12 + 1 | 0;
                      if(_dM_ !== i$12){var i$12=_dR_;continue}
                      break}}
                  caml_call1(Path[1],vg);
                  caml_call2(set_fill_color,vg,rgba(255,192,0,255));
                  caml_call5(Path[7],vg,caretx[1],y$0[1],2.,line_h);
                  caml_call1(fill,vg);
                  gutter[1] = lnum[1] + 1 | 0;
                  gx[1] = x$1 - 10.;
                  gy[1] = y$0[1] + line_h / 2.}
                lnum[1]++;
                y$0[1] = y$0[1] + line_h;
                start[1] = row[6];
                var _dN_=i$11 + 1 | 0;
                if(_dG_ !== i$11){var i$11=_dN_;continue}
                break}}
            continue}}
        return closure(vg,data,_cG_)});
    do_at_exit(0);
    return}
  (function(){return this}()));
